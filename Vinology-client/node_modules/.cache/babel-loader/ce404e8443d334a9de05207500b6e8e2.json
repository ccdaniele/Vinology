{"ast":null,"code":"'use strict';\n\nclass DynamoDb {\n  generateTags(params, operation, response) {\n    const tags = {};\n\n    if (params) {\n      if (params.TableName) {\n        Object.assign(tags, {\n          'resource.name': `${operation} ${params.TableName}`,\n          'aws.dynamodb.table_name': params.TableName\n        });\n      } // batch operations have different format, collect table name for batch\n      // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#batchGetItem-property`\n      // dynamoDB batch TableName\n\n\n      if (params.RequestItems) {\n        if (typeof params.RequestItems === 'object') {\n          if (Object.keys(params.RequestItems).length === 1) {\n            const tableName = Object.keys(params.RequestItems)[0]; // also add span type to match serverless convention\n\n            Object.assign(tags, {\n              'resource.name': `${operation} ${tableName}`,\n              'aws.dynamodb.table_name': tableName\n            });\n          }\n        }\n      } // TODO: DynamoDB.DocumentClient does batches on multiple tables\n      // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#batchGet-property\n      // it may be useful to have a different resource naming convention here to show all table names\n\n    } // also add span type to match serverless convention\n\n\n    Object.assign(tags, {\n      'span.type': 'dynamodb'\n    });\n    return tags;\n  }\n\n}\n\nmodule.exports = DynamoDb;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-aws-sdk/src/services/dynamodb.js"],"names":["DynamoDb","generateTags","params","operation","response","tags","TableName","Object","assign","RequestItems","keys","length","tableName","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,QAAN,CAAe;AACbC,EAAAA,YAAY,CAAEC,MAAF,EAAUC,SAAV,EAAqBC,QAArB,EAA+B;AACzC,UAAMC,IAAI,GAAG,EAAb;;AAEA,QAAIH,MAAJ,EAAY;AACV,UAAIA,MAAM,CAACI,SAAX,EAAsB;AACpBC,QAAAA,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;AAClB,2BAAkB,GAAEF,SAAU,IAAGD,MAAM,CAACI,SAAU,EADhC;AAElB,qCAA2BJ,MAAM,CAACI;AAFhB,SAApB;AAID,OANS,CAQV;AACA;AACA;;;AACA,UAAIJ,MAAM,CAACO,YAAX,EAAyB;AACvB,YAAI,OAAOP,MAAM,CAACO,YAAd,KAA+B,QAAnC,EAA6C;AAC3C,cAAIF,MAAM,CAACG,IAAP,CAAYR,MAAM,CAACO,YAAnB,EAAiCE,MAAjC,KAA4C,CAAhD,EAAmD;AACjD,kBAAMC,SAAS,GAAGL,MAAM,CAACG,IAAP,CAAYR,MAAM,CAACO,YAAnB,EAAiC,CAAjC,CAAlB,CADiD,CAGjD;;AACAF,YAAAA,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;AAClB,+BAAkB,GAAEF,SAAU,IAAGS,SAAU,EADzB;AAElB,yCAA2BA;AAFT,aAApB;AAID;AACF;AACF,OAvBS,CAyBV;AACA;AACA;;AACD,KA/BwC,CAiCzC;;;AACAL,IAAAA,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;AAClB,mBAAa;AADK,KAApB;AAIA,WAAOA,IAAP;AACD;;AAxCY;;AA2CfQ,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["'use strict'\n\nclass DynamoDb {\n  generateTags (params, operation, response) {\n    const tags = {}\n\n    if (params) {\n      if (params.TableName) {\n        Object.assign(tags, {\n          'resource.name': `${operation} ${params.TableName}`,\n          'aws.dynamodb.table_name': params.TableName\n        })\n      }\n\n      // batch operations have different format, collect table name for batch\n      // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#batchGetItem-property`\n      // dynamoDB batch TableName\n      if (params.RequestItems) {\n        if (typeof params.RequestItems === 'object') {\n          if (Object.keys(params.RequestItems).length === 1) {\n            const tableName = Object.keys(params.RequestItems)[0]\n\n            // also add span type to match serverless convention\n            Object.assign(tags, {\n              'resource.name': `${operation} ${tableName}`,\n              'aws.dynamodb.table_name': tableName\n            })\n          }\n        }\n      }\n\n      // TODO: DynamoDB.DocumentClient does batches on multiple tables\n      // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#batchGet-property\n      // it may be useful to have a different resource naming convention here to show all table names\n    }\n\n    // also add span type to match serverless convention\n    Object.assign(tags, {\n      'span.type': 'dynamodb'\n    })\n\n    return tags\n  }\n}\n\nmodule.exports = DynamoDb\n"]},"metadata":{},"sourceType":"script"}