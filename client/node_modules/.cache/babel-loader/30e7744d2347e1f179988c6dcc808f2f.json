{"ast":null,"code":"'use strict';\n\nconst tx = require('../../dd-trace/src/plugins/util/redis');\n\nfunction createWrapSendCommand(tracer, config) {\n  return function wrapSendCommand(sendCommand) {\n    return function sendCommandWithTrace(command, stream) {\n      if (!command || !command.promise || !config.filter(command.name)) return sendCommand.apply(this, arguments);\n      const options = this.options || {};\n      const connectionName = this.options.connectionName;\n      const db = options.db;\n      const span = tx.instrument(tracer, config, db, command.name, command.args);\n      tx.setHost(span, options.host, options.port);\n      tx.wrap(span, command.promise);\n\n      if (config.splitByInstance && connectionName) {\n        const service = config.service ? `${config.service}-${connectionName}` : connectionName;\n        span.setTag('service.name', service);\n      }\n\n      return tracer.scope().bind(sendCommand, span).apply(this, arguments);\n    };\n  };\n}\n\nmodule.exports = {\n  name: 'ioredis',\n  versions: ['>=2'],\n\n  patch(Redis, tracer, config) {\n    config = tx.normalizeConfig(config);\n    this.wrap(Redis.prototype, 'sendCommand', createWrapSendCommand(tracer, config));\n  },\n\n  unpatch(Redis) {\n    this.unwrap(Redis.prototype, 'sendCommand');\n  }\n\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-ioredis/src/index.js"],"names":["tx","require","createWrapSendCommand","tracer","config","wrapSendCommand","sendCommand","sendCommandWithTrace","command","stream","promise","filter","name","apply","arguments","options","connectionName","db","span","instrument","args","setHost","host","port","wrap","splitByInstance","service","setTag","scope","bind","module","exports","versions","patch","Redis","normalizeConfig","prototype","unpatch","unwrap"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,uCAAD,CAAlB;;AAEA,SAASC,qBAAT,CAAgCC,MAAhC,EAAwCC,MAAxC,EAAgD;AAC9C,SAAO,SAASC,eAAT,CAA0BC,WAA1B,EAAuC;AAC5C,WAAO,SAASC,oBAAT,CAA+BC,OAA/B,EAAwCC,MAAxC,EAAgD;AACrD,UAAI,CAACD,OAAD,IAAY,CAACA,OAAO,CAACE,OAArB,IAAgC,CAACN,MAAM,CAACO,MAAP,CAAcH,OAAO,CAACI,IAAtB,CAArC,EAAkE,OAAON,WAAW,CAACO,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP;AAElE,YAAMC,OAAO,GAAG,KAAKA,OAAL,IAAgB,EAAhC;AACA,YAAMC,cAAc,GAAG,KAAKD,OAAL,CAAaC,cAApC;AACA,YAAMC,EAAE,GAAGF,OAAO,CAACE,EAAnB;AACA,YAAMC,IAAI,GAAGlB,EAAE,CAACmB,UAAH,CAAchB,MAAd,EAAsBC,MAAtB,EAA8Ba,EAA9B,EAAkCT,OAAO,CAACI,IAA1C,EAAgDJ,OAAO,CAACY,IAAxD,CAAb;AAEApB,MAAAA,EAAE,CAACqB,OAAH,CAAWH,IAAX,EAAiBH,OAAO,CAACO,IAAzB,EAA+BP,OAAO,CAACQ,IAAvC;AACAvB,MAAAA,EAAE,CAACwB,IAAH,CAAQN,IAAR,EAAcV,OAAO,CAACE,OAAtB;;AAEA,UAAIN,MAAM,CAACqB,eAAP,IAA0BT,cAA9B,EAA8C;AAC5C,cAAMU,OAAO,GAAGtB,MAAM,CAACsB,OAAP,GACX,GAAEtB,MAAM,CAACsB,OAAQ,IAAGV,cAAe,EADxB,GAEZA,cAFJ;AAIAE,QAAAA,IAAI,CAACS,MAAL,CAAY,cAAZ,EAA4BD,OAA5B;AACD;;AAED,aAAOvB,MAAM,CAACyB,KAAP,GAAeC,IAAf,CAAoBvB,WAApB,EAAiCY,IAAjC,EAAuCL,KAAvC,CAA6C,IAA7C,EAAmDC,SAAnD,CAAP;AACD,KApBD;AAqBD,GAtBD;AAuBD;;AAEDgB,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA,IAAI,EAAE,SADS;AAEfoB,EAAAA,QAAQ,EAAE,CAAC,KAAD,CAFK;;AAGfC,EAAAA,KAAK,CAAEC,KAAF,EAAS/B,MAAT,EAAiBC,MAAjB,EAAyB;AAC5BA,IAAAA,MAAM,GAAGJ,EAAE,CAACmC,eAAH,CAAmB/B,MAAnB,CAAT;AACA,SAAKoB,IAAL,CAAUU,KAAK,CAACE,SAAhB,EAA2B,aAA3B,EAA0ClC,qBAAqB,CAACC,MAAD,EAASC,MAAT,CAA/D;AACD,GANc;;AAOfiC,EAAAA,OAAO,CAAEH,KAAF,EAAS;AACd,SAAKI,MAAL,CAAYJ,KAAK,CAACE,SAAlB,EAA6B,aAA7B;AACD;;AATc,CAAjB","sourcesContent":["'use strict'\n\nconst tx = require('../../dd-trace/src/plugins/util/redis')\n\nfunction createWrapSendCommand (tracer, config) {\n  return function wrapSendCommand (sendCommand) {\n    return function sendCommandWithTrace (command, stream) {\n      if (!command || !command.promise || !config.filter(command.name)) return sendCommand.apply(this, arguments)\n\n      const options = this.options || {}\n      const connectionName = this.options.connectionName\n      const db = options.db\n      const span = tx.instrument(tracer, config, db, command.name, command.args)\n\n      tx.setHost(span, options.host, options.port)\n      tx.wrap(span, command.promise)\n\n      if (config.splitByInstance && connectionName) {\n        const service = config.service\n          ? `${config.service}-${connectionName}`\n          : connectionName\n\n        span.setTag('service.name', service)\n      }\n\n      return tracer.scope().bind(sendCommand, span).apply(this, arguments)\n    }\n  }\n}\n\nmodule.exports = {\n  name: 'ioredis',\n  versions: ['>=2'],\n  patch (Redis, tracer, config) {\n    config = tx.normalizeConfig(config)\n    this.wrap(Redis.prototype, 'sendCommand', createWrapSendCommand(tracer, config))\n  },\n  unpatch (Redis) {\n    this.unwrap(Redis.prototype, 'sendCommand')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}