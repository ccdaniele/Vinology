{"ast":null,"code":"'use strict';\n\nconst pick = require('lodash.pick');\n\nconst id = require('../../id');\n\nconst DatadogSpanContext = require('../span_context');\n\nconst NoopSpanContext = require('../../noop/span_context');\n\nconst log = require('../../log');\n\nconst traceKey = 'x-datadog-trace-id';\nconst spanKey = 'x-datadog-parent-id';\nconst originKey = 'x-datadog-origin';\nconst samplingKey = 'x-datadog-sampling-priority';\nconst sampleKey = 'x-datadog-sampled';\nconst baggagePrefix = 'ot-baggage-';\nconst b3TraceKey = 'x-b3-traceid';\nconst b3TraceExpr = /^([0-9a-f]{16}){1,2}$/i;\nconst b3SpanKey = 'x-b3-spanid';\nconst b3SpanExpr = /^[0-9a-f]{16}$/i;\nconst b3ParentKey = 'x-b3-parentspanid';\nconst b3SampledKey = 'x-b3-sampled';\nconst b3FlagsKey = 'x-b3-flags';\nconst b3HeaderKey = 'b3';\nconst sqsdHeaderHey = 'x-aws-sqsd-attr-_datadog';\nconst b3HeaderExpr = /^(([0-9a-f]{16}){1,2}-[0-9a-f]{16}(-[01d](-[0-9a-f]{16})?)?|[01d])$/i;\nconst baggageExpr = new RegExp(`^${baggagePrefix}(.+)$`);\nconst ddKeys = [traceKey, spanKey, samplingKey, originKey];\nconst b3Keys = [b3TraceKey, b3SpanKey, b3ParentKey, b3SampledKey, b3FlagsKey, b3HeaderKey];\nconst logKeys = ddKeys.concat(b3Keys);\n\nclass TextMapPropagator {\n  constructor(config) {\n    this._config = config;\n  }\n\n  inject(spanContext, carrier) {\n    carrier[traceKey] = spanContext.toTraceId();\n    carrier[spanKey] = spanContext.toSpanId();\n    carrier[sampleKey] = spanContext._traceFlags.sampled ? '1' : '0';\n\n    this._injectOrigin(spanContext, carrier);\n\n    this._injectSamplingPriority(spanContext, carrier);\n\n    this._injectBaggageItems(spanContext, carrier);\n\n    this._injectB3(spanContext, carrier);\n\n    log.debug(() => `Inject into carrier: ${JSON.stringify(pick(carrier, logKeys))}.`);\n  }\n\n  extract(carrier) {\n    const spanContext = this._extractSpanContext(carrier);\n\n    if (!spanContext) return spanContext;\n\n    this._extractOrigin(carrier, spanContext);\n\n    this._extractBaggageItems(carrier, spanContext);\n\n    this._extractSamplingPriority(carrier, spanContext);\n\n    log.debug(() => `Extract from carrier: ${JSON.stringify(pick(carrier, logKeys))}.`);\n    return spanContext;\n  }\n\n  _injectOrigin(spanContext, carrier) {\n    const origin = spanContext._trace.origin;\n\n    if (origin) {\n      carrier[originKey] = origin;\n    }\n  }\n\n  _injectSamplingPriority(spanContext, carrier) {\n    const priority = spanContext._sampling.priority;\n\n    if (Number.isInteger(priority)) {\n      carrier[samplingKey] = priority.toString();\n    }\n  }\n\n  _injectBaggageItems(spanContext, carrier) {\n    spanContext._baggageItems && Object.keys(spanContext._baggageItems).forEach(key => {\n      carrier[baggagePrefix + key] = String(spanContext._baggageItems[key]);\n    });\n  }\n\n  _injectB3(spanContext, carrier) {\n    if (!this._config.experimental.b3) return;\n    carrier[b3TraceKey] = spanContext._traceId.toString('hex');\n    carrier[b3SpanKey] = spanContext._spanId.toString('hex');\n    carrier[b3SampledKey] = spanContext._traceFlags.sampled ? '1' : '0';\n\n    if (spanContext._traceFlags.debug) {\n      carrier[b3FlagsKey] = '1';\n    }\n\n    if (spanContext._parentId) {\n      carrier[b3ParentKey] = spanContext._parentId.toString('hex');\n    }\n  }\n\n  _extractSpanContext(carrier) {\n    const context = this._extractContext(carrier);\n\n    if (!context) return null;\n\n    if (context.traceFlags.sampled !== false) {\n      return new DatadogSpanContext(context);\n    } else {\n      return new NoopSpanContext(context);\n    }\n  }\n\n  _extractContext(carrier) {\n    return this._extractDatadogContext(carrier) || this._extractB3Context(carrier) || this._extractSqsdContext(carrier);\n  }\n\n  _extractDatadogContext(carrier) {\n    const sampled = this._isSampled(carrier[sampleKey]);\n\n    return this._extractGenericContext(carrier, traceKey, spanKey, {\n      sampled\n    }, 10);\n  }\n\n  _extractB3Context(carrier) {\n    if (!this._config.experimental.b3) return null;\n\n    const b3 = this._extractB3Headers(carrier);\n\n    const debug = b3[b3FlagsKey] === '1';\n\n    const sampled = this._isSampled(b3[b3SampledKey], debug);\n\n    return this._extractGenericContext(b3, b3TraceKey, b3SpanKey, {\n      sampled,\n      debug\n    });\n  }\n\n  _extractSqsdContext(carrier) {\n    const headerValue = carrier[sqsdHeaderHey];\n\n    if (!headerValue) {\n      return null;\n    }\n\n    let parsed;\n\n    try {\n      parsed = JSON.parse(headerValue);\n    } catch (e) {\n      return null;\n    }\n\n    return this._extractDatadogContext(parsed);\n  }\n\n  _extractGenericContext(carrier, traceKey, spanKey, traceFlags, radix) {\n    if (carrier[traceKey] && carrier[spanKey]) {\n      return {\n        traceId: id(carrier[traceKey], radix),\n        spanId: id(carrier[spanKey], radix),\n        traceFlags\n      };\n    } else if (typeof traceFlags.sampled === 'boolean') {\n      return {\n        traceId: id(),\n        spanId: null,\n        traceFlags\n      };\n    }\n\n    return null;\n  }\n\n  _extractB3Headers(carrier) {\n    if (b3HeaderExpr.test(carrier[b3HeaderKey])) {\n      return this._extractB3SingleHeader(carrier);\n    } else {\n      return this._extractB3MultipleHeaders(carrier);\n    }\n  }\n\n  _extractB3MultipleHeaders(carrier) {\n    const b3 = {};\n\n    if (b3TraceExpr.test(carrier[b3TraceKey]) && b3SpanExpr.test(carrier[b3SpanKey])) {\n      b3[b3TraceKey] = carrier[b3TraceKey];\n      b3[b3SpanKey] = carrier[b3SpanKey];\n    }\n\n    if (carrier[b3SampledKey]) {\n      b3[b3SampledKey] = carrier[b3SampledKey];\n    }\n\n    if (carrier[b3FlagsKey]) {\n      b3[b3FlagsKey] = carrier[b3FlagsKey];\n    }\n\n    return b3;\n  }\n\n  _extractB3SingleHeader(carrier) {\n    const parts = carrier[b3HeaderKey].split('-');\n\n    if (parts[0] === 'd') {\n      return {\n        [b3SampledKey]: '1',\n        [b3FlagsKey]: '1'\n      };\n    } else if (parts.length === 1) {\n      return {\n        [b3SampledKey]: parts[0]\n      };\n    } else {\n      const b3 = {\n        [b3TraceKey]: parts[0],\n        [b3SpanKey]: parts[1],\n        [b3SampledKey]: parts[2] !== '0' ? '1' : '0'\n      };\n\n      if (parts[2] === 'd') {\n        b3[b3FlagsKey] = '1';\n      }\n\n      return b3;\n    }\n  }\n\n  _extractOrigin(carrier, spanContext) {\n    const origin = carrier[originKey];\n\n    if (typeof carrier[originKey] === 'string') {\n      spanContext._trace.origin = origin;\n    }\n  }\n\n  _extractBaggageItems(carrier, spanContext) {\n    Object.keys(carrier).forEach(key => {\n      const match = key.match(baggageExpr);\n\n      if (match) {\n        spanContext._baggageItems[match[1]] = carrier[key];\n      }\n    });\n  }\n\n  _extractSamplingPriority(carrier, spanContext) {\n    const priority = parseInt(carrier[samplingKey], 10);\n\n    if (Number.isInteger(priority)) {\n      spanContext._sampling.priority = parseInt(carrier[samplingKey], 10);\n    }\n  }\n\n  _isSampled(sampled, debug) {\n    if (debug || sampled === '1') {\n      return true;\n    } else if (sampled === '0') {\n      return false;\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = TextMapPropagator;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/opentracing/propagation/text_map.js"],"names":["pick","require","id","DatadogSpanContext","NoopSpanContext","log","traceKey","spanKey","originKey","samplingKey","sampleKey","baggagePrefix","b3TraceKey","b3TraceExpr","b3SpanKey","b3SpanExpr","b3ParentKey","b3SampledKey","b3FlagsKey","b3HeaderKey","sqsdHeaderHey","b3HeaderExpr","baggageExpr","RegExp","ddKeys","b3Keys","logKeys","concat","TextMapPropagator","constructor","config","_config","inject","spanContext","carrier","toTraceId","toSpanId","_traceFlags","sampled","_injectOrigin","_injectSamplingPriority","_injectBaggageItems","_injectB3","debug","JSON","stringify","extract","_extractSpanContext","_extractOrigin","_extractBaggageItems","_extractSamplingPriority","origin","_trace","priority","_sampling","Number","isInteger","toString","_baggageItems","Object","keys","forEach","key","String","experimental","b3","_traceId","_spanId","_parentId","context","_extractContext","traceFlags","_extractDatadogContext","_extractB3Context","_extractSqsdContext","_isSampled","_extractGenericContext","_extractB3Headers","headerValue","parsed","parse","e","radix","traceId","spanId","test","_extractB3SingleHeader","_extractB3MultipleHeaders","parts","split","length","match","parseInt","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst pick = require('lodash.pick')\nconst id = require('../../id')\nconst DatadogSpanContext = require('../span_context')\nconst NoopSpanContext = require('../../noop/span_context')\nconst log = require('../../log')\n\nconst traceKey = 'x-datadog-trace-id'\nconst spanKey = 'x-datadog-parent-id'\nconst originKey = 'x-datadog-origin'\nconst samplingKey = 'x-datadog-sampling-priority'\nconst sampleKey = 'x-datadog-sampled'\nconst baggagePrefix = 'ot-baggage-'\nconst b3TraceKey = 'x-b3-traceid'\nconst b3TraceExpr = /^([0-9a-f]{16}){1,2}$/i\nconst b3SpanKey = 'x-b3-spanid'\nconst b3SpanExpr = /^[0-9a-f]{16}$/i\nconst b3ParentKey = 'x-b3-parentspanid'\nconst b3SampledKey = 'x-b3-sampled'\nconst b3FlagsKey = 'x-b3-flags'\nconst b3HeaderKey = 'b3'\nconst sqsdHeaderHey = 'x-aws-sqsd-attr-_datadog'\nconst b3HeaderExpr = /^(([0-9a-f]{16}){1,2}-[0-9a-f]{16}(-[01d](-[0-9a-f]{16})?)?|[01d])$/i\nconst baggageExpr = new RegExp(`^${baggagePrefix}(.+)$`)\nconst ddKeys = [traceKey, spanKey, samplingKey, originKey]\nconst b3Keys = [b3TraceKey, b3SpanKey, b3ParentKey, b3SampledKey, b3FlagsKey, b3HeaderKey]\nconst logKeys = ddKeys.concat(b3Keys)\n\nclass TextMapPropagator {\n  constructor (config) {\n    this._config = config\n  }\n\n  inject (spanContext, carrier) {\n    carrier[traceKey] = spanContext.toTraceId()\n    carrier[spanKey] = spanContext.toSpanId()\n    carrier[sampleKey] = spanContext._traceFlags.sampled ? '1' : '0'\n\n    this._injectOrigin(spanContext, carrier)\n    this._injectSamplingPriority(spanContext, carrier)\n    this._injectBaggageItems(spanContext, carrier)\n    this._injectB3(spanContext, carrier)\n\n    log.debug(() => `Inject into carrier: ${JSON.stringify(pick(carrier, logKeys))}.`)\n  }\n\n  extract (carrier) {\n    const spanContext = this._extractSpanContext(carrier)\n\n    if (!spanContext) return spanContext\n\n    this._extractOrigin(carrier, spanContext)\n    this._extractBaggageItems(carrier, spanContext)\n    this._extractSamplingPriority(carrier, spanContext)\n\n    log.debug(() => `Extract from carrier: ${JSON.stringify(pick(carrier, logKeys))}.`)\n\n    return spanContext\n  }\n\n  _injectOrigin (spanContext, carrier) {\n    const origin = spanContext._trace.origin\n\n    if (origin) {\n      carrier[originKey] = origin\n    }\n  }\n\n  _injectSamplingPriority (spanContext, carrier) {\n    const priority = spanContext._sampling.priority\n\n    if (Number.isInteger(priority)) {\n      carrier[samplingKey] = priority.toString()\n    }\n  }\n\n  _injectBaggageItems (spanContext, carrier) {\n    spanContext._baggageItems && Object.keys(spanContext._baggageItems).forEach(key => {\n      carrier[baggagePrefix + key] = String(spanContext._baggageItems[key])\n    })\n  }\n\n  _injectB3 (spanContext, carrier) {\n    if (!this._config.experimental.b3) return\n\n    carrier[b3TraceKey] = spanContext._traceId.toString('hex')\n    carrier[b3SpanKey] = spanContext._spanId.toString('hex')\n    carrier[b3SampledKey] = spanContext._traceFlags.sampled ? '1' : '0'\n\n    if (spanContext._traceFlags.debug) {\n      carrier[b3FlagsKey] = '1'\n    }\n\n    if (spanContext._parentId) {\n      carrier[b3ParentKey] = spanContext._parentId.toString('hex')\n    }\n  }\n\n  _extractSpanContext (carrier) {\n    const context = this._extractContext(carrier)\n\n    if (!context) return null\n\n    if (context.traceFlags.sampled !== false) {\n      return new DatadogSpanContext(context)\n    } else {\n      return new NoopSpanContext(context)\n    }\n  }\n\n  _extractContext (carrier) {\n    return this._extractDatadogContext(carrier) || this._extractB3Context(carrier) || this._extractSqsdContext(carrier)\n  }\n\n  _extractDatadogContext (carrier) {\n    const sampled = this._isSampled(carrier[sampleKey])\n\n    return this._extractGenericContext(carrier, traceKey, spanKey, { sampled }, 10)\n  }\n\n  _extractB3Context (carrier) {\n    if (!this._config.experimental.b3) return null\n\n    const b3 = this._extractB3Headers(carrier)\n    const debug = b3[b3FlagsKey] === '1'\n    const sampled = this._isSampled(b3[b3SampledKey], debug)\n\n    return this._extractGenericContext(b3, b3TraceKey, b3SpanKey, { sampled, debug })\n  }\n\n  _extractSqsdContext (carrier) {\n    const headerValue = carrier[sqsdHeaderHey]\n    if (!headerValue) {\n      return null\n    }\n    let parsed\n    try {\n      parsed = JSON.parse(headerValue)\n    } catch (e) {\n      return null\n    }\n    return this._extractDatadogContext(parsed)\n  }\n\n  _extractGenericContext (carrier, traceKey, spanKey, traceFlags, radix) {\n    if (carrier[traceKey] && carrier[spanKey]) {\n      return {\n        traceId: id(carrier[traceKey], radix),\n        spanId: id(carrier[spanKey], radix),\n        traceFlags\n      }\n    } else if (typeof traceFlags.sampled === 'boolean') {\n      return {\n        traceId: id(),\n        spanId: null,\n        traceFlags\n      }\n    }\n\n    return null\n  }\n\n  _extractB3Headers (carrier) {\n    if (b3HeaderExpr.test(carrier[b3HeaderKey])) {\n      return this._extractB3SingleHeader(carrier)\n    } else {\n      return this._extractB3MultipleHeaders(carrier)\n    }\n  }\n\n  _extractB3MultipleHeaders (carrier) {\n    const b3 = {}\n\n    if (b3TraceExpr.test(carrier[b3TraceKey]) && b3SpanExpr.test(carrier[b3SpanKey])) {\n      b3[b3TraceKey] = carrier[b3TraceKey]\n      b3[b3SpanKey] = carrier[b3SpanKey]\n    }\n\n    if (carrier[b3SampledKey]) {\n      b3[b3SampledKey] = carrier[b3SampledKey]\n    }\n\n    if (carrier[b3FlagsKey]) {\n      b3[b3FlagsKey] = carrier[b3FlagsKey]\n    }\n\n    return b3\n  }\n\n  _extractB3SingleHeader (carrier) {\n    const parts = carrier[b3HeaderKey].split('-')\n\n    if (parts[0] === 'd') {\n      return {\n        [b3SampledKey]: '1',\n        [b3FlagsKey]: '1'\n      }\n    } else if (parts.length === 1) {\n      return {\n        [b3SampledKey]: parts[0]\n      }\n    } else {\n      const b3 = {\n        [b3TraceKey]: parts[0],\n        [b3SpanKey]: parts[1],\n        [b3SampledKey]: parts[2] !== '0' ? '1' : '0'\n      }\n\n      if (parts[2] === 'd') {\n        b3[b3FlagsKey] = '1'\n      }\n\n      return b3\n    }\n  }\n\n  _extractOrigin (carrier, spanContext) {\n    const origin = carrier[originKey]\n\n    if (typeof carrier[originKey] === 'string') {\n      spanContext._trace.origin = origin\n    }\n  }\n\n  _extractBaggageItems (carrier, spanContext) {\n    Object.keys(carrier).forEach(key => {\n      const match = key.match(baggageExpr)\n\n      if (match) {\n        spanContext._baggageItems[match[1]] = carrier[key]\n      }\n    })\n  }\n\n  _extractSamplingPriority (carrier, spanContext) {\n    const priority = parseInt(carrier[samplingKey], 10)\n\n    if (Number.isInteger(priority)) {\n      spanContext._sampling.priority = parseInt(carrier[samplingKey], 10)\n    }\n  }\n\n  _isSampled (sampled, debug) {\n    if (debug || sampled === '1') {\n      return true\n    } else if (sampled === '0') {\n      return false\n    }\n\n    return null\n  }\n}\n\nmodule.exports = TextMapPropagator\n"]},"metadata":{},"sourceType":"script"}