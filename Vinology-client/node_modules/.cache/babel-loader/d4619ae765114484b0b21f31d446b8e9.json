{"ast":null,"code":"'use strict';\n\nconst web = require('../../dd-trace/src/plugins/util/web');\n\nconst shimmer = require('../../datadog-shimmer');\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nconst tags = require('../../../ext/tags');\n\nconst types = require('../../../ext/types');\n\nconst kinds = require('../../../ext/kinds');\n\nconst WEB = types.WEB;\nconst SERVER = kinds.SERVER;\nconst RESOURCE_NAME = tags.RESOURCE_NAME;\nconst SERVICE_NAME = tags.SERVICE_NAME;\nconst SPAN_TYPE = tags.SPAN_TYPE;\nconst SPAN_KIND = tags.SPAN_KIND;\nconst HTTP_METHOD = tags.HTTP_METHOD;\nconst HTTP_URL = tags.HTTP_URL;\nconst HTTP_STATUS_CODE = tags.HTTP_STATUS_CODE;\nconst HTTP_ROUTE = tags.HTTP_ROUTE;\nconst HTTP_REQUEST_HEADERS = tags.HTTP_REQUEST_HEADERS;\nconst HTTP_RESPONSE_HEADERS = tags.HTTP_RESPONSE_HEADERS;\nconst HTTP_STATUS_OK = 200;\nconst HTTP2_HEADER_AUTHORITY = ':authority';\nconst HTTP2_HEADER_SCHEME = ':scheme';\nconst HTTP2_HEADER_METHOD = ':method';\nconst HTTP2_HEADER_PATH = ':path';\nconst HTTP2_HEADER_STATUS = ':status';\n\nfunction createWrapEmit(tracer, config) {\n  return function wrapEmit(emit) {\n    return function emitWithTrace(event, arg1, arg2) {\n      if (event === 'stream') {\n        const stream = arg1;\n        const headers = arg2;\n        return instrumentStream(tracer, config, stream, headers, 'http.request', () => {\n          return emit.apply(this, arguments);\n        });\n      } else if (event === 'request') {\n        const req = arg1;\n        const res = arg2;\n        return web.instrument(tracer, config, req, res, 'http.request', () => {\n          return emit.apply(this, arguments);\n        });\n      } else {\n        return emit.apply(this, arguments);\n      }\n    };\n  };\n}\n\nfunction createWrapCreateServer(tracer, config) {\n  config = web.normalizeConfig(config);\n  return function wrapCreateServer(createServer) {\n    return function createServerWithTrace(args) {\n      const server = createServer.apply(this, arguments);\n      shimmer.wrap(server, 'emit', createWrapEmit(tracer, config));\n      return server;\n    };\n  };\n}\n\nfunction instrumentStream(tracer, config, stream, headers, name, callback) {\n  if (!stream) return callback();\n  headers = headers || {};\n  web.patch(stream);\n  const span = startStreamSpan(tracer, config, stream, headers, name); // TODO: replace this with a REFERENCE_NOOP after we split http/express/etc\n\n  if (!config.filter(headers[HTTP2_HEADER_PATH])) {\n    span.context()._traceFlags.sampled = false;\n  }\n\n  if (config.service) {\n    span.setTag(SERVICE_NAME, config.service);\n  }\n\n  analyticsSampler.sample(span, config.measured, true);\n  wrapStreamEnd(stream);\n  addRequestTags(stream, headers);\n  addRequestHeaders(stream, headers);\n  addResourceTags(stream, headers);\n  return callback && tracer.scope().activate(span, () => callback(span));\n}\n\nfunction startStreamSpan(tracer, config, stream, headers, name) {\n  stream._datadog.config = config;\n\n  if (stream._datadog.span) {\n    return stream._datadog.span;\n  }\n\n  const span = web.startChildSpan(tracer, name, headers);\n  stream._datadog.tracer = tracer;\n  stream._datadog.span = span;\n  return span;\n}\n\nfunction wrapStreamEnd(stream) {\n  function wrapEnd(end) {\n    return function endWithTrace() {\n      const returnValue = end.apply(this, arguments);\n      finishStream(stream);\n      return returnValue;\n    };\n  }\n\n  shimmer.wrap(stream, 'end', wrapEnd);\n}\n\nfunction finishStream(stream) {\n  if (stream._datadog.finished) return;\n  addResponseTags(stream);\n  addResponseHeaders(stream);\n\n  stream._datadog.span.finish();\n\n  stream._datadog.finished = true;\n}\n\nfunction addRequestTags(stream, headers) {\n  const span = stream._datadog.span;\n  const url = `${headers[HTTP2_HEADER_SCHEME]}://${headers[HTTP2_HEADER_AUTHORITY]}${headers[HTTP2_HEADER_PATH]}`;\n  span.addTags({\n    [HTTP_METHOD]: headers[HTTP2_HEADER_METHOD],\n    [HTTP_URL]: url.split('?')[0],\n    [SPAN_KIND]: SERVER,\n    [SPAN_TYPE]: WEB\n  });\n}\n\nfunction addRequestHeaders(stream, headers) {\n  if (!headers) return;\n  const span = stream._datadog.span;\n\n  stream._datadog.config.headers.forEach(key => {\n    const reqHeader = headers[key];\n\n    if (reqHeader) {\n      span.setTag(`${HTTP_REQUEST_HEADERS}.${key}`, reqHeader);\n    }\n  });\n}\n\nfunction addResponseTags(stream) {\n  const span = stream._datadog.span;\n  const headers = stream.sentHeaders;\n  const statusCode = headers[HTTP2_HEADER_STATUS];\n  span.addTags({\n    [HTTP_STATUS_CODE]: statusCode | 0 || HTTP_STATUS_OK\n  });\n  web.addStatusError(stream, statusCode);\n}\n\nfunction addResponseHeaders(stream) {\n  if (!stream.sentHeaders) return;\n  const span = stream._datadog.span;\n\n  stream._datadog.config.headers.forEach(key => {\n    const resHeader = stream.sentHeaders && stream.sentHeaders[key];\n\n    if (resHeader) {\n      span.setTag(`${HTTP_RESPONSE_HEADERS}.${key}`, resHeader);\n    }\n  });\n}\n\nfunction addResourceTags(stream, headers) {\n  const span = stream._datadog.span;\n\n  const tags = span.context()._tags;\n\n  const method = headers[HTTP2_HEADER_METHOD];\n  if (tags[RESOURCE_NAME]) return;\n  const resource = [method].concat(tags[HTTP_ROUTE]).filter(val => val).join(' ');\n  span.setTag(RESOURCE_NAME, resource);\n}\n\nmodule.exports = [{\n  name: 'http2',\n\n  patch(http2, tracer, config) {\n    if (config.server === false) return;\n    this.wrap(http2, 'createServer', createWrapCreateServer(tracer, config));\n    this.wrap(http2, 'createSecureServer', createWrapCreateServer(tracer, config));\n  },\n\n  unpatch(http2) {\n    this.unwrap(http2, 'createServer');\n    this.unwrap(http2, 'createSecureServer');\n  }\n\n}];\nmodule.exports = []; // temporarily disable HTTP2 server plugin","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-http2/src/server.js"],"names":["web","require","shimmer","analyticsSampler","tags","types","kinds","WEB","SERVER","RESOURCE_NAME","SERVICE_NAME","SPAN_TYPE","SPAN_KIND","HTTP_METHOD","HTTP_URL","HTTP_STATUS_CODE","HTTP_ROUTE","HTTP_REQUEST_HEADERS","HTTP_RESPONSE_HEADERS","HTTP_STATUS_OK","HTTP2_HEADER_AUTHORITY","HTTP2_HEADER_SCHEME","HTTP2_HEADER_METHOD","HTTP2_HEADER_PATH","HTTP2_HEADER_STATUS","createWrapEmit","tracer","config","wrapEmit","emit","emitWithTrace","event","arg1","arg2","stream","headers","instrumentStream","apply","arguments","req","res","instrument","createWrapCreateServer","normalizeConfig","wrapCreateServer","createServer","createServerWithTrace","args","server","wrap","name","callback","patch","span","startStreamSpan","filter","context","_traceFlags","sampled","service","setTag","sample","measured","wrapStreamEnd","addRequestTags","addRequestHeaders","addResourceTags","scope","activate","_datadog","startChildSpan","wrapEnd","end","endWithTrace","returnValue","finishStream","finished","addResponseTags","addResponseHeaders","finish","url","addTags","split","forEach","key","reqHeader","sentHeaders","statusCode","addStatusError","resHeader","_tags","method","resource","concat","val","join","module","exports","http2","unpatch","unwrap"],"mappings":"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","sourcesContent":["'use strict'\n\nconst web = require('../../dd-trace/src/plugins/util/web')\nconst shimmer = require('../../datadog-shimmer')\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\nconst tags = require('../../../ext/tags')\nconst types = require('../../../ext/types')\nconst kinds = require('../../../ext/kinds')\n\nconst WEB = types.WEB\nconst SERVER = kinds.SERVER\nconst RESOURCE_NAME = tags.RESOURCE_NAME\nconst SERVICE_NAME = tags.SERVICE_NAME\nconst SPAN_TYPE = tags.SPAN_TYPE\nconst SPAN_KIND = tags.SPAN_KIND\nconst HTTP_METHOD = tags.HTTP_METHOD\nconst HTTP_URL = tags.HTTP_URL\nconst HTTP_STATUS_CODE = tags.HTTP_STATUS_CODE\nconst HTTP_ROUTE = tags.HTTP_ROUTE\nconst HTTP_REQUEST_HEADERS = tags.HTTP_REQUEST_HEADERS\nconst HTTP_RESPONSE_HEADERS = tags.HTTP_RESPONSE_HEADERS\n\nconst HTTP_STATUS_OK = 200\nconst HTTP2_HEADER_AUTHORITY = ':authority'\nconst HTTP2_HEADER_SCHEME = ':scheme'\nconst HTTP2_HEADER_METHOD = ':method'\nconst HTTP2_HEADER_PATH = ':path'\nconst HTTP2_HEADER_STATUS = ':status'\n\nfunction createWrapEmit (tracer, config) {\n  return function wrapEmit (emit) {\n    return function emitWithTrace (event, arg1, arg2) {\n      if (event === 'stream') {\n        const stream = arg1\n        const headers = arg2\n        return instrumentStream(tracer, config, stream, headers, 'http.request', () => {\n          return emit.apply(this, arguments)\n        })\n      } else if (event === 'request') {\n        const req = arg1\n        const res = arg2\n        return web.instrument(tracer, config, req, res, 'http.request', () => {\n          return emit.apply(this, arguments)\n        })\n      } else {\n        return emit.apply(this, arguments)\n      }\n    }\n  }\n}\n\nfunction createWrapCreateServer (tracer, config) {\n  config = web.normalizeConfig(config)\n\n  return function wrapCreateServer (createServer) {\n    return function createServerWithTrace (args) {\n      const server = createServer.apply(this, arguments)\n\n      shimmer.wrap(server, 'emit', createWrapEmit(tracer, config))\n\n      return server\n    }\n  }\n}\n\nfunction instrumentStream (tracer, config, stream, headers, name, callback) {\n  if (!stream) return callback()\n\n  headers = headers || {}\n\n  web.patch(stream)\n\n  const span = startStreamSpan(tracer, config, stream, headers, name)\n\n  // TODO: replace this with a REFERENCE_NOOP after we split http/express/etc\n  if (!config.filter(headers[HTTP2_HEADER_PATH])) {\n    span.context()._traceFlags.sampled = false\n  }\n\n  if (config.service) {\n    span.setTag(SERVICE_NAME, config.service)\n  }\n\n  analyticsSampler.sample(span, config.measured, true)\n\n  wrapStreamEnd(stream)\n\n  addRequestTags(stream, headers)\n  addRequestHeaders(stream, headers)\n  addResourceTags(stream, headers)\n\n  return callback && tracer.scope().activate(span, () => callback(span))\n}\n\nfunction startStreamSpan (tracer, config, stream, headers, name) {\n  stream._datadog.config = config\n\n  if (stream._datadog.span) {\n    return stream._datadog.span\n  }\n\n  const span = web.startChildSpan(tracer, name, headers)\n\n  stream._datadog.tracer = tracer\n  stream._datadog.span = span\n\n  return span\n}\n\nfunction wrapStreamEnd (stream) {\n  function wrapEnd (end) {\n    return function endWithTrace () {\n      const returnValue = end.apply(this, arguments)\n\n      finishStream(stream)\n      return returnValue\n    }\n  }\n\n  shimmer.wrap(stream, 'end', wrapEnd)\n}\n\nfunction finishStream (stream) {\n  if (stream._datadog.finished) return\n\n  addResponseTags(stream)\n  addResponseHeaders(stream)\n\n  stream._datadog.span.finish()\n  stream._datadog.finished = true\n}\n\nfunction addRequestTags (stream, headers) {\n  const span = stream._datadog.span\n  const url = `${headers[HTTP2_HEADER_SCHEME]}://${headers[HTTP2_HEADER_AUTHORITY]}${headers[HTTP2_HEADER_PATH]}`\n\n  span.addTags({\n    [HTTP_METHOD]: headers[HTTP2_HEADER_METHOD],\n    [HTTP_URL]: url.split('?')[0],\n    [SPAN_KIND]: SERVER,\n    [SPAN_TYPE]: WEB\n  })\n}\n\nfunction addRequestHeaders (stream, headers) {\n  if (!headers) return\n\n  const span = stream._datadog.span\n\n  stream._datadog.config.headers.forEach(key => {\n    const reqHeader = headers[key]\n\n    if (reqHeader) {\n      span.setTag(`${HTTP_REQUEST_HEADERS}.${key}`, reqHeader)\n    }\n  })\n}\n\nfunction addResponseTags (stream) {\n  const span = stream._datadog.span\n  const headers = stream.sentHeaders\n  const statusCode = headers[HTTP2_HEADER_STATUS]\n\n  span.addTags({\n    [HTTP_STATUS_CODE]: statusCode | 0 || HTTP_STATUS_OK\n  })\n\n  web.addStatusError(stream, statusCode)\n}\n\nfunction addResponseHeaders (stream) {\n  if (!stream.sentHeaders) return\n\n  const span = stream._datadog.span\n\n  stream._datadog.config.headers.forEach(key => {\n    const resHeader = stream.sentHeaders && stream.sentHeaders[key]\n\n    if (resHeader) {\n      span.setTag(`${HTTP_RESPONSE_HEADERS}.${key}`, resHeader)\n    }\n  })\n}\n\nfunction addResourceTags (stream, headers) {\n  const span = stream._datadog.span\n  const tags = span.context()._tags\n  const method = headers[HTTP2_HEADER_METHOD]\n\n  if (tags[RESOURCE_NAME]) return\n\n  const resource = [method]\n    .concat(tags[HTTP_ROUTE])\n    .filter(val => val)\n    .join(' ')\n\n  span.setTag(RESOURCE_NAME, resource)\n}\n\nmodule.exports = [\n  {\n    name: 'http2',\n    patch (http2, tracer, config) {\n      if (config.server === false) return\n\n      this.wrap(http2, 'createServer', createWrapCreateServer(tracer, config))\n      this.wrap(http2, 'createSecureServer', createWrapCreateServer(tracer, config))\n    },\n    unpatch (http2) {\n      this.unwrap(http2, 'createServer')\n      this.unwrap(http2, 'createSecureServer')\n    }\n  }\n]\n\nmodule.exports = [] // temporarily disable HTTP2 server plugin\n"]},"metadata":{},"sourceType":"script"}