{"ast":null,"code":"/* eslint-disable */\n// file mostly untouched from apollo-graphql\n\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst visitor_1 = require(\"graphql/language/visitor\");\n\nconst printer_1 = require(\"graphql/language/printer\");\n\nconst utilities_1 = require(\"graphql/utilities\");\n\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\n\nfunction hideLiterals(ast) {\n  return visitor_1.visit(ast, {\n    IntValue(node) {\n      return Object.assign({}, node, {\n        value: \"0\"\n      });\n    },\n\n    FloatValue(node) {\n      return Object.assign({}, node, {\n        value: \"0\"\n      });\n    },\n\n    StringValue(node) {\n      return Object.assign({}, node, {\n        value: \"\",\n        block: false\n      });\n    },\n\n    ListValue(node) {\n      return Object.assign({}, node, {\n        values: []\n      });\n    },\n\n    ObjectValue(node) {\n      return Object.assign({}, node, {\n        fields: []\n      });\n    }\n\n  });\n}\n\nexports.hideLiterals = hideLiterals;\n\nfunction hideStringAndNumericLiterals(ast) {\n  return visitor_1.visit(ast, {\n    IntValue(node) {\n      return Object.assign({}, node, {\n        value: \"0\"\n      });\n    },\n\n    FloatValue(node) {\n      return Object.assign({}, node, {\n        value: \"0\"\n      });\n    },\n\n    StringValue(node) {\n      return Object.assign({}, node, {\n        value: \"\",\n        block: false\n      });\n    }\n\n  });\n}\n\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\n\nfunction dropUnusedDefinitions(ast, operationName) {\n  const separated = utilities_1.separateOperations(ast)[operationName];\n\n  if (!separated) {\n    return ast;\n  }\n\n  return separated;\n}\n\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\n\nfunction sorted(items) {\n  if (items) {\n    return lodash_sortby_1.default.apply(null, arguments);\n  }\n\n  return undefined;\n}\n\nfunction sortAST(ast) {\n  return visitor_1.visit(ast, {\n    OperationDefinition(node) {\n      return Object.assign({}, node, {\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n\n    SelectionSet(node) {\n      return Object.assign({}, node, {\n        selections: lodash_sortby_1.default(node.selections, \"kind\", \"name.value\")\n      });\n    },\n\n    Field(node) {\n      return Object.assign({}, node, {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    },\n\n    FragmentSpread(node) {\n      return Object.assign({}, node, {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n\n    InlineFragment(node) {\n      return Object.assign({}, node, {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n\n    FragmentDefinition(node) {\n      return Object.assign({}, node, {\n        directives: sorted(node.directives, \"name.value\"),\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n\n    Directive(node) {\n      return Object.assign({}, node, {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    }\n\n  });\n}\n\nexports.sortAST = sortAST;\n\nfunction removeAliases(ast) {\n  return visitor_1.visit(ast, {\n    Field(node) {\n      return Object.assign({}, node, {\n        alias: undefined\n      });\n    }\n\n  });\n}\n\nexports.removeAliases = removeAliases;\n\nfunction printWithReducedWhitespace(ast) {\n  const sanitizedAST = visitor_1.visit(ast, {\n    StringValue(node) {\n      return Object.assign({}, node, {\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false\n      });\n    }\n\n  });\n  const withWhitespace = printer_1.print(sanitizedAST);\n  const minimizedButStillHex = withWhitespace.replace(/\\s+/g, \" \").replace(/([^_a-zA-Z0-9]) /g, (_, c) => c).replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\n\nexports.printWithReducedWhitespace = printWithReducedWhitespace;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-graphql/src/tools/transforms.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","visitor_1","require","printer_1","utilities_1","lodash_sortby_1","hideLiterals","ast","visit","IntValue","node","assign","FloatValue","StringValue","block","ListValue","values","ObjectValue","fields","hideStringAndNumericLiterals","dropUnusedDefinitions","operationName","separated","separateOperations","sorted","items","default","apply","arguments","undefined","sortAST","OperationDefinition","variableDefinitions","SelectionSet","selections","Field","FragmentSpread","directives","InlineFragment","FragmentDefinition","Directive","removeAliases","alias","printWithReducedWhitespace","sanitizedAST","Buffer","from","toString","withWhitespace","print","minimizedButStillHex","replace","_","c","hex","JSON","stringify"],"mappings":"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","sourcesContent":["/* eslint-disable */\n// file mostly untouched from apollo-graphql\n\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"graphql/language/visitor\");\nconst printer_1 = require(\"graphql/language/printer\");\nconst utilities_1 = require(\"graphql/utilities\");\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\nfunction hideLiterals(ast) {\n    return visitor_1.visit(ast, {\n        IntValue(node) {\n            return Object.assign({}, node, { value: \"0\" });\n        },\n        FloatValue(node) {\n            return Object.assign({}, node, { value: \"0\" });\n        },\n        StringValue(node) {\n            return Object.assign({}, node, { value: \"\", block: false });\n        },\n        ListValue(node) {\n            return Object.assign({}, node, { values: [] });\n        },\n        ObjectValue(node) {\n            return Object.assign({}, node, { fields: [] });\n        }\n    });\n}\nexports.hideLiterals = hideLiterals;\nfunction hideStringAndNumericLiterals(ast) {\n    return visitor_1.visit(ast, {\n        IntValue(node) {\n            return Object.assign({}, node, { value: \"0\" });\n        },\n        FloatValue(node) {\n            return Object.assign({}, node, { value: \"0\" });\n        },\n        StringValue(node) {\n            return Object.assign({}, node, { value: \"\", block: false });\n        }\n    });\n}\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\nfunction dropUnusedDefinitions(ast, operationName) {\n    const separated = utilities_1.separateOperations(ast)[operationName];\n    if (!separated) {\n        return ast;\n    }\n    return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\nfunction sorted(items) {\n    if (items) {\n        return lodash_sortby_1.default.apply(null, arguments);\n    }\n    return undefined;\n}\nfunction sortAST(ast) {\n    return visitor_1.visit(ast, {\n        OperationDefinition(node) {\n            return Object.assign({}, node, { variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\") });\n        },\n        SelectionSet(node) {\n            return Object.assign({}, node, { selections: lodash_sortby_1.default(node.selections, \"kind\", \"name.value\") });\n        },\n        Field(node) {\n            return Object.assign({}, node, { arguments: sorted(node.arguments, \"name.value\") });\n        },\n        FragmentSpread(node) {\n            return Object.assign({}, node, { directives: sorted(node.directives, \"name.value\") });\n        },\n        InlineFragment(node) {\n            return Object.assign({}, node, { directives: sorted(node.directives, \"name.value\") });\n        },\n        FragmentDefinition(node) {\n            return Object.assign({}, node, { directives: sorted(node.directives, \"name.value\"), variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\") });\n        },\n        Directive(node) {\n            return Object.assign({}, node, { arguments: sorted(node.arguments, \"name.value\") });\n        }\n    });\n}\nexports.sortAST = sortAST;\nfunction removeAliases(ast) {\n    return visitor_1.visit(ast, {\n        Field(node) {\n            return Object.assign({}, node, { alias: undefined });\n        }\n    });\n}\nexports.removeAliases = removeAliases;\nfunction printWithReducedWhitespace(ast) {\n    const sanitizedAST = visitor_1.visit(ast, {\n        StringValue(node) {\n            return Object.assign({}, node, { value: Buffer.from(node.value, \"utf8\").toString(\"hex\"), block: false });\n        }\n    });\n    const withWhitespace = printer_1.print(sanitizedAST);\n    const minimizedButStillHex = withWhitespace\n        .replace(/\\s+/g, \" \")\n        .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n        .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n    return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;\n"]},"metadata":{},"sourceType":"script"}