{"ast":null,"code":"'use strict';\n\nconst log = require('../../../dd-trace/src/log');\n\nclass Sqs {\n  isEnabled(config, request) {\n    switch (request.operation) {\n      case 'receiveMessage':\n        return config.consumer !== false;\n\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        return config.producer !== false;\n\n      default:\n        return true;\n    }\n  }\n\n  generateTags(params, operation, response) {\n    const tags = {};\n    if (!params || !params.QueueName && !params.QueueUrl) return tags;\n    Object.assign(tags, {\n      'resource.name': `${operation} ${params.QueueName || params.QueueUrl}`,\n      'aws.sqs.queue_name': params.QueueName || params.QueueUrl\n    });\n\n    switch (operation) {\n      case 'receiveMessage':\n        tags['span.type'] = 'worker';\n        tags['span.kind'] = 'consumer';\n        break;\n\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        tags['span.kind'] = 'producer';\n        break;\n    }\n\n    return tags;\n  }\n\n  responseExtract(params, operation, response, tracer) {\n    if (operation === 'receiveMessage') {\n      if ((!params.MaxNumberOfMessages || params.MaxNumberOfMessages === 1) && response && response.Messages && response.Messages[0] && response.Messages[0].MessageAttributes && response.Messages[0].MessageAttributes._datadog && response.Messages[0].MessageAttributes._datadog.StringValue) {\n        const textMap = response.Messages[0].MessageAttributes._datadog.StringValue;\n\n        try {\n          return tracer.extract('text_map', JSON.parse(textMap));\n        } catch (err) {\n          log.error(err);\n          return undefined;\n        }\n      }\n    }\n  }\n\n  requestInject(span, request, tracer) {\n    const operation = request.operation;\n\n    if (operation === 'sendMessage') {\n      if (!request.params) {\n        request.params = {};\n      }\n\n      if (!request.params.MessageAttributes) {\n        request.params.MessageAttributes = {};\n      } else if (Object.keys(request.params.MessageAttributes).length >= 10) {\n        // SQS quota\n        // TODO: add test when the test suite is fixed\n        return;\n      }\n\n      const ddInfo = {};\n      tracer.inject(span, 'text_map', ddInfo);\n      request.params.MessageAttributes._datadog = {\n        DataType: 'String',\n        StringValue: JSON.stringify(ddInfo)\n      };\n    }\n  }\n\n}\n\nmodule.exports = Sqs;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-aws-sdk/src/services/sqs.js"],"names":["log","require","Sqs","isEnabled","config","request","operation","consumer","producer","generateTags","params","response","tags","QueueName","QueueUrl","Object","assign","responseExtract","tracer","MaxNumberOfMessages","Messages","MessageAttributes","_datadog","StringValue","textMap","extract","JSON","parse","err","error","undefined","requestInject","span","keys","length","ddInfo","inject","DataType","stringify","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,2BAAD,CAAnB;;AAEA,MAAMC,GAAN,CAAU;AACRC,EAAAA,SAAS,CAAEC,MAAF,EAAUC,OAAV,EAAmB;AAC1B,YAAQA,OAAO,CAACC,SAAhB;AACE,WAAK,gBAAL;AACE,eAAOF,MAAM,CAACG,QAAP,KAAoB,KAA3B;;AACF,WAAK,aAAL;AACA,WAAK,kBAAL;AACE,eAAOH,MAAM,CAACI,QAAP,KAAoB,KAA3B;;AACF;AACE,eAAO,IAAP;AAPJ;AASD;;AAEDC,EAAAA,YAAY,CAAEC,MAAF,EAAUJ,SAAV,EAAqBK,QAArB,EAA+B;AACzC,UAAMC,IAAI,GAAG,EAAb;AAEA,QAAI,CAACF,MAAD,IAAY,CAACA,MAAM,CAACG,SAAR,IAAqB,CAACH,MAAM,CAACI,QAA7C,EAAwD,OAAOF,IAAP;AAExDG,IAAAA,MAAM,CAACC,MAAP,CAAcJ,IAAd,EAAoB;AAClB,uBAAkB,GAAEN,SAAU,IAAGI,MAAM,CAACG,SAAP,IAAoBH,MAAM,CAACI,QAAS,EADnD;AAElB,4BAAsBJ,MAAM,CAACG,SAAP,IAAoBH,MAAM,CAACI;AAF/B,KAApB;;AAKA,YAAQR,SAAR;AACE,WAAK,gBAAL;AACEM,QAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,QAApB;AACAA,QAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,UAApB;AACA;;AACF,WAAK,aAAL;AACA,WAAK,kBAAL;AACEA,QAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,UAApB;AACA;AARJ;;AAWA,WAAOA,IAAP;AACD;;AAEDK,EAAAA,eAAe,CAAEP,MAAF,EAAUJ,SAAV,EAAqBK,QAArB,EAA+BO,MAA/B,EAAuC;AACpD,QAAIZ,SAAS,KAAK,gBAAlB,EAAoC;AAClC,UACE,CAAC,CAACI,MAAM,CAACS,mBAAR,IAA+BT,MAAM,CAACS,mBAAP,KAA+B,CAA/D,KACAR,QADA,IAEAA,QAAQ,CAACS,QAFT,IAGAT,QAAQ,CAACS,QAAT,CAAkB,CAAlB,CAHA,IAIAT,QAAQ,CAACS,QAAT,CAAkB,CAAlB,EAAqBC,iBAJrB,IAKAV,QAAQ,CAACS,QAAT,CAAkB,CAAlB,EAAqBC,iBAArB,CAAuCC,QALvC,IAMAX,QAAQ,CAACS,QAAT,CAAkB,CAAlB,EAAqBC,iBAArB,CAAuCC,QAAvC,CAAgDC,WAPlD,EAQE;AACA,cAAMC,OAAO,GAAGb,QAAQ,CAACS,QAAT,CAAkB,CAAlB,EAAqBC,iBAArB,CAAuCC,QAAvC,CAAgDC,WAAhE;;AACA,YAAI;AACF,iBAAOL,MAAM,CAACO,OAAP,CAAe,UAAf,EAA2BC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAA3B,CAAP;AACD,SAFD,CAEE,OAAOI,GAAP,EAAY;AACZ5B,UAAAA,GAAG,CAAC6B,KAAJ,CAAUD,GAAV;AACA,iBAAOE,SAAP;AACD;AACF;AACF;AACF;;AAEDC,EAAAA,aAAa,CAAEC,IAAF,EAAQ3B,OAAR,EAAiBa,MAAjB,EAAyB;AACpC,UAAMZ,SAAS,GAAGD,OAAO,CAACC,SAA1B;;AACA,QAAIA,SAAS,KAAK,aAAlB,EAAiC;AAC/B,UAAI,CAACD,OAAO,CAACK,MAAb,EAAqB;AACnBL,QAAAA,OAAO,CAACK,MAAR,GAAiB,EAAjB;AACD;;AACD,UAAI,CAACL,OAAO,CAACK,MAAR,CAAeW,iBAApB,EAAuC;AACrChB,QAAAA,OAAO,CAACK,MAAR,CAAeW,iBAAf,GAAmC,EAAnC;AACD,OAFD,MAEO,IAAIN,MAAM,CAACkB,IAAP,CAAY5B,OAAO,CAACK,MAAR,CAAeW,iBAA3B,EAA8Ca,MAA9C,IAAwD,EAA5D,EAAgE;AAAE;AACvE;AACA;AACD;;AACD,YAAMC,MAAM,GAAG,EAAf;AACAjB,MAAAA,MAAM,CAACkB,MAAP,CAAcJ,IAAd,EAAoB,UAApB,EAAgCG,MAAhC;AACA9B,MAAAA,OAAO,CAACK,MAAR,CAAeW,iBAAf,CAAiCC,QAAjC,GAA4C;AAC1Ce,QAAAA,QAAQ,EAAE,QADgC;AAE1Cd,QAAAA,WAAW,EAAEG,IAAI,CAACY,SAAL,CAAeH,MAAf;AAF6B,OAA5C;AAID;AACF;;AA9EO;;AAiFVI,MAAM,CAACC,OAAP,GAAiBtC,GAAjB","sourcesContent":["'use strict'\n\nconst log = require('../../../dd-trace/src/log')\n\nclass Sqs {\n  isEnabled (config, request) {\n    switch (request.operation) {\n      case 'receiveMessage':\n        return config.consumer !== false\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        return config.producer !== false\n      default:\n        return true\n    }\n  }\n\n  generateTags (params, operation, response) {\n    const tags = {}\n\n    if (!params || (!params.QueueName && !params.QueueUrl)) return tags\n\n    Object.assign(tags, {\n      'resource.name': `${operation} ${params.QueueName || params.QueueUrl}`,\n      'aws.sqs.queue_name': params.QueueName || params.QueueUrl\n    })\n\n    switch (operation) {\n      case 'receiveMessage':\n        tags['span.type'] = 'worker'\n        tags['span.kind'] = 'consumer'\n        break\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        tags['span.kind'] = 'producer'\n        break\n    }\n\n    return tags\n  }\n\n  responseExtract (params, operation, response, tracer) {\n    if (operation === 'receiveMessage') {\n      if (\n        (!params.MaxNumberOfMessages || params.MaxNumberOfMessages === 1) &&\n        response &&\n        response.Messages &&\n        response.Messages[0] &&\n        response.Messages[0].MessageAttributes &&\n        response.Messages[0].MessageAttributes._datadog &&\n        response.Messages[0].MessageAttributes._datadog.StringValue\n      ) {\n        const textMap = response.Messages[0].MessageAttributes._datadog.StringValue\n        try {\n          return tracer.extract('text_map', JSON.parse(textMap))\n        } catch (err) {\n          log.error(err)\n          return undefined\n        }\n      }\n    }\n  }\n\n  requestInject (span, request, tracer) {\n    const operation = request.operation\n    if (operation === 'sendMessage') {\n      if (!request.params) {\n        request.params = {}\n      }\n      if (!request.params.MessageAttributes) {\n        request.params.MessageAttributes = {}\n      } else if (Object.keys(request.params.MessageAttributes).length >= 10) { // SQS quota\n        // TODO: add test when the test suite is fixed\n        return\n      }\n      const ddInfo = {}\n      tracer.inject(span, 'text_map', ddInfo)\n      request.params.MessageAttributes._datadog = {\n        DataType: 'String',\n        StringValue: JSON.stringify(ddInfo)\n      }\n    }\n  }\n}\n\nmodule.exports = Sqs\n"]},"metadata":{},"sourceType":"script"}