{"ast":null,"code":"'use strict';\n\nconst mainLogger = require('./log');\n\nconst os = require('os');\n\nconst {\n  inspect\n} = require('util');\n\nconst tracerVersion = require('../lib/version');\n\nconst requirePackageJson = require('./require-package-json');\n\nconst logger = Object.create(mainLogger);\nlogger._enabled = true;\nlet config;\nlet instrumenter;\nlet samplingRules = [];\nlet alreadyRan = false;\n\nfunction getIntegrationsAndAnalytics() {\n  const integrations = new Set();\n  const extras = {};\n\n  for (const plugin of instrumenter._instrumented.keys()) {\n    if (plugin.versions) {\n      try {\n        const version = requirePackageJson(plugin.name, module).version;\n        integrations.add(`${plugin.name}@${version}`);\n      } catch (e) {\n        integrations.add(plugin.name);\n      }\n    } else {\n      integrations.add(plugin.name);\n    }\n  }\n\n  extras.integrations_loaded = Array.from(integrations);\n  return extras;\n}\n\nfunction startupLog({\n  agentError\n} = {}) {\n  if (!config || !instrumenter) {\n    return;\n  }\n\n  if (alreadyRan) {\n    return;\n  }\n\n  alreadyRan = true;\n\n  if (!config.startupLogs) {\n    return;\n  }\n\n  const url = config.url || `http://${config.hostname || 'localhost'}:${config.port}`;\n  const out = {\n    [inspect.custom]() {\n      return String(this);\n    },\n\n    toString() {\n      return JSON.stringify(this);\n    }\n\n  };\n  out.date = new Date().toISOString();\n  out.os_name = os.type();\n  out.os_version = os.release();\n  out.architecture = os.arch();\n  out.version = tracerVersion;\n  out.lang = 'nodejs';\n  out.lang_version = process.versions.node;\n  out.env = config.env;\n  out.enabled = config.enabled;\n  out.scope_manager = config.scope;\n  out.service = config.service;\n  out.agent_url = url;\n\n  if (agentError) {\n    out.agent_error = agentError.message;\n  }\n\n  out.debug = !!config.debug;\n  out.sample_rate = config.sampleRate;\n  out.sampling_rules = samplingRules;\n  out.tags = config.tags;\n\n  if (config.tags && config.tags.version) {\n    out.dd_version = config.tags.version;\n  }\n\n  out.log_injection_enabled = !!config.logInjection;\n  out.runtime_metrics_enabled = !!config.runtimeMetrics;\n  out.profiling_enabled = !!(config.profiling || {}).enabled;\n  Object.assign(out, getIntegrationsAndAnalytics()); // // This next bunch is for features supported by other tracers, but not this\n  // // one. They may be implemented in the future.\n  // out.enabled_cli\n  // out.sampling_rules_error\n  // out.integration_XXX_analytics_enabled\n  // out.integration_XXX_sample_rate\n  // out.service_mapping\n  // out.service_mapping_error\n\n  logger.info('DATADOG TRACER CONFIGURATION - ' + out);\n\n  if (agentError) {\n    logger.warn('DATADOG TRACER DIAGNOSTIC - Agent Error: ' + agentError.message);\n  }\n\n  config = undefined;\n  instrumenter = undefined;\n  samplingRules = undefined;\n}\n\nfunction setStartupLogConfig(aConfig) {\n  config = aConfig;\n}\n\nfunction setStartupLogInstrumenter(theInstrumenter) {\n  instrumenter = theInstrumenter;\n}\n\nfunction setSamplingRules(theRules) {\n  samplingRules = theRules;\n}\n\nmodule.exports = {\n  startupLog,\n  setStartupLogConfig,\n  setStartupLogInstrumenter,\n  setSamplingRules\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/startup-log.js"],"names":["mainLogger","require","os","inspect","tracerVersion","requirePackageJson","logger","Object","create","_enabled","config","instrumenter","samplingRules","alreadyRan","getIntegrationsAndAnalytics","integrations","Set","extras","plugin","_instrumented","keys","versions","version","name","module","add","e","integrations_loaded","Array","from","startupLog","agentError","startupLogs","url","hostname","port","out","custom","String","toString","JSON","stringify","date","Date","toISOString","os_name","type","os_version","release","architecture","arch","lang","lang_version","process","node","env","enabled","scope_manager","scope","service","agent_url","agent_error","message","debug","sample_rate","sampleRate","sampling_rules","tags","dd_version","log_injection_enabled","logInjection","runtime_metrics_enabled","runtimeMetrics","profiling_enabled","profiling","assign","info","warn","undefined","setStartupLogConfig","aConfig","setStartupLogInstrumenter","theInstrumenter","setSamplingRules","theRules","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mainLogger = require('./log')\n\nconst os = require('os')\nconst { inspect } = require('util')\nconst tracerVersion = require('../lib/version')\nconst requirePackageJson = require('./require-package-json')\n\nconst logger = Object.create(mainLogger)\nlogger._enabled = true\n\nlet config\nlet instrumenter\nlet samplingRules = []\n\nlet alreadyRan = false\n\nfunction getIntegrationsAndAnalytics () {\n  const integrations = new Set()\n  const extras = {}\n  for (const plugin of instrumenter._instrumented.keys()) {\n    if (plugin.versions) {\n      try {\n        const version = requirePackageJson(plugin.name, module).version\n        integrations.add(`${plugin.name}@${version}`)\n      } catch (e) {\n        integrations.add(plugin.name)\n      }\n    } else {\n      integrations.add(plugin.name)\n    }\n  }\n  extras.integrations_loaded = Array.from(integrations)\n  return extras\n}\n\nfunction startupLog ({ agentError } = {}) {\n  if (!config || !instrumenter) {\n    return\n  }\n\n  if (alreadyRan) {\n    return\n  }\n\n  alreadyRan = true\n\n  if (!config.startupLogs) {\n    return\n  }\n\n  const url = config.url || `http://${config.hostname || 'localhost'}:${config.port}`\n\n  const out = {\n    [inspect.custom] () {\n      return String(this)\n    },\n    toString () {\n      return JSON.stringify(this)\n    }\n  }\n\n  out.date = new Date().toISOString()\n  out.os_name = os.type()\n  out.os_version = os.release()\n  out.architecture = os.arch()\n  out.version = tracerVersion\n  out.lang = 'nodejs'\n  out.lang_version = process.versions.node\n  out.env = config.env\n  out.enabled = config.enabled\n  out.scope_manager = config.scope\n  out.service = config.service\n  out.agent_url = url\n  if (agentError) {\n    out.agent_error = agentError.message\n  }\n  out.debug = !!config.debug\n  out.sample_rate = config.sampleRate\n  out.sampling_rules = samplingRules\n  out.tags = config.tags\n  if (config.tags && config.tags.version) {\n    out.dd_version = config.tags.version\n  }\n\n  out.log_injection_enabled = !!config.logInjection\n  out.runtime_metrics_enabled = !!config.runtimeMetrics\n  out.profiling_enabled = !!(config.profiling || {}).enabled\n  Object.assign(out, getIntegrationsAndAnalytics())\n\n  // // This next bunch is for features supported by other tracers, but not this\n  // // one. They may be implemented in the future.\n\n  // out.enabled_cli\n  // out.sampling_rules_error\n  // out.integration_XXX_analytics_enabled\n  // out.integration_XXX_sample_rate\n  // out.service_mapping\n  // out.service_mapping_error\n\n  logger.info('DATADOG TRACER CONFIGURATION - ' + out)\n  if (agentError) {\n    logger.warn('DATADOG TRACER DIAGNOSTIC - Agent Error: ' + agentError.message)\n  }\n\n  config = undefined\n  instrumenter = undefined\n  samplingRules = undefined\n}\n\nfunction setStartupLogConfig (aConfig) {\n  config = aConfig\n}\n\nfunction setStartupLogInstrumenter (theInstrumenter) {\n  instrumenter = theInstrumenter\n}\n\nfunction setSamplingRules (theRules) {\n  samplingRules = theRules\n}\n\nmodule.exports = {\n  startupLog,\n  setStartupLogConfig,\n  setStartupLogInstrumenter,\n  setSamplingRules\n}\n"]},"metadata":{},"sourceType":"script"}