{"ast":null,"code":"'use strict';\n\nconst request = require('./request');\n\nconst {\n  startupLog\n} = require('../../startup-log');\n\nconst metrics = require('../../metrics');\n\nconst log = require('../../log');\n\nconst tracerVersion = require('../../../lib/version');\n\nconst METRIC_PREFIX = 'datadog.tracer.node.exporter.agent';\n\nclass Writer {\n  constructor({\n    url,\n    prioritySampler,\n    lookup,\n    protocolVersion\n  }) {\n    const AgentEncoder = getEncoder(protocolVersion);\n    this._url = url;\n    this._prioritySampler = prioritySampler;\n    this._lookup = lookup;\n    this._protocolVersion = protocolVersion;\n    this._encoderForVersion = new AgentEncoder(this);\n  }\n\n  append(spans) {\n    log.debug(() => `Encoding trace: ${JSON.stringify(spans)}`);\n\n    this._encode(spans);\n  }\n\n  _sendPayload(data, count, done) {\n    metrics.increment(`${METRIC_PREFIX}.requests`, true);\n    makeRequest(this._protocolVersion, data, count, this._url, this._lookup, true, (err, res, status) => {\n      if (status) {\n        metrics.increment(`${METRIC_PREFIX}.responses`, true);\n        metrics.increment(`${METRIC_PREFIX}.responses.by.status`, `status:${status}`, true);\n      } else if (err) {\n        metrics.increment(`${METRIC_PREFIX}.errors`, true);\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${err.name}`, true);\n\n        if (err.code) {\n          metrics.increment(`${METRIC_PREFIX}.errors.by.code`, `code:${err.code}`, true);\n        }\n      }\n\n      startupLog({\n        agentError: err\n      });\n\n      if (err) {\n        log.error(err);\n        done();\n        return;\n      }\n\n      log.debug(`Response from the agent: ${res}`);\n\n      try {\n        this._prioritySampler.update(JSON.parse(res).rate_by_service);\n      } catch (e) {\n        log.error(e);\n        metrics.increment(`${METRIC_PREFIX}.errors`, true);\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${e.name}`, true);\n      }\n\n      done();\n    });\n  }\n\n  setUrl(url) {\n    this._url = url;\n  }\n\n  _encode(trace) {\n    this._encoderForVersion.encode(trace);\n  }\n\n  flush(done = () => {}) {\n    const count = this._encoderForVersion.count();\n\n    if (count > 0) {\n      const payload = this._encoderForVersion.makePayload();\n\n      this._sendPayload(payload, count, done);\n    } else {\n      done();\n    }\n  }\n\n}\n\nfunction setHeader(headers, key, value) {\n  if (value) {\n    headers[key] = value;\n  }\n}\n\nfunction getEncoder(protocolVersion) {\n  if (protocolVersion === '0.5') {\n    return require('../../encode/0.5').AgentEncoder;\n  } else {\n    return require('../../encode/0.4').AgentEncoder;\n  }\n}\n\nfunction makeRequest(version, data, count, url, lookup, needsStartupLog, cb) {\n  const options = {\n    path: `/v${version}/traces`,\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/msgpack',\n      'Datadog-Meta-Tracer-Version': tracerVersion,\n      'X-Datadog-Trace-Count': String(count)\n    },\n    lookup\n  };\n  setHeader(options.headers, 'Datadog-Meta-Lang', 'nodejs');\n  setHeader(options.headers, 'Datadog-Meta-Lang-Version', process.version);\n  setHeader(options.headers, 'Datadog-Meta-Lang-Interpreter', process.jsEngine || 'v8');\n\n  if (url.protocol === 'unix:') {\n    options.socketPath = url.pathname;\n  } else {\n    options.protocol = url.protocol;\n    options.hostname = url.hostname;\n    options.port = url.port;\n  }\n\n  log.debug(() => `Request to the agent: ${JSON.stringify(options)}`);\n  request(Object.assign({\n    data\n  }, options), (err, res, status) => {\n    if (needsStartupLog) {\n      // Note that logging will only happen once, regardless of how many times this is called.\n      startupLog({\n        agentError: status !== 404 && status !== 200 ? err : undefined\n      });\n    }\n\n    cb(err, res, status);\n  });\n}\n\nmodule.exports = Writer;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/exporters/agent/writer.js"],"names":["request","require","startupLog","metrics","log","tracerVersion","METRIC_PREFIX","Writer","constructor","url","prioritySampler","lookup","protocolVersion","AgentEncoder","getEncoder","_url","_prioritySampler","_lookup","_protocolVersion","_encoderForVersion","append","spans","debug","JSON","stringify","_encode","_sendPayload","data","count","done","increment","makeRequest","err","res","status","name","code","agentError","error","update","parse","rate_by_service","e","setUrl","trace","encode","flush","payload","makePayload","setHeader","headers","key","value","version","needsStartupLog","cb","options","path","method","String","process","jsEngine","protocol","socketPath","pathname","hostname","port","Object","assign","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst request = require('./request')\nconst { startupLog } = require('../../startup-log')\nconst metrics = require('../../metrics')\nconst log = require('../../log')\nconst tracerVersion = require('../../../lib/version')\n\nconst METRIC_PREFIX = 'datadog.tracer.node.exporter.agent'\n\nclass Writer {\n  constructor ({ url, prioritySampler, lookup, protocolVersion }) {\n    const AgentEncoder = getEncoder(protocolVersion)\n\n    this._url = url\n    this._prioritySampler = prioritySampler\n    this._lookup = lookup\n    this._protocolVersion = protocolVersion\n    this._encoderForVersion = new AgentEncoder(this)\n  }\n\n  append (spans) {\n    log.debug(() => `Encoding trace: ${JSON.stringify(spans)}`)\n\n    this._encode(spans)\n  }\n\n  _sendPayload (data, count, done) {\n    metrics.increment(`${METRIC_PREFIX}.requests`, true)\n\n    makeRequest(this._protocolVersion, data, count, this._url, this._lookup, true, (err, res, status) => {\n      if (status) {\n        metrics.increment(`${METRIC_PREFIX}.responses`, true)\n        metrics.increment(`${METRIC_PREFIX}.responses.by.status`, `status:${status}`, true)\n      } else if (err) {\n        metrics.increment(`${METRIC_PREFIX}.errors`, true)\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${err.name}`, true)\n\n        if (err.code) {\n          metrics.increment(`${METRIC_PREFIX}.errors.by.code`, `code:${err.code}`, true)\n        }\n      }\n\n      startupLog({ agentError: err })\n\n      if (err) {\n        log.error(err)\n        done()\n        return\n      }\n\n      log.debug(`Response from the agent: ${res}`)\n\n      try {\n        this._prioritySampler.update(JSON.parse(res).rate_by_service)\n      } catch (e) {\n        log.error(e)\n\n        metrics.increment(`${METRIC_PREFIX}.errors`, true)\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${e.name}`, true)\n      }\n      done()\n    })\n  }\n\n  setUrl (url) {\n    this._url = url\n  }\n\n  _encode (trace) {\n    this._encoderForVersion.encode(trace)\n  }\n\n  flush (done = () => {}) {\n    const count = this._encoderForVersion.count()\n\n    if (count > 0) {\n      const payload = this._encoderForVersion.makePayload()\n\n      this._sendPayload(payload, count, done)\n    } else {\n      done()\n    }\n  }\n}\n\nfunction setHeader (headers, key, value) {\n  if (value) {\n    headers[key] = value\n  }\n}\n\nfunction getEncoder (protocolVersion) {\n  if (protocolVersion === '0.5') {\n    return require('../../encode/0.5').AgentEncoder\n  } else {\n    return require('../../encode/0.4').AgentEncoder\n  }\n}\n\nfunction makeRequest (version, data, count, url, lookup, needsStartupLog, cb) {\n  const options = {\n    path: `/v${version}/traces`,\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/msgpack',\n      'Datadog-Meta-Tracer-Version': tracerVersion,\n      'X-Datadog-Trace-Count': String(count)\n    },\n    lookup\n  }\n\n  setHeader(options.headers, 'Datadog-Meta-Lang', 'nodejs')\n  setHeader(options.headers, 'Datadog-Meta-Lang-Version', process.version)\n  setHeader(options.headers, 'Datadog-Meta-Lang-Interpreter', process.jsEngine || 'v8')\n\n  if (url.protocol === 'unix:') {\n    options.socketPath = url.pathname\n  } else {\n    options.protocol = url.protocol\n    options.hostname = url.hostname\n    options.port = url.port\n  }\n\n  log.debug(() => `Request to the agent: ${JSON.stringify(options)}`)\n\n  request(Object.assign({ data }, options), (err, res, status) => {\n    if (needsStartupLog) {\n      // Note that logging will only happen once, regardless of how many times this is called.\n      startupLog({\n        agentError: status !== 404 && status !== 200 ? err : undefined\n      })\n    }\n    cb(err, res, status)\n  })\n}\n\nmodule.exports = Writer\n"]},"metadata":{},"sourceType":"script"}