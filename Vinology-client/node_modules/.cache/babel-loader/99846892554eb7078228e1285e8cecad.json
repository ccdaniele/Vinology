{"ast":null,"code":"'use strict';\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nconst Tags = require('../../../ext/tags');\n\nconst {\n  TEXT_MAP\n} = require('../../../ext/formats');\n\nconst {\n  ERROR\n} = require('../../../ext/tags');\n\nconst kinds = require('./kinds');\n\nconst {\n  addMethodTags,\n  addMetadataTags,\n  getFilter\n} = require('./util'); // https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n\n\nconst OK = 0;\nconst CANCELLED = 1;\n\nfunction createWrapHandler(tracer, config, handler) {\n  const filter = getFilter(config, 'metadata');\n  return function wrapHandler(func) {\n    const isValid = (server, args) => {\n      if (!server || !server.type) return false;\n      if (!args[0]) return false;\n      if (server.type !== 'unary' && !isEmitter(args[0])) return false;\n      if (server.type === 'unary' && typeof args[1] !== 'function') return false;\n      return true;\n    };\n\n    return function funcWithTrace(call, callback) {\n      if (!isValid(this, arguments)) return func.apply(this, arguments);\n      const metadata = call.metadata;\n      const type = this.type;\n      const isStream = type !== 'unary';\n      const scope = tracer.scope();\n      const childOf = extract(tracer, metadata);\n      const span = tracer.startSpan('grpc.request', {\n        childOf,\n        tags: {\n          [Tags.SPAN_KIND]: 'server',\n          'span.type': 'web',\n          'resource.name': handler,\n          'service.name': config.service || `${tracer._service}`,\n          'component': 'grpc'\n        }\n      });\n      analyticsSampler.sample(span, config.measured, true);\n      addMethodTags(span, handler, kinds[type]);\n      addMetadataTags(span, metadata, filter, 'request');\n      scope.bind(call); // Finish the span if the call was cancelled.\n\n      call.once('cancelled', () => {\n        span.setTag('grpc.status.code', CANCELLED);\n        span.finish();\n      });\n\n      if (isStream) {\n        wrapStream(span, call);\n      } else {\n        arguments[1] = wrapCallback(span, callback, filter, childOf);\n      }\n\n      return scope.bind(func, span).apply(this, arguments);\n    };\n  };\n}\n\nfunction createWrapRegister(tracer, config) {\n  config = config.server || config;\n  return function wrapRegister(register) {\n    return function registerWithTrace(name, handler, serialize, deserialize, type) {\n      if (typeof handler === 'function') {\n        arguments[1] = createWrapHandler(tracer, config, name)(handler);\n      }\n\n      return register.apply(this, arguments);\n    };\n  };\n}\n\nfunction wrapStream(span, call, tracer) {\n  const emit = call.emit;\n\n  if (call.call && call.call.sendStatus) {\n    call.call.sendStatus = wrapSendStatus(call.call.sendStatus, span);\n  }\n\n  call.emit = function (eventName, ...args) {\n    switch (eventName) {\n      case 'error':\n        span.addTags({\n          [ERROR]: args[0] || 1,\n          'grpc.status.code': args[0] && args[0].code\n        });\n        span.finish();\n        break;\n      // Finish the span of the response only if it was successful.\n      // Otherwise it'll be finished in the `error` listener.\n\n      case 'finish':\n        if (call.status) {\n          span.setTag('grpc.status.code', call.status.code);\n        }\n\n        if (!call.status || call.status.code === 0) {\n          span.finish();\n        }\n\n        break;\n    }\n\n    return emit.apply(this, arguments);\n  };\n}\n\nfunction wrapCallback(span, callback, filter, childOf) {\n  const scope = span.tracer().scope();\n  return function (err, value, trailer, flags) {\n    if (err instanceof Error) {\n      if (err.code) {\n        span.setTag('grpc.status.code', err.code);\n      }\n\n      span.setTag(ERROR, err);\n    } else {\n      span.setTag('grpc.status.code', OK);\n    }\n\n    if (trailer && filter) {\n      addMetadataTags(span, trailer, filter, 'response');\n    }\n\n    span.finish();\n\n    if (callback) {\n      return scope.bind(callback, childOf).apply(this, arguments);\n    }\n  };\n}\n\nfunction wrapSendStatus(sendStatus, span) {\n  return function sendStatusWithTrace(status) {\n    span.setTag('grpc.status.code', status.code);\n    return sendStatus.apply(this, arguments);\n  };\n}\n\nfunction extract(tracer, metadata) {\n  if (!metadata || typeof metadata.getMap !== 'function') return null;\n  return tracer.extract(TEXT_MAP, metadata.getMap());\n}\n\nfunction isEmitter(obj) {\n  return typeof obj.emit === 'function' && typeof obj.once === 'function';\n}\n\nmodule.exports = [{\n  name: 'grpc',\n  versions: ['>=1.20.2'],\n  file: 'src/server.js',\n\n  patch(server, tracer, config) {\n    if (config.server === false) return;\n    this.wrap(server.Server.prototype, 'register', createWrapRegister(tracer, config));\n  },\n\n  unpatch(server) {\n    this.unwrap(server.Server.prototype, 'register');\n  }\n\n}, {\n  name: '@grpc/grpc-js',\n  versions: ['>=1'],\n  file: 'build/src/server.js',\n\n  patch(server, tracer, config) {\n    if (config.server === false) return;\n    this.wrap(server.Server.prototype, 'register', createWrapRegister(tracer, config));\n  },\n\n  unpatch(server) {\n    this.unwrap(server.Server.prototype, 'register');\n  }\n\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-grpc/src/server.js"],"names":["analyticsSampler","require","Tags","TEXT_MAP","ERROR","kinds","addMethodTags","addMetadataTags","getFilter","OK","CANCELLED","createWrapHandler","tracer","config","handler","filter","wrapHandler","func","isValid","server","args","type","isEmitter","funcWithTrace","call","callback","arguments","apply","metadata","isStream","scope","childOf","extract","span","startSpan","tags","SPAN_KIND","service","_service","sample","measured","bind","once","setTag","finish","wrapStream","wrapCallback","createWrapRegister","wrapRegister","register","registerWithTrace","name","serialize","deserialize","emit","sendStatus","wrapSendStatus","eventName","addTags","code","status","err","value","trailer","flags","Error","sendStatusWithTrace","getMap","obj","module","exports","versions","file","patch","wrap","Server","prototype","unpatch","unwrap"],"mappings":"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","sourcesContent":["'use strict'\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\nconst Tags = require('../../../ext/tags')\nconst { TEXT_MAP } = require('../../../ext/formats')\nconst { ERROR } = require('../../../ext/tags')\nconst kinds = require('./kinds')\nconst { addMethodTags, addMetadataTags, getFilter } = require('./util')\n\n// https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\nconst OK = 0\nconst CANCELLED = 1\n\nfunction createWrapHandler (tracer, config, handler) {\n  const filter = getFilter(config, 'metadata')\n\n  return function wrapHandler (func) {\n    const isValid = (server, args) => {\n      if (!server || !server.type) return false\n      if (!args[0]) return false\n      if (server.type !== 'unary' && !isEmitter(args[0])) return false\n      if (server.type === 'unary' && typeof args[1] !== 'function') return false\n\n      return true\n    }\n\n    return function funcWithTrace (call, callback) {\n      if (!isValid(this, arguments)) return func.apply(this, arguments)\n\n      const metadata = call.metadata\n      const type = this.type\n      const isStream = type !== 'unary'\n      const scope = tracer.scope()\n      const childOf = extract(tracer, metadata)\n      const span = tracer.startSpan('grpc.request', {\n        childOf,\n        tags: {\n          [Tags.SPAN_KIND]: 'server',\n          'span.type': 'web',\n          'resource.name': handler,\n          'service.name': config.service || `${tracer._service}`,\n          'component': 'grpc'\n        }\n      })\n\n      analyticsSampler.sample(span, config.measured, true)\n      addMethodTags(span, handler, kinds[type])\n      addMetadataTags(span, metadata, filter, 'request')\n\n      scope.bind(call)\n\n      // Finish the span if the call was cancelled.\n      call.once('cancelled', () => {\n        span.setTag('grpc.status.code', CANCELLED)\n        span.finish()\n      })\n\n      if (isStream) {\n        wrapStream(span, call)\n      } else {\n        arguments[1] = wrapCallback(span, callback, filter, childOf)\n      }\n\n      return scope.bind(func, span).apply(this, arguments)\n    }\n  }\n}\n\nfunction createWrapRegister (tracer, config) {\n  config = config.server || config\n\n  return function wrapRegister (register) {\n    return function registerWithTrace (name, handler, serialize, deserialize, type) {\n      if (typeof handler === 'function') {\n        arguments[1] = createWrapHandler(tracer, config, name)(handler)\n      }\n\n      return register.apply(this, arguments)\n    }\n  }\n}\n\nfunction wrapStream (span, call, tracer) {\n  const emit = call.emit\n\n  if (call.call && call.call.sendStatus) {\n    call.call.sendStatus = wrapSendStatus(call.call.sendStatus, span)\n  }\n\n  call.emit = function (eventName, ...args) {\n    switch (eventName) {\n      case 'error':\n        span.addTags({\n          [ERROR]: args[0] || 1,\n          'grpc.status.code': args[0] && args[0].code\n        })\n\n        span.finish()\n\n        break\n\n      // Finish the span of the response only if it was successful.\n      // Otherwise it'll be finished in the `error` listener.\n      case 'finish':\n        if (call.status) {\n          span.setTag('grpc.status.code', call.status.code)\n        }\n\n        if (!call.status || call.status.code === 0) {\n          span.finish()\n        }\n\n        break\n    }\n\n    return emit.apply(this, arguments)\n  }\n}\n\nfunction wrapCallback (span, callback, filter, childOf) {\n  const scope = span.tracer().scope()\n\n  return function (err, value, trailer, flags) {\n    if (err instanceof Error) {\n      if (err.code) {\n        span.setTag('grpc.status.code', err.code)\n      }\n\n      span.setTag(ERROR, err)\n    } else {\n      span.setTag('grpc.status.code', OK)\n    }\n\n    if (trailer && filter) {\n      addMetadataTags(span, trailer, filter, 'response')\n    }\n\n    span.finish()\n\n    if (callback) {\n      return scope.bind(callback, childOf).apply(this, arguments)\n    }\n  }\n}\n\nfunction wrapSendStatus (sendStatus, span) {\n  return function sendStatusWithTrace (status) {\n    span.setTag('grpc.status.code', status.code)\n\n    return sendStatus.apply(this, arguments)\n  }\n}\n\nfunction extract (tracer, metadata) {\n  if (!metadata || typeof metadata.getMap !== 'function') return null\n\n  return tracer.extract(TEXT_MAP, metadata.getMap())\n}\n\nfunction isEmitter (obj) {\n  return typeof obj.emit === 'function' && typeof obj.once === 'function'\n}\n\nmodule.exports = [\n  {\n    name: 'grpc',\n    versions: ['>=1.20.2'],\n    file: 'src/server.js',\n    patch (server, tracer, config) {\n      if (config.server === false) return\n      this.wrap(server.Server.prototype, 'register', createWrapRegister(tracer, config))\n    },\n    unpatch (server) {\n      this.unwrap(server.Server.prototype, 'register')\n    }\n  },\n  {\n    name: '@grpc/grpc-js',\n    versions: ['>=1'],\n    file: 'build/src/server.js',\n    patch (server, tracer, config) {\n      if (config.server === false) return\n\n      this.wrap(server.Server.prototype, 'register', createWrapRegister(tracer, config))\n    },\n    unpatch (server) {\n      this.unwrap(server.Server.prototype, 'register')\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}