{"ast":null,"code":"'use strict';\n\nconst kebabCase = require('lodash.kebabcase');\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nconst {\n  TEXT_MAP\n} = require('../../../ext/formats');\n\nlet methods = {};\n\nfunction createWrapSendImmediately(tracer, config) {\n  return function wrapSendImmediately(sendImmediately) {\n    return function sendImmediatelyWithTrace(method, fields) {\n      return sendWithTrace(sendImmediately, this, arguments, tracer, config, methods[method], fields);\n    };\n  };\n}\n\nfunction createWrapSendMessage(tracer, config) {\n  return function wrapSendMessage(sendMessage) {\n    return function sendMessageWithTrace(fields) {\n      return sendWithTrace(sendMessage, this, arguments, tracer, config, 'basic.publish', fields);\n    };\n  };\n}\n\nfunction createWrapDispatchMessage(tracer, config) {\n  return function wrapDispatchMessage(dispatchMessage) {\n    return function dispatchMessageWithTrace(fields, message) {\n      const childOf = extract(tracer, message);\n      const span = tracer.startSpan('amqp.command', {\n        childOf\n      });\n      addTags(this, tracer, config, span, 'basic.deliver', fields);\n      analyticsSampler.sample(span, config.measured, true);\n      tracer.scope().activate(span, () => {\n        try {\n          dispatchMessage.apply(this, arguments);\n        } catch (e) {\n          throw addError(span, e);\n        } finally {\n          span.finish();\n        }\n      });\n    };\n  };\n}\n\nfunction sendWithTrace(send, channel, args, tracer, config, method, fields) {\n  const childOf = tracer.scope().active();\n  const span = tracer.startSpan('amqp.command', {\n    childOf\n  });\n  fields.headers = fields.headers || {};\n  addTags(channel, tracer, config, span, method, fields);\n  tracer.inject(span, TEXT_MAP, fields.headers);\n  analyticsSampler.sample(span, config.measured);\n  return tracer.scope().activate(span, () => {\n    try {\n      return send.apply(channel, args);\n    } catch (e) {\n      throw addError(span, e);\n    } finally {\n      span.finish();\n    }\n  });\n}\n\nfunction isCamelCase(str) {\n  return /([A-Z][a-z0-9]+)+/.test(str);\n}\n\nfunction getResourceName(method, fields = {}) {\n  return [method, fields.exchange, fields.routingKey, fields.queue, fields.source, fields.destination].filter(val => val).join(' ');\n}\n\nfunction addError(span, error) {\n  span.addTags({\n    'error.type': error.name,\n    'error.msg': error.message,\n    'error.stack': error.stack\n  });\n  return error;\n}\n\nfunction addTags(channel, tracer, config, span, method, fields) {\n  const fieldNames = ['queue', 'exchange', 'routingKey', 'consumerTag', 'source', 'destination'];\n  span.addTags({\n    'service.name': config.service || `${tracer._service}-amqp`,\n    'resource.name': getResourceName(method, fields)\n  });\n\n  if (channel && channel.connection && channel.connection.stream) {\n    span.addTags({\n      'out.host': channel.connection.stream._host,\n      'out.port': channel.connection.stream.remotePort\n    });\n  }\n\n  switch (method) {\n    case 'basic.publish':\n      span.setTag('span.kind', 'producer');\n      break;\n\n    case 'basic.consume':\n    case 'basic.get':\n    case 'basic.deliver':\n      span.addTags({\n        'span.kind': 'consumer',\n        'span.type': 'worker'\n      });\n      break;\n\n    default:\n      span.setTag('span.kind', 'client');\n  }\n\n  fieldNames.forEach(field => {\n    fields[field] !== undefined && span.setTag(`amqp.${field}`, fields[field]);\n  });\n}\n\nfunction extract(tracer, message) {\n  return message ? tracer.extract(TEXT_MAP, message.properties.headers) : null;\n}\n\nmodule.exports = [{\n  name: 'amqplib',\n  file: 'lib/defs.js',\n  versions: ['>=0.5'],\n\n  patch(defs, tracer, config) {\n    methods = Object.keys(defs).filter(key => Number.isInteger(defs[key])).filter(key => isCamelCase(key)).reduce((acc, key) => Object.assign(acc, {\n      [defs[key]]: kebabCase(key).replace('-', '.')\n    }), {});\n  },\n\n  unpatch(defs) {\n    methods = {};\n  }\n\n}, {\n  name: 'amqplib',\n  file: 'lib/channel.js',\n  versions: ['>=0.5'],\n\n  patch(channel, tracer, config) {\n    this.wrap(channel.Channel.prototype, 'sendImmediately', createWrapSendImmediately(tracer, config));\n    this.wrap(channel.Channel.prototype, 'sendMessage', createWrapSendMessage(tracer, config));\n    this.wrap(channel.BaseChannel.prototype, 'dispatchMessage', createWrapDispatchMessage(tracer, config));\n  },\n\n  unpatch(channel) {\n    this.unwrap(channel.Channel.prototype, 'sendImmediately');\n    this.unwrap(channel.Channel.prototype, 'sendMessage');\n    this.unwrap(channel.BaseChannel.prototype, 'dispatchMessage');\n  }\n\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-amqplib/src/index.js"],"names":["kebabCase","require","analyticsSampler","TEXT_MAP","methods","createWrapSendImmediately","tracer","config","wrapSendImmediately","sendImmediately","sendImmediatelyWithTrace","method","fields","sendWithTrace","arguments","createWrapSendMessage","wrapSendMessage","sendMessage","sendMessageWithTrace","createWrapDispatchMessage","wrapDispatchMessage","dispatchMessage","dispatchMessageWithTrace","message","childOf","extract","span","startSpan","addTags","sample","measured","scope","activate","apply","e","addError","finish","send","channel","args","active","headers","inject","isCamelCase","str","test","getResourceName","exchange","routingKey","queue","source","destination","filter","val","join","error","name","stack","fieldNames","service","_service","connection","stream","_host","remotePort","setTag","forEach","field","undefined","properties","module","exports","file","versions","patch","defs","Object","keys","key","Number","isInteger","reduce","acc","assign","replace","unpatch","wrap","Channel","prototype","BaseChannel","unwrap"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,sCAAD,CAAhC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeF,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAIG,OAAO,GAAG,EAAd;;AAEA,SAASC,yBAAT,CAAoCC,MAApC,EAA4CC,MAA5C,EAAoD;AAClD,SAAO,SAASC,mBAAT,CAA8BC,eAA9B,EAA+C;AACpD,WAAO,SAASC,wBAAT,CAAmCC,MAAnC,EAA2CC,MAA3C,EAAmD;AACxD,aAAOC,aAAa,CAACJ,eAAD,EAAkB,IAAlB,EAAwBK,SAAxB,EAAmCR,MAAnC,EAA2CC,MAA3C,EAAmDH,OAAO,CAACO,MAAD,CAA1D,EAAoEC,MAApE,CAApB;AACD,KAFD;AAGD,GAJD;AAKD;;AAED,SAASG,qBAAT,CAAgCT,MAAhC,EAAwCC,MAAxC,EAAgD;AAC9C,SAAO,SAASS,eAAT,CAA0BC,WAA1B,EAAuC;AAC5C,WAAO,SAASC,oBAAT,CAA+BN,MAA/B,EAAuC;AAC5C,aAAOC,aAAa,CAACI,WAAD,EAAc,IAAd,EAAoBH,SAApB,EAA+BR,MAA/B,EAAuCC,MAAvC,EAA+C,eAA/C,EAAgEK,MAAhE,CAApB;AACD,KAFD;AAGD,GAJD;AAKD;;AAED,SAASO,yBAAT,CAAoCb,MAApC,EAA4CC,MAA5C,EAAoD;AAClD,SAAO,SAASa,mBAAT,CAA8BC,eAA9B,EAA+C;AACpD,WAAO,SAASC,wBAAT,CAAmCV,MAAnC,EAA2CW,OAA3C,EAAoD;AACzD,YAAMC,OAAO,GAAGC,OAAO,CAACnB,MAAD,EAASiB,OAAT,CAAvB;AACA,YAAMG,IAAI,GAAGpB,MAAM,CAACqB,SAAP,CAAiB,cAAjB,EAAiC;AAAEH,QAAAA;AAAF,OAAjC,CAAb;AAEAI,MAAAA,OAAO,CAAC,IAAD,EAAOtB,MAAP,EAAeC,MAAf,EAAuBmB,IAAvB,EAA6B,eAA7B,EAA8Cd,MAA9C,CAAP;AAEAV,MAAAA,gBAAgB,CAAC2B,MAAjB,CAAwBH,IAAxB,EAA8BnB,MAAM,CAACuB,QAArC,EAA+C,IAA/C;AAEAxB,MAAAA,MAAM,CAACyB,KAAP,GAAeC,QAAf,CAAwBN,IAAxB,EAA8B,MAAM;AAClC,YAAI;AACFL,UAAAA,eAAe,CAACY,KAAhB,CAAsB,IAAtB,EAA4BnB,SAA5B;AACD,SAFD,CAEE,OAAOoB,CAAP,EAAU;AACV,gBAAMC,QAAQ,CAACT,IAAD,EAAOQ,CAAP,CAAd;AACD,SAJD,SAIU;AACRR,UAAAA,IAAI,CAACU,MAAL;AACD;AACF,OARD;AASD,KAjBD;AAkBD,GAnBD;AAoBD;;AAED,SAASvB,aAAT,CAAwBwB,IAAxB,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CjC,MAA7C,EAAqDC,MAArD,EAA6DI,MAA7D,EAAqEC,MAArE,EAA6E;AAC3E,QAAMY,OAAO,GAAGlB,MAAM,CAACyB,KAAP,GAAeS,MAAf,EAAhB;AACA,QAAMd,IAAI,GAAGpB,MAAM,CAACqB,SAAP,CAAiB,cAAjB,EAAiC;AAAEH,IAAAA;AAAF,GAAjC,CAAb;AAEAZ,EAAAA,MAAM,CAAC6B,OAAP,GAAiB7B,MAAM,CAAC6B,OAAP,IAAkB,EAAnC;AAEAb,EAAAA,OAAO,CAACU,OAAD,EAAUhC,MAAV,EAAkBC,MAAlB,EAA0BmB,IAA1B,EAAgCf,MAAhC,EAAwCC,MAAxC,CAAP;AACAN,EAAAA,MAAM,CAACoC,MAAP,CAAchB,IAAd,EAAoBvB,QAApB,EAA8BS,MAAM,CAAC6B,OAArC;AAEAvC,EAAAA,gBAAgB,CAAC2B,MAAjB,CAAwBH,IAAxB,EAA8BnB,MAAM,CAACuB,QAArC;AAEA,SAAOxB,MAAM,CAACyB,KAAP,GAAeC,QAAf,CAAwBN,IAAxB,EAA8B,MAAM;AACzC,QAAI;AACF,aAAOW,IAAI,CAACJ,KAAL,CAAWK,OAAX,EAAoBC,IAApB,CAAP;AACD,KAFD,CAEE,OAAOL,CAAP,EAAU;AACV,YAAMC,QAAQ,CAACT,IAAD,EAAOQ,CAAP,CAAd;AACD,KAJD,SAIU;AACRR,MAAAA,IAAI,CAACU,MAAL;AACD;AACF,GARM,CAAP;AASD;;AAED,SAASO,WAAT,CAAsBC,GAAtB,EAA2B;AACzB,SAAO,oBAAoBC,IAApB,CAAyBD,GAAzB,CAAP;AACD;;AAED,SAASE,eAAT,CAA0BnC,MAA1B,EAAkCC,MAAM,GAAG,EAA3C,EAA+C;AAC7C,SAAO,CACLD,MADK,EAELC,MAAM,CAACmC,QAFF,EAGLnC,MAAM,CAACoC,UAHF,EAILpC,MAAM,CAACqC,KAJF,EAKLrC,MAAM,CAACsC,MALF,EAMLtC,MAAM,CAACuC,WANF,EAOLC,MAPK,CAOEC,GAAG,IAAIA,GAPT,EAOcC,IAPd,CAOmB,GAPnB,CAAP;AAQD;;AAED,SAASnB,QAAT,CAAmBT,IAAnB,EAAyB6B,KAAzB,EAAgC;AAC9B7B,EAAAA,IAAI,CAACE,OAAL,CAAa;AACX,kBAAc2B,KAAK,CAACC,IADT;AAEX,iBAAaD,KAAK,CAAChC,OAFR;AAGX,mBAAegC,KAAK,CAACE;AAHV,GAAb;AAMA,SAAOF,KAAP;AACD;;AAED,SAAS3B,OAAT,CAAkBU,OAAlB,EAA2BhC,MAA3B,EAAmCC,MAAnC,EAA2CmB,IAA3C,EAAiDf,MAAjD,EAAyDC,MAAzD,EAAiE;AAC/D,QAAM8C,UAAU,GAAG,CACjB,OADiB,EAEjB,UAFiB,EAGjB,YAHiB,EAIjB,aAJiB,EAKjB,QALiB,EAMjB,aANiB,CAAnB;AASAhC,EAAAA,IAAI,CAACE,OAAL,CAAa;AACX,oBAAgBrB,MAAM,CAACoD,OAAP,IAAmB,GAAErD,MAAM,CAACsD,QAAS,OAD1C;AAEX,qBAAiBd,eAAe,CAACnC,MAAD,EAASC,MAAT;AAFrB,GAAb;;AAKA,MAAI0B,OAAO,IAAIA,OAAO,CAACuB,UAAnB,IAAiCvB,OAAO,CAACuB,UAAR,CAAmBC,MAAxD,EAAgE;AAC9DpC,IAAAA,IAAI,CAACE,OAAL,CAAa;AACX,kBAAYU,OAAO,CAACuB,UAAR,CAAmBC,MAAnB,CAA0BC,KAD3B;AAEX,kBAAYzB,OAAO,CAACuB,UAAR,CAAmBC,MAAnB,CAA0BE;AAF3B,KAAb;AAID;;AAED,UAAQrD,MAAR;AACE,SAAK,eAAL;AACEe,MAAAA,IAAI,CAACuC,MAAL,CAAY,WAAZ,EAAyB,UAAzB;AACA;;AACF,SAAK,eAAL;AACA,SAAK,WAAL;AACA,SAAK,eAAL;AACEvC,MAAAA,IAAI,CAACE,OAAL,CAAa;AACX,qBAAa,UADF;AAEX,qBAAa;AAFF,OAAb;AAIA;;AACF;AACEF,MAAAA,IAAI,CAACuC,MAAL,CAAY,WAAZ,EAAyB,QAAzB;AAbJ;;AAgBAP,EAAAA,UAAU,CAACQ,OAAX,CAAmBC,KAAK,IAAI;AAC1BvD,IAAAA,MAAM,CAACuD,KAAD,CAAN,KAAkBC,SAAlB,IAA+B1C,IAAI,CAACuC,MAAL,CAAa,QAAOE,KAAM,EAA1B,EAA6BvD,MAAM,CAACuD,KAAD,CAAnC,CAA/B;AACD,GAFD;AAGD;;AAED,SAAS1C,OAAT,CAAkBnB,MAAlB,EAA0BiB,OAA1B,EAAmC;AACjC,SAAOA,OAAO,GACVjB,MAAM,CAACmB,OAAP,CAAetB,QAAf,EAAyBoB,OAAO,CAAC8C,UAAR,CAAmB5B,OAA5C,CADU,GAEV,IAFJ;AAGD;;AAED6B,MAAM,CAACC,OAAP,GAAiB,CACf;AACEf,EAAAA,IAAI,EAAE,SADR;AAEEgB,EAAAA,IAAI,EAAE,aAFR;AAGEC,EAAAA,QAAQ,EAAE,CAAC,OAAD,CAHZ;;AAIEC,EAAAA,KAAK,CAAEC,IAAF,EAAQrE,MAAR,EAAgBC,MAAhB,EAAwB;AAC3BH,IAAAA,OAAO,GAAGwE,MAAM,CAACC,IAAP,CAAYF,IAAZ,EACPvB,MADO,CACA0B,GAAG,IAAIC,MAAM,CAACC,SAAP,CAAiBL,IAAI,CAACG,GAAD,CAArB,CADP,EAEP1B,MAFO,CAEA0B,GAAG,IAAInC,WAAW,CAACmC,GAAD,CAFlB,EAGPG,MAHO,CAGA,CAACC,GAAD,EAAMJ,GAAN,KAAcF,MAAM,CAACO,MAAP,CAAcD,GAAd,EAAmB;AAAE,OAACP,IAAI,CAACG,GAAD,CAAL,GAAa9E,SAAS,CAAC8E,GAAD,CAAT,CAAeM,OAAf,CAAuB,GAAvB,EAA4B,GAA5B;AAAf,KAAnB,CAHd,EAGqF,EAHrF,CAAV;AAID,GATH;;AAUEC,EAAAA,OAAO,CAAEV,IAAF,EAAQ;AACbvE,IAAAA,OAAO,GAAG,EAAV;AACD;;AAZH,CADe,EAef;AACEoD,EAAAA,IAAI,EAAE,SADR;AAEEgB,EAAAA,IAAI,EAAE,gBAFR;AAGEC,EAAAA,QAAQ,EAAE,CAAC,OAAD,CAHZ;;AAIEC,EAAAA,KAAK,CAAEpC,OAAF,EAAWhC,MAAX,EAAmBC,MAAnB,EAA2B;AAC9B,SAAK+E,IAAL,CAAUhD,OAAO,CAACiD,OAAR,CAAgBC,SAA1B,EAAqC,iBAArC,EAAwDnF,yBAAyB,CAACC,MAAD,EAASC,MAAT,CAAjF;AACA,SAAK+E,IAAL,CAAUhD,OAAO,CAACiD,OAAR,CAAgBC,SAA1B,EAAqC,aAArC,EAAoDzE,qBAAqB,CAACT,MAAD,EAASC,MAAT,CAAzE;AACA,SAAK+E,IAAL,CAAUhD,OAAO,CAACmD,WAAR,CAAoBD,SAA9B,EAAyC,iBAAzC,EAA4DrE,yBAAyB,CAACb,MAAD,EAASC,MAAT,CAArF;AACD,GARH;;AASE8E,EAAAA,OAAO,CAAE/C,OAAF,EAAW;AAChB,SAAKoD,MAAL,CAAYpD,OAAO,CAACiD,OAAR,CAAgBC,SAA5B,EAAuC,iBAAvC;AACA,SAAKE,MAAL,CAAYpD,OAAO,CAACiD,OAAR,CAAgBC,SAA5B,EAAuC,aAAvC;AACA,SAAKE,MAAL,CAAYpD,OAAO,CAACmD,WAAR,CAAoBD,SAAhC,EAA2C,iBAA3C;AACD;;AAbH,CAfe,CAAjB","sourcesContent":["'use strict'\n\nconst kebabCase = require('lodash.kebabcase')\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\nconst { TEXT_MAP } = require('../../../ext/formats')\n\nlet methods = {}\n\nfunction createWrapSendImmediately (tracer, config) {\n  return function wrapSendImmediately (sendImmediately) {\n    return function sendImmediatelyWithTrace (method, fields) {\n      return sendWithTrace(sendImmediately, this, arguments, tracer, config, methods[method], fields)\n    }\n  }\n}\n\nfunction createWrapSendMessage (tracer, config) {\n  return function wrapSendMessage (sendMessage) {\n    return function sendMessageWithTrace (fields) {\n      return sendWithTrace(sendMessage, this, arguments, tracer, config, 'basic.publish', fields)\n    }\n  }\n}\n\nfunction createWrapDispatchMessage (tracer, config) {\n  return function wrapDispatchMessage (dispatchMessage) {\n    return function dispatchMessageWithTrace (fields, message) {\n      const childOf = extract(tracer, message)\n      const span = tracer.startSpan('amqp.command', { childOf })\n\n      addTags(this, tracer, config, span, 'basic.deliver', fields)\n\n      analyticsSampler.sample(span, config.measured, true)\n\n      tracer.scope().activate(span, () => {\n        try {\n          dispatchMessage.apply(this, arguments)\n        } catch (e) {\n          throw addError(span, e)\n        } finally {\n          span.finish()\n        }\n      })\n    }\n  }\n}\n\nfunction sendWithTrace (send, channel, args, tracer, config, method, fields) {\n  const childOf = tracer.scope().active()\n  const span = tracer.startSpan('amqp.command', { childOf })\n\n  fields.headers = fields.headers || {}\n\n  addTags(channel, tracer, config, span, method, fields)\n  tracer.inject(span, TEXT_MAP, fields.headers)\n\n  analyticsSampler.sample(span, config.measured)\n\n  return tracer.scope().activate(span, () => {\n    try {\n      return send.apply(channel, args)\n    } catch (e) {\n      throw addError(span, e)\n    } finally {\n      span.finish()\n    }\n  })\n}\n\nfunction isCamelCase (str) {\n  return /([A-Z][a-z0-9]+)+/.test(str)\n}\n\nfunction getResourceName (method, fields = {}) {\n  return [\n    method,\n    fields.exchange,\n    fields.routingKey,\n    fields.queue,\n    fields.source,\n    fields.destination\n  ].filter(val => val).join(' ')\n}\n\nfunction addError (span, error) {\n  span.addTags({\n    'error.type': error.name,\n    'error.msg': error.message,\n    'error.stack': error.stack\n  })\n\n  return error\n}\n\nfunction addTags (channel, tracer, config, span, method, fields) {\n  const fieldNames = [\n    'queue',\n    'exchange',\n    'routingKey',\n    'consumerTag',\n    'source',\n    'destination'\n  ]\n\n  span.addTags({\n    'service.name': config.service || `${tracer._service}-amqp`,\n    'resource.name': getResourceName(method, fields)\n  })\n\n  if (channel && channel.connection && channel.connection.stream) {\n    span.addTags({\n      'out.host': channel.connection.stream._host,\n      'out.port': channel.connection.stream.remotePort\n    })\n  }\n\n  switch (method) {\n    case 'basic.publish':\n      span.setTag('span.kind', 'producer')\n      break\n    case 'basic.consume':\n    case 'basic.get':\n    case 'basic.deliver':\n      span.addTags({\n        'span.kind': 'consumer',\n        'span.type': 'worker'\n      })\n      break\n    default:\n      span.setTag('span.kind', 'client')\n  }\n\n  fieldNames.forEach(field => {\n    fields[field] !== undefined && span.setTag(`amqp.${field}`, fields[field])\n  })\n}\n\nfunction extract (tracer, message) {\n  return message\n    ? tracer.extract(TEXT_MAP, message.properties.headers)\n    : null\n}\n\nmodule.exports = [\n  {\n    name: 'amqplib',\n    file: 'lib/defs.js',\n    versions: ['>=0.5'],\n    patch (defs, tracer, config) {\n      methods = Object.keys(defs)\n        .filter(key => Number.isInteger(defs[key]))\n        .filter(key => isCamelCase(key))\n        .reduce((acc, key) => Object.assign(acc, { [defs[key]]: kebabCase(key).replace('-', '.') }), {})\n    },\n    unpatch (defs) {\n      methods = {}\n    }\n  },\n  {\n    name: 'amqplib',\n    file: 'lib/channel.js',\n    versions: ['>=0.5'],\n    patch (channel, tracer, config) {\n      this.wrap(channel.Channel.prototype, 'sendImmediately', createWrapSendImmediately(tracer, config))\n      this.wrap(channel.Channel.prototype, 'sendMessage', createWrapSendMessage(tracer, config))\n      this.wrap(channel.BaseChannel.prototype, 'dispatchMessage', createWrapDispatchMessage(tracer, config))\n    },\n    unpatch (channel) {\n      this.unwrap(channel.Channel.prototype, 'sendImmediately')\n      this.unwrap(channel.Channel.prototype, 'sendMessage')\n      this.unwrap(channel.BaseChannel.prototype, 'dispatchMessage')\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}