{"ast":null,"code":"'use strict';\n\nconst web = require('../../dd-trace/src/plugins/util/web');\n\nconst handlers = ['use', 'pre'];\nconst methods = ['del', 'get', 'head', 'opts', 'post', 'put', 'patch'];\n\nfunction createWrapSetupRequest(tracer, config) {\n  config = web.normalizeConfig(config);\n  return function wrapSetupRequest(setupRequest) {\n    return function setupRequestWithTrace(req, res) {\n      return web.instrument(tracer, config, req, res, 'restify.request', () => {\n        web.beforeEnd(req, () => {\n          if (req.route && !req._datadog.routeEntered) {\n            web.enterRoute(req, req.route.path);\n          }\n        });\n        return setupRequest.apply(this, arguments);\n      });\n    };\n  };\n}\n\nfunction createWrapMethod(tracer, config) {\n  return function wrapMethod(method) {\n    return function methodWithTrace(path) {\n      const middleware = wrapMiddleware(Array.prototype.slice.call(arguments, 1));\n      return method.apply(this, [path].concat(middleware));\n    };\n  };\n}\n\nfunction createWrapHandler(tracer, config) {\n  return function wrapMethod(method) {\n    return function methodWithTrace() {\n      return method.apply(this, wrapMiddleware(arguments));\n    };\n  };\n}\n\nfunction wrapMiddleware(middleware) {\n  return Array.prototype.map.call(middleware, wrapFn);\n}\n\nfunction wrapFn(fn) {\n  if (Array.isArray(fn)) return wrapMiddleware(fn);\n  return function (req, res, next) {\n    return web.reactivate(req, () => fn.apply(this, arguments));\n  };\n}\n\nmodule.exports = [{\n  name: 'restify',\n  versions: ['>=3'],\n  file: 'lib/server.js',\n\n  patch(Server, tracer, config) {\n    this.wrap(Server.prototype, '_setupRequest', createWrapSetupRequest(tracer, config));\n    this.wrap(Server.prototype, handlers, createWrapHandler(tracer, config));\n    this.wrap(Server.prototype, methods, createWrapMethod(tracer, config));\n  },\n\n  unpatch(Server) {\n    this.unwrap(Server.prototype, '_setupRequest');\n    this.unwrap(Server.prototype, handlers);\n    this.unwrap(Server.prototype, methods);\n  }\n\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-restify/src/index.js"],"names":["web","require","handlers","methods","createWrapSetupRequest","tracer","config","normalizeConfig","wrapSetupRequest","setupRequest","setupRequestWithTrace","req","res","instrument","beforeEnd","route","_datadog","routeEntered","enterRoute","path","apply","arguments","createWrapMethod","wrapMethod","method","methodWithTrace","middleware","wrapMiddleware","Array","prototype","slice","call","concat","createWrapHandler","map","wrapFn","fn","isArray","next","reactivate","module","exports","name","versions","file","patch","Server","wrap","unpatch","unwrap"],"mappings":"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","sourcesContent":["'use strict'\n\nconst web = require('../../dd-trace/src/plugins/util/web')\nconst handlers = ['use', 'pre']\nconst methods = ['del', 'get', 'head', 'opts', 'post', 'put', 'patch']\n\nfunction createWrapSetupRequest (tracer, config) {\n  config = web.normalizeConfig(config)\n\n  return function wrapSetupRequest (setupRequest) {\n    return function setupRequestWithTrace (req, res) {\n      return web.instrument(tracer, config, req, res, 'restify.request', () => {\n        web.beforeEnd(req, () => {\n          if (req.route && !req._datadog.routeEntered) {\n            web.enterRoute(req, req.route.path)\n          }\n        })\n\n        return setupRequest.apply(this, arguments)\n      })\n    }\n  }\n}\n\nfunction createWrapMethod (tracer, config) {\n  return function wrapMethod (method) {\n    return function methodWithTrace (path) {\n      const middleware = wrapMiddleware(Array.prototype.slice.call(arguments, 1))\n\n      return method.apply(this, [path].concat(middleware))\n    }\n  }\n}\n\nfunction createWrapHandler (tracer, config) {\n  return function wrapMethod (method) {\n    return function methodWithTrace () {\n      return method.apply(this, wrapMiddleware(arguments))\n    }\n  }\n}\n\nfunction wrapMiddleware (middleware) {\n  return Array.prototype.map.call(middleware, wrapFn)\n}\n\nfunction wrapFn (fn) {\n  if (Array.isArray(fn)) return wrapMiddleware(fn)\n\n  return function (req, res, next) {\n    return web.reactivate(req, () => fn.apply(this, arguments))\n  }\n}\n\nmodule.exports = [\n  {\n    name: 'restify',\n    versions: ['>=3'],\n    file: 'lib/server.js',\n    patch (Server, tracer, config) {\n      this.wrap(Server.prototype, '_setupRequest', createWrapSetupRequest(tracer, config))\n      this.wrap(Server.prototype, handlers, createWrapHandler(tracer, config))\n      this.wrap(Server.prototype, methods, createWrapMethod(tracer, config))\n    },\n    unpatch (Server) {\n      this.unwrap(Server.prototype, '_setupRequest')\n      this.unwrap(Server.prototype, handlers)\n      this.unwrap(Server.prototype, methods)\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}