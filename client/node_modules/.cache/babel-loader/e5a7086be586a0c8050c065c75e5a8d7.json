{"ast":null,"code":"'use strict';\n\nconst Tracer = require('opentracing').Tracer;\n\nconst Scope = require('../scope/base');\n\nconst Span = require('./span');\n\nclass NoopTracer extends Tracer {\n  constructor(config) {\n    super(config);\n    let ScopeManager;\n\n    if (process.env.DD_CONTEXT_PROPAGATION === 'false') {\n      ScopeManager = require('../scope/noop/scope_manager');\n    } else {\n      ScopeManager = require('../scope/scope_manager');\n    }\n\n    this._scopeManager = new ScopeManager();\n    this._scope = new Scope(config);\n    this._span = new Span(this);\n  }\n\n  trace(name, options, fn) {\n    return fn(this._span, () => {});\n  }\n\n  wrap(name, options, fn) {\n    return fn;\n  }\n\n  scopeManager() {\n    return this._scopeManager;\n  }\n\n  scope() {\n    return this._scope;\n  }\n\n  currentSpan() {\n    return null;\n  }\n\n  getRumData() {\n    return '';\n  }\n\n  setUrl() {}\n\n  _startSpan(name, options) {\n    return this._span;\n  }\n\n}\n\nmodule.exports = NoopTracer;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/noop/tracer.js"],"names":["Tracer","require","Scope","Span","NoopTracer","constructor","config","ScopeManager","process","env","DD_CONTEXT_PROPAGATION","_scopeManager","_scope","_span","trace","name","options","fn","wrap","scopeManager","scope","currentSpan","getRumData","setUrl","_startSpan","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,MAAME,KAAK,GAAGD,OAAO,CAAC,eAAD,CAArB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMG,UAAN,SAAyBJ,MAAzB,CAAgC;AAC9BK,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB,UAAMA,MAAN;AAEA,QAAIC,YAAJ;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,KAAuC,OAA3C,EAAoD;AAClDH,MAAAA,YAAY,GAAGN,OAAO,CAAC,6BAAD,CAAtB;AACD,KAFD,MAEO;AACLM,MAAAA,YAAY,GAAGN,OAAO,CAAC,wBAAD,CAAtB;AACD;;AAED,SAAKU,aAAL,GAAqB,IAAIJ,YAAJ,EAArB;AACA,SAAKK,MAAL,GAAc,IAAIV,KAAJ,CAAUI,MAAV,CAAd;AACA,SAAKO,KAAL,GAAa,IAAIV,IAAJ,CAAS,IAAT,CAAb;AACD;;AAEDW,EAAAA,KAAK,CAAEC,IAAF,EAAQC,OAAR,EAAiBC,EAAjB,EAAqB;AACxB,WAAOA,EAAE,CAAC,KAAKJ,KAAN,EAAa,MAAM,CAAE,CAArB,CAAT;AACD;;AAEDK,EAAAA,IAAI,CAAEH,IAAF,EAAQC,OAAR,EAAiBC,EAAjB,EAAqB;AACvB,WAAOA,EAAP;AACD;;AAEDE,EAAAA,YAAY,GAAI;AACd,WAAO,KAAKR,aAAZ;AACD;;AAEDS,EAAAA,KAAK,GAAI;AACP,WAAO,KAAKR,MAAZ;AACD;;AAEDS,EAAAA,WAAW,GAAI;AACb,WAAO,IAAP;AACD;;AAEDC,EAAAA,UAAU,GAAI;AACZ,WAAO,EAAP;AACD;;AAEDC,EAAAA,MAAM,GAAI,CACT;;AAEDC,EAAAA,UAAU,CAAET,IAAF,EAAQC,OAAR,EAAiB;AACzB,WAAO,KAAKH,KAAZ;AACD;;AA9C6B;;AAiDhCY,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["'use strict'\n\nconst Tracer = require('opentracing').Tracer\nconst Scope = require('../scope/base')\nconst Span = require('./span')\n\nclass NoopTracer extends Tracer {\n  constructor (config) {\n    super(config)\n\n    let ScopeManager\n\n    if (process.env.DD_CONTEXT_PROPAGATION === 'false') {\n      ScopeManager = require('../scope/noop/scope_manager')\n    } else {\n      ScopeManager = require('../scope/scope_manager')\n    }\n\n    this._scopeManager = new ScopeManager()\n    this._scope = new Scope(config)\n    this._span = new Span(this)\n  }\n\n  trace (name, options, fn) {\n    return fn(this._span, () => {})\n  }\n\n  wrap (name, options, fn) {\n    return fn\n  }\n\n  scopeManager () {\n    return this._scopeManager\n  }\n\n  scope () {\n    return this._scope\n  }\n\n  currentSpan () {\n    return null\n  }\n\n  getRumData () {\n    return ''\n  }\n\n  setUrl () {\n  }\n\n  _startSpan (name, options) {\n    return this._span\n  }\n}\n\nmodule.exports = NoopTracer\n"]},"metadata":{},"sourceType":"script"}