{"ast":null,"code":"'use strict';\n\nconst analyticsSampler = require('../../analytics_sampler');\n\nconst urlFilter = require('../util/urlfilter');\n\nconst tx = require('./tx');\n\nconst redis = {\n  // Ensure the configuration has the correct structure and defaults.\n  normalizeConfig(config) {\n    const filter = urlFilter.getFilter(config);\n    return Object.assign({}, config, {\n      filter\n    });\n  },\n\n  // Start a span for a Redis command.\n  instrument(tracer, config, db, command, args) {\n    const childOf = tracer.scope().active();\n    const span = tracer.startSpan('redis.command', {\n      childOf,\n      tags: {\n        'span.kind': 'client',\n        'resource.name': command,\n        'span.type': 'redis',\n        'db.type': 'redis',\n        'db.name': db || '0',\n        'out.host': '127.0.0.1',\n        'out.port': String(6379),\n        'redis.raw_command': formatCommand(command, args)\n      }\n    });\n    span.setTag('service.name', config.service || `${span.context()._tags['service.name']}-redis`);\n    analyticsSampler.sample(span, config.measured);\n    return span;\n  }\n\n};\n\nfunction formatCommand(command, args) {\n  command = command.toUpperCase();\n  if (!args || command === 'AUTH') return command;\n\n  for (let i = 0, l = args.length; i < l; i++) {\n    if (typeof args[i] === 'function') continue;\n    command = `${command} ${formatArg(args[i])}`;\n    if (command.length > 1000) return trim(command, 1000);\n  }\n\n  return command;\n}\n\nfunction formatArg(arg) {\n  switch (typeof arg) {\n    case 'string':\n    case 'number':\n      return trim(String(arg), 100);\n\n    default:\n      return '?';\n  }\n}\n\nfunction trim(str, maxlen) {\n  if (str.length > maxlen) {\n    str = str.substr(0, maxlen - 3) + '...';\n  }\n\n  return str;\n}\n\nmodule.exports = Object.assign({}, tx, redis);","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/plugins/util/redis.js"],"names":["analyticsSampler","require","urlFilter","tx","redis","normalizeConfig","config","filter","getFilter","Object","assign","instrument","tracer","db","command","args","childOf","scope","active","span","startSpan","tags","String","formatCommand","setTag","service","context","_tags","sample","measured","toUpperCase","i","l","length","formatArg","trim","arg","str","maxlen","substr","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst analyticsSampler = require('../../analytics_sampler')\nconst urlFilter = require('../util/urlfilter')\nconst tx = require('./tx')\n\nconst redis = {\n  // Ensure the configuration has the correct structure and defaults.\n  normalizeConfig (config) {\n    const filter = urlFilter.getFilter(config)\n\n    return Object.assign({}, config, {\n      filter\n    })\n  },\n\n  // Start a span for a Redis command.\n  instrument (tracer, config, db, command, args) {\n    const childOf = tracer.scope().active()\n    const span = tracer.startSpan('redis.command', {\n      childOf,\n      tags: {\n        'span.kind': 'client',\n        'resource.name': command,\n        'span.type': 'redis',\n        'db.type': 'redis',\n        'db.name': db || '0',\n        'out.host': '127.0.0.1',\n        'out.port': String(6379),\n        'redis.raw_command': formatCommand(command, args)\n      }\n    })\n\n    span.setTag('service.name', config.service || `${span.context()._tags['service.name']}-redis`)\n\n    analyticsSampler.sample(span, config.measured)\n\n    return span\n  }\n}\n\nfunction formatCommand (command, args) {\n  command = command.toUpperCase()\n\n  if (!args || command === 'AUTH') return command\n\n  for (let i = 0, l = args.length; i < l; i++) {\n    if (typeof args[i] === 'function') continue\n\n    command = `${command} ${formatArg(args[i])}`\n\n    if (command.length > 1000) return trim(command, 1000)\n  }\n\n  return command\n}\n\nfunction formatArg (arg) {\n  switch (typeof arg) {\n    case 'string':\n    case 'number':\n      return trim(String(arg), 100)\n    default:\n      return '?'\n  }\n}\n\nfunction trim (str, maxlen) {\n  if (str.length > maxlen) {\n    str = str.substr(0, maxlen - 3) + '...'\n  }\n\n  return str\n}\n\nmodule.exports = Object.assign({}, tx, redis)\n"]},"metadata":{},"sourceType":"script"}