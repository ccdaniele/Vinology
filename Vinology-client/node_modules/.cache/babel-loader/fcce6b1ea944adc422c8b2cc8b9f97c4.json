{"ast":null,"code":"/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.perftools = function () {\n  /**\n   * Namespace perftools.\n   * @exports perftools\n   * @namespace\n   */\n  var perftools = {};\n\n  perftools.profiles = function () {\n    /**\n     * Namespace profiles.\n     * @memberof perftools\n     * @namespace\n     */\n    var profiles = {};\n\n    profiles.Profile = function () {\n      /**\n       * Properties of a Profile.\n       * @memberof perftools.profiles\n       * @interface IProfile\n       * @property {Array.<perftools.profiles.IValueType>} [sampleType] Profile sampleType\n       * @property {Array.<perftools.profiles.ISample>} [sample] Profile sample\n       * @property {Array.<perftools.profiles.IMapping>} [mapping] Profile mapping\n       * @property {Array.<perftools.profiles.ILocation>} [location] Profile location\n       * @property {Array.<perftools.profiles.IFunction>} [\"function\"] Profile function\n       * @property {Array.<string>} [stringTable] Profile stringTable\n       * @property {number|Long} [dropFrames] Profile dropFrames\n       * @property {number|Long} [keepFrames] Profile keepFrames\n       * @property {number|Long} [timeNanos] Profile timeNanos\n       * @property {number|Long} [durationNanos] Profile durationNanos\n       * @property {perftools.profiles.IValueType} [periodType] Profile periodType\n       * @property {number|Long} [period] Profile period\n       * @property {Array.<number|Long>} [comment] Profile comment\n       * @property {number|Long} [defaultSampleType] Profile defaultSampleType\n       */\n\n      /**\n       * Constructs a new Profile.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Profile.\n       * @constructor\n       * @param {perftools.profiles.IProfile=} [properties] Properties to set\n       */\n      function Profile(properties) {\n        this.sampleType = [];\n        this.sample = [];\n        this.mapping = [];\n        this.location = [];\n        this[\"function\"] = [];\n        this.stringTable = [];\n        this.comment = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Profile sampleType.\n       * @member {Array.<perftools.profiles.IValueType>}sampleType\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n\n      Profile.prototype.sampleType = $util.emptyArray;\n      /**\n       * Profile sample.\n       * @member {Array.<perftools.profiles.ISample>}sample\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.sample = $util.emptyArray;\n      /**\n       * Profile mapping.\n       * @member {Array.<perftools.profiles.IMapping>}mapping\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.mapping = $util.emptyArray;\n      /**\n       * Profile location.\n       * @member {Array.<perftools.profiles.ILocation>}location\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.location = $util.emptyArray;\n      /**\n       * Profile function.\n       * @member {Array.<perftools.profiles.IFunction>}function_\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype[\"function\"] = $util.emptyArray;\n      /**\n       * Profile stringTable.\n       * @member {Array.<string>}stringTable\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.stringTable = $util.emptyArray;\n      /**\n       * Profile dropFrames.\n       * @member {number|Long}dropFrames\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.dropFrames = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Profile keepFrames.\n       * @member {number|Long}keepFrames\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.keepFrames = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Profile timeNanos.\n       * @member {number|Long}timeNanos\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.timeNanos = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Profile durationNanos.\n       * @member {number|Long}durationNanos\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.durationNanos = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Profile periodType.\n       * @member {(perftools.profiles.IValueType|null|undefined)}periodType\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.periodType = null;\n      /**\n       * Profile period.\n       * @member {number|Long}period\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.period = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Profile comment.\n       * @member {Array.<number|Long>}comment\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.comment = $util.emptyArray;\n      /**\n       * Profile defaultSampleType.\n       * @member {number|Long}defaultSampleType\n       * @memberof perftools.profiles.Profile\n       * @instance\n       */\n\n      Profile.prototype.defaultSampleType = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Creates a new Profile instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {perftools.profiles.IProfile=} [properties] Properties to set\n       * @returns {perftools.profiles.Profile} Profile instance\n       */\n\n      Profile.create = function create(properties) {\n        return new Profile(properties);\n      };\n      /**\n       * Encodes the specified Profile message. Does not implicitly {@link perftools.profiles.Profile.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {perftools.profiles.IProfile} message Profile message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Profile.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.sampleType != null && message.sampleType.length) for (var i = 0; i < message.sampleType.length; ++i) $root.perftools.profiles.ValueType.encode(message.sampleType[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        if (message.sample != null && message.sample.length) for (var i = 0; i < message.sample.length; ++i) $root.perftools.profiles.Sample.encode(message.sample[i], writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim();\n        if (message.mapping != null && message.mapping.length) for (var i = 0; i < message.mapping.length; ++i) $root.perftools.profiles.Mapping.encode(message.mapping[i], writer.uint32(\n        /* id 3, wireType 2 =*/\n        26).fork()).ldelim();\n        if (message.location != null && message.location.length) for (var i = 0; i < message.location.length; ++i) $root.perftools.profiles.Location.encode(message.location[i], writer.uint32(\n        /* id 4, wireType 2 =*/\n        34).fork()).ldelim();\n        if (message[\"function\"] != null && message[\"function\"].length) for (var i = 0; i < message[\"function\"].length; ++i) $root.perftools.profiles.Function.encode(message[\"function\"][i], writer.uint32(\n        /* id 5, wireType 2 =*/\n        42).fork()).ldelim();\n        if (message.stringTable != null && message.stringTable.length) for (var i = 0; i < message.stringTable.length; ++i) writer.uint32(\n        /* id 6, wireType 2 =*/\n        50).string(message.stringTable[i]);\n        if (message.dropFrames != null && message.hasOwnProperty(\"dropFrames\")) writer.uint32(\n        /* id 7, wireType 0 =*/\n        56).int64(message.dropFrames);\n        if (message.keepFrames != null && message.hasOwnProperty(\"keepFrames\")) writer.uint32(\n        /* id 8, wireType 0 =*/\n        64).int64(message.keepFrames);\n        if (message.timeNanos != null && message.hasOwnProperty(\"timeNanos\")) writer.uint32(\n        /* id 9, wireType 0 =*/\n        72).int64(message.timeNanos);\n        if (message.durationNanos != null && message.hasOwnProperty(\"durationNanos\")) writer.uint32(\n        /* id 10, wireType 0 =*/\n        80).int64(message.durationNanos);\n        if (message.periodType != null && message.hasOwnProperty(\"periodType\")) $root.perftools.profiles.ValueType.encode(message.periodType, writer.uint32(\n        /* id 11, wireType 2 =*/\n        90).fork()).ldelim();\n        if (message.period != null && message.hasOwnProperty(\"period\")) writer.uint32(\n        /* id 12, wireType 0 =*/\n        96).int64(message.period);\n\n        if (message.comment != null && message.comment.length) {\n          writer.uint32(\n          /* id 13, wireType 2 =*/\n          106).fork();\n\n          for (var i = 0; i < message.comment.length; ++i) writer.int64(message.comment[i]);\n\n          writer.ldelim();\n        }\n\n        if (message.defaultSampleType != null && message.hasOwnProperty(\"defaultSampleType\")) writer.uint32(\n        /* id 14, wireType 0 =*/\n        112).int64(message.defaultSampleType);\n        return writer;\n      };\n      /**\n       * Encodes the specified Profile message, length delimited. Does not implicitly {@link perftools.profiles.Profile.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {perftools.profiles.IProfile} message Profile message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Profile.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Profile message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Profile} Profile\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Profile.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Profile();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.sampleType && message.sampleType.length)) message.sampleType = [];\n              message.sampleType.push($root.perftools.profiles.ValueType.decode(reader, reader.uint32()));\n              break;\n\n            case 2:\n              if (!(message.sample && message.sample.length)) message.sample = [];\n              message.sample.push($root.perftools.profiles.Sample.decode(reader, reader.uint32()));\n              break;\n\n            case 3:\n              if (!(message.mapping && message.mapping.length)) message.mapping = [];\n              message.mapping.push($root.perftools.profiles.Mapping.decode(reader, reader.uint32()));\n              break;\n\n            case 4:\n              if (!(message.location && message.location.length)) message.location = [];\n              message.location.push($root.perftools.profiles.Location.decode(reader, reader.uint32()));\n              break;\n\n            case 5:\n              if (!(message[\"function\"] && message[\"function\"].length)) message[\"function\"] = [];\n              message[\"function\"].push($root.perftools.profiles.Function.decode(reader, reader.uint32()));\n              break;\n\n            case 6:\n              if (!(message.stringTable && message.stringTable.length)) message.stringTable = [];\n              message.stringTable.push(reader.string());\n              break;\n\n            case 7:\n              message.dropFrames = reader.int64();\n              break;\n\n            case 8:\n              message.keepFrames = reader.int64();\n              break;\n\n            case 9:\n              message.timeNanos = reader.int64();\n              break;\n\n            case 10:\n              message.durationNanos = reader.int64();\n              break;\n\n            case 11:\n              message.periodType = $root.perftools.profiles.ValueType.decode(reader, reader.uint32());\n              break;\n\n            case 12:\n              message.period = reader.int64();\n              break;\n\n            case 13:\n              if (!(message.comment && message.comment.length)) message.comment = [];\n\n              if ((tag & 7) === 2) {\n                var end2 = reader.uint32() + reader.pos;\n\n                while (reader.pos < end2) message.comment.push(reader.int64());\n              } else message.comment.push(reader.int64());\n\n              break;\n\n            case 14:\n              message.defaultSampleType = reader.int64();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Profile message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Profile} Profile\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Profile.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Profile message.\n       * @function verify\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Profile.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.sampleType != null && message.hasOwnProperty(\"sampleType\")) {\n          if (!Array.isArray(message.sampleType)) return \"sampleType: array expected\";\n\n          for (var i = 0; i < message.sampleType.length; ++i) {\n            var error = $root.perftools.profiles.ValueType.verify(message.sampleType[i]);\n            if (error) return \"sampleType.\" + error;\n          }\n        }\n\n        if (message.sample != null && message.hasOwnProperty(\"sample\")) {\n          if (!Array.isArray(message.sample)) return \"sample: array expected\";\n\n          for (var i = 0; i < message.sample.length; ++i) {\n            error = $root.perftools.profiles.Sample.verify(message.sample[i]);\n            if (error) return \"sample.\" + error;\n          }\n        }\n\n        if (message.mapping != null && message.hasOwnProperty(\"mapping\")) {\n          if (!Array.isArray(message.mapping)) return \"mapping: array expected\";\n\n          for (var i = 0; i < message.mapping.length; ++i) {\n            error = $root.perftools.profiles.Mapping.verify(message.mapping[i]);\n            if (error) return \"mapping.\" + error;\n          }\n        }\n\n        if (message.location != null && message.hasOwnProperty(\"location\")) {\n          if (!Array.isArray(message.location)) return \"location: array expected\";\n\n          for (var i = 0; i < message.location.length; ++i) {\n            error = $root.perftools.profiles.Location.verify(message.location[i]);\n            if (error) return \"location.\" + error;\n          }\n        }\n\n        if (message[\"function\"] != null && message.hasOwnProperty(\"function\")) {\n          if (!Array.isArray(message[\"function\"])) return \"function: array expected\";\n\n          for (var i = 0; i < message[\"function\"].length; ++i) {\n            error = $root.perftools.profiles.Function.verify(message[\"function\"][i]);\n            if (error) return \"function.\" + error;\n          }\n        }\n\n        if (message.stringTable != null && message.hasOwnProperty(\"stringTable\")) {\n          if (!Array.isArray(message.stringTable)) return \"stringTable: array expected\";\n\n          for (var i = 0; i < message.stringTable.length; ++i) if (!$util.isString(message.stringTable[i])) return \"stringTable: string[] expected\";\n        }\n\n        if (message.dropFrames != null && message.hasOwnProperty(\"dropFrames\")) if (!$util.isInteger(message.dropFrames) && !(message.dropFrames && $util.isInteger(message.dropFrames.low) && $util.isInteger(message.dropFrames.high))) return \"dropFrames: integer|Long expected\";\n        if (message.keepFrames != null && message.hasOwnProperty(\"keepFrames\")) if (!$util.isInteger(message.keepFrames) && !(message.keepFrames && $util.isInteger(message.keepFrames.low) && $util.isInteger(message.keepFrames.high))) return \"keepFrames: integer|Long expected\";\n        if (message.timeNanos != null && message.hasOwnProperty(\"timeNanos\")) if (!$util.isInteger(message.timeNanos) && !(message.timeNanos && $util.isInteger(message.timeNanos.low) && $util.isInteger(message.timeNanos.high))) return \"timeNanos: integer|Long expected\";\n        if (message.durationNanos != null && message.hasOwnProperty(\"durationNanos\")) if (!$util.isInteger(message.durationNanos) && !(message.durationNanos && $util.isInteger(message.durationNanos.low) && $util.isInteger(message.durationNanos.high))) return \"durationNanos: integer|Long expected\";\n\n        if (message.periodType != null && message.hasOwnProperty(\"periodType\")) {\n          error = $root.perftools.profiles.ValueType.verify(message.periodType);\n          if (error) return \"periodType.\" + error;\n        }\n\n        if (message.period != null && message.hasOwnProperty(\"period\")) if (!$util.isInteger(message.period) && !(message.period && $util.isInteger(message.period.low) && $util.isInteger(message.period.high))) return \"period: integer|Long expected\";\n\n        if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n          if (!Array.isArray(message.comment)) return \"comment: array expected\";\n\n          for (var i = 0; i < message.comment.length; ++i) if (!$util.isInteger(message.comment[i]) && !(message.comment[i] && $util.isInteger(message.comment[i].low) && $util.isInteger(message.comment[i].high))) return \"comment: integer|Long[] expected\";\n        }\n\n        if (message.defaultSampleType != null && message.hasOwnProperty(\"defaultSampleType\")) if (!$util.isInteger(message.defaultSampleType) && !(message.defaultSampleType && $util.isInteger(message.defaultSampleType.low) && $util.isInteger(message.defaultSampleType.high))) return \"defaultSampleType: integer|Long expected\";\n        return null;\n      };\n      /**\n       * Creates a Profile message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Profile} Profile\n       */\n\n\n      Profile.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Profile) return object;\n        var message = new $root.perftools.profiles.Profile();\n\n        if (object.sampleType) {\n          if (!Array.isArray(object.sampleType)) throw TypeError(\".perftools.profiles.Profile.sampleType: array expected\");\n          message.sampleType = [];\n\n          for (var i = 0; i < object.sampleType.length; ++i) {\n            if (typeof object.sampleType[i] !== \"object\") throw TypeError(\".perftools.profiles.Profile.sampleType: object expected\");\n            message.sampleType[i] = $root.perftools.profiles.ValueType.fromObject(object.sampleType[i]);\n          }\n        }\n\n        if (object.sample) {\n          if (!Array.isArray(object.sample)) throw TypeError(\".perftools.profiles.Profile.sample: array expected\");\n          message.sample = [];\n\n          for (var i = 0; i < object.sample.length; ++i) {\n            if (typeof object.sample[i] !== \"object\") throw TypeError(\".perftools.profiles.Profile.sample: object expected\");\n            message.sample[i] = $root.perftools.profiles.Sample.fromObject(object.sample[i]);\n          }\n        }\n\n        if (object.mapping) {\n          if (!Array.isArray(object.mapping)) throw TypeError(\".perftools.profiles.Profile.mapping: array expected\");\n          message.mapping = [];\n\n          for (var i = 0; i < object.mapping.length; ++i) {\n            if (typeof object.mapping[i] !== \"object\") throw TypeError(\".perftools.profiles.Profile.mapping: object expected\");\n            message.mapping[i] = $root.perftools.profiles.Mapping.fromObject(object.mapping[i]);\n          }\n        }\n\n        if (object.location) {\n          if (!Array.isArray(object.location)) throw TypeError(\".perftools.profiles.Profile.location: array expected\");\n          message.location = [];\n\n          for (var i = 0; i < object.location.length; ++i) {\n            if (typeof object.location[i] !== \"object\") throw TypeError(\".perftools.profiles.Profile.location: object expected\");\n            message.location[i] = $root.perftools.profiles.Location.fromObject(object.location[i]);\n          }\n        }\n\n        if (object[\"function\"]) {\n          if (!Array.isArray(object[\"function\"])) throw TypeError(\".perftools.profiles.Profile.function: array expected\");\n          message[\"function\"] = [];\n\n          for (var i = 0; i < object[\"function\"].length; ++i) {\n            if (typeof object[\"function\"][i] !== \"object\") throw TypeError(\".perftools.profiles.Profile.function: object expected\");\n            message[\"function\"][i] = $root.perftools.profiles.Function.fromObject(object[\"function\"][i]);\n          }\n        }\n\n        if (object.stringTable) {\n          if (!Array.isArray(object.stringTable)) throw TypeError(\".perftools.profiles.Profile.stringTable: array expected\");\n          message.stringTable = [];\n\n          for (var i = 0; i < object.stringTable.length; ++i) message.stringTable[i] = String(object.stringTable[i]);\n        }\n\n        if (object.dropFrames != null) if ($util.Long) (message.dropFrames = $util.Long.fromValue(object.dropFrames)).unsigned = false;else if (typeof object.dropFrames === \"string\") message.dropFrames = parseInt(object.dropFrames, 10);else if (typeof object.dropFrames === \"number\") message.dropFrames = object.dropFrames;else if (typeof object.dropFrames === \"object\") message.dropFrames = new $util.LongBits(object.dropFrames.low >>> 0, object.dropFrames.high >>> 0).toNumber();\n        if (object.keepFrames != null) if ($util.Long) (message.keepFrames = $util.Long.fromValue(object.keepFrames)).unsigned = false;else if (typeof object.keepFrames === \"string\") message.keepFrames = parseInt(object.keepFrames, 10);else if (typeof object.keepFrames === \"number\") message.keepFrames = object.keepFrames;else if (typeof object.keepFrames === \"object\") message.keepFrames = new $util.LongBits(object.keepFrames.low >>> 0, object.keepFrames.high >>> 0).toNumber();\n        if (object.timeNanos != null) if ($util.Long) (message.timeNanos = $util.Long.fromValue(object.timeNanos)).unsigned = false;else if (typeof object.timeNanos === \"string\") message.timeNanos = parseInt(object.timeNanos, 10);else if (typeof object.timeNanos === \"number\") message.timeNanos = object.timeNanos;else if (typeof object.timeNanos === \"object\") message.timeNanos = new $util.LongBits(object.timeNanos.low >>> 0, object.timeNanos.high >>> 0).toNumber();\n        if (object.durationNanos != null) if ($util.Long) (message.durationNanos = $util.Long.fromValue(object.durationNanos)).unsigned = false;else if (typeof object.durationNanos === \"string\") message.durationNanos = parseInt(object.durationNanos, 10);else if (typeof object.durationNanos === \"number\") message.durationNanos = object.durationNanos;else if (typeof object.durationNanos === \"object\") message.durationNanos = new $util.LongBits(object.durationNanos.low >>> 0, object.durationNanos.high >>> 0).toNumber();\n\n        if (object.periodType != null) {\n          if (typeof object.periodType !== \"object\") throw TypeError(\".perftools.profiles.Profile.periodType: object expected\");\n          message.periodType = $root.perftools.profiles.ValueType.fromObject(object.periodType);\n        }\n\n        if (object.period != null) if ($util.Long) (message.period = $util.Long.fromValue(object.period)).unsigned = false;else if (typeof object.period === \"string\") message.period = parseInt(object.period, 10);else if (typeof object.period === \"number\") message.period = object.period;else if (typeof object.period === \"object\") message.period = new $util.LongBits(object.period.low >>> 0, object.period.high >>> 0).toNumber();\n\n        if (object.comment) {\n          if (!Array.isArray(object.comment)) throw TypeError(\".perftools.profiles.Profile.comment: array expected\");\n          message.comment = [];\n\n          for (var i = 0; i < object.comment.length; ++i) if ($util.Long) (message.comment[i] = $util.Long.fromValue(object.comment[i])).unsigned = false;else if (typeof object.comment[i] === \"string\") message.comment[i] = parseInt(object.comment[i], 10);else if (typeof object.comment[i] === \"number\") message.comment[i] = object.comment[i];else if (typeof object.comment[i] === \"object\") message.comment[i] = new $util.LongBits(object.comment[i].low >>> 0, object.comment[i].high >>> 0).toNumber();\n        }\n\n        if (object.defaultSampleType != null) if ($util.Long) (message.defaultSampleType = $util.Long.fromValue(object.defaultSampleType)).unsigned = false;else if (typeof object.defaultSampleType === \"string\") message.defaultSampleType = parseInt(object.defaultSampleType, 10);else if (typeof object.defaultSampleType === \"number\") message.defaultSampleType = object.defaultSampleType;else if (typeof object.defaultSampleType === \"object\") message.defaultSampleType = new $util.LongBits(object.defaultSampleType.low >>> 0, object.defaultSampleType.high >>> 0).toNumber();\n        return message;\n      };\n      /**\n       * Creates a plain object from a Profile message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Profile\n       * @static\n       * @param {perftools.profiles.Profile} message Profile\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Profile.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.arrays || options.defaults) {\n          object.sampleType = [];\n          object.sample = [];\n          object.mapping = [];\n          object.location = [];\n          object[\"function\"] = [];\n          object.stringTable = [];\n          object.comment = [];\n        }\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.dropFrames = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.dropFrames = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.keepFrames = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.keepFrames = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.timeNanos = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.timeNanos = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.durationNanos = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.durationNanos = options.longs === String ? \"0\" : 0;\n\n          object.periodType = null;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.period = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.defaultSampleType = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.defaultSampleType = options.longs === String ? \"0\" : 0;\n        }\n\n        if (message.sampleType && message.sampleType.length) {\n          object.sampleType = [];\n\n          for (var j = 0; j < message.sampleType.length; ++j) object.sampleType[j] = $root.perftools.profiles.ValueType.toObject(message.sampleType[j], options);\n        }\n\n        if (message.sample && message.sample.length) {\n          object.sample = [];\n\n          for (var j = 0; j < message.sample.length; ++j) object.sample[j] = $root.perftools.profiles.Sample.toObject(message.sample[j], options);\n        }\n\n        if (message.mapping && message.mapping.length) {\n          object.mapping = [];\n\n          for (var j = 0; j < message.mapping.length; ++j) object.mapping[j] = $root.perftools.profiles.Mapping.toObject(message.mapping[j], options);\n        }\n\n        if (message.location && message.location.length) {\n          object.location = [];\n\n          for (var j = 0; j < message.location.length; ++j) object.location[j] = $root.perftools.profiles.Location.toObject(message.location[j], options);\n        }\n\n        if (message[\"function\"] && message[\"function\"].length) {\n          object[\"function\"] = [];\n\n          for (var j = 0; j < message[\"function\"].length; ++j) object[\"function\"][j] = $root.perftools.profiles.Function.toObject(message[\"function\"][j], options);\n        }\n\n        if (message.stringTable && message.stringTable.length) {\n          object.stringTable = [];\n\n          for (var j = 0; j < message.stringTable.length; ++j) object.stringTable[j] = message.stringTable[j];\n        }\n\n        if (message.dropFrames != null && message.hasOwnProperty(\"dropFrames\")) if (typeof message.dropFrames === \"number\") object.dropFrames = options.longs === String ? String(message.dropFrames) : message.dropFrames;else object.dropFrames = options.longs === String ? $util.Long.prototype.toString.call(message.dropFrames) : options.longs === Number ? new $util.LongBits(message.dropFrames.low >>> 0, message.dropFrames.high >>> 0).toNumber() : message.dropFrames;\n        if (message.keepFrames != null && message.hasOwnProperty(\"keepFrames\")) if (typeof message.keepFrames === \"number\") object.keepFrames = options.longs === String ? String(message.keepFrames) : message.keepFrames;else object.keepFrames = options.longs === String ? $util.Long.prototype.toString.call(message.keepFrames) : options.longs === Number ? new $util.LongBits(message.keepFrames.low >>> 0, message.keepFrames.high >>> 0).toNumber() : message.keepFrames;\n        if (message.timeNanos != null && message.hasOwnProperty(\"timeNanos\")) if (typeof message.timeNanos === \"number\") object.timeNanos = options.longs === String ? String(message.timeNanos) : message.timeNanos;else object.timeNanos = options.longs === String ? $util.Long.prototype.toString.call(message.timeNanos) : options.longs === Number ? new $util.LongBits(message.timeNanos.low >>> 0, message.timeNanos.high >>> 0).toNumber() : message.timeNanos;\n        if (message.durationNanos != null && message.hasOwnProperty(\"durationNanos\")) if (typeof message.durationNanos === \"number\") object.durationNanos = options.longs === String ? String(message.durationNanos) : message.durationNanos;else object.durationNanos = options.longs === String ? $util.Long.prototype.toString.call(message.durationNanos) : options.longs === Number ? new $util.LongBits(message.durationNanos.low >>> 0, message.durationNanos.high >>> 0).toNumber() : message.durationNanos;\n        if (message.periodType != null && message.hasOwnProperty(\"periodType\")) object.periodType = $root.perftools.profiles.ValueType.toObject(message.periodType, options);\n        if (message.period != null && message.hasOwnProperty(\"period\")) if (typeof message.period === \"number\") object.period = options.longs === String ? String(message.period) : message.period;else object.period = options.longs === String ? $util.Long.prototype.toString.call(message.period) : options.longs === Number ? new $util.LongBits(message.period.low >>> 0, message.period.high >>> 0).toNumber() : message.period;\n\n        if (message.comment && message.comment.length) {\n          object.comment = [];\n\n          for (var j = 0; j < message.comment.length; ++j) if (typeof message.comment[j] === \"number\") object.comment[j] = options.longs === String ? String(message.comment[j]) : message.comment[j];else object.comment[j] = options.longs === String ? $util.Long.prototype.toString.call(message.comment[j]) : options.longs === Number ? new $util.LongBits(message.comment[j].low >>> 0, message.comment[j].high >>> 0).toNumber() : message.comment[j];\n        }\n\n        if (message.defaultSampleType != null && message.hasOwnProperty(\"defaultSampleType\")) if (typeof message.defaultSampleType === \"number\") object.defaultSampleType = options.longs === String ? String(message.defaultSampleType) : message.defaultSampleType;else object.defaultSampleType = options.longs === String ? $util.Long.prototype.toString.call(message.defaultSampleType) : options.longs === Number ? new $util.LongBits(message.defaultSampleType.low >>> 0, message.defaultSampleType.high >>> 0).toNumber() : message.defaultSampleType;\n        return object;\n      };\n      /**\n       * Converts this Profile to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Profile\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Profile.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Profile;\n    }();\n\n    profiles.ValueType = function () {\n      /**\n       * Properties of a ValueType.\n       * @memberof perftools.profiles\n       * @interface IValueType\n       * @property {number|Long} [type] ValueType type\n       * @property {number|Long} [unit] ValueType unit\n       */\n\n      /**\n       * Constructs a new ValueType.\n       * @memberof perftools.profiles\n       * @classdesc Represents a ValueType.\n       * @constructor\n       * @param {perftools.profiles.IValueType=} [properties] Properties to set\n       */\n      function ValueType(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * ValueType type.\n       * @member {number|Long}type\n       * @memberof perftools.profiles.ValueType\n       * @instance\n       */\n\n\n      ValueType.prototype.type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * ValueType unit.\n       * @member {number|Long}unit\n       * @memberof perftools.profiles.ValueType\n       * @instance\n       */\n\n      ValueType.prototype.unit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Creates a new ValueType instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {perftools.profiles.IValueType=} [properties] Properties to set\n       * @returns {perftools.profiles.ValueType} ValueType instance\n       */\n\n      ValueType.create = function create(properties) {\n        return new ValueType(properties);\n      };\n      /**\n       * Encodes the specified ValueType message. Does not implicitly {@link perftools.profiles.ValueType.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {perftools.profiles.IValueType} message ValueType message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ValueType.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.type != null && message.hasOwnProperty(\"type\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).int64(message.type);\n        if (message.unit != null && message.hasOwnProperty(\"unit\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int64(message.unit);\n        return writer;\n      };\n      /**\n       * Encodes the specified ValueType message, length delimited. Does not implicitly {@link perftools.profiles.ValueType.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {perftools.profiles.IValueType} message ValueType message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ValueType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a ValueType message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.ValueType} ValueType\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ValueType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.ValueType();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.type = reader.int64();\n              break;\n\n            case 2:\n              message.unit = reader.int64();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a ValueType message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.ValueType} ValueType\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ValueType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a ValueType message.\n       * @function verify\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ValueType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\")) if (!$util.isInteger(message.type) && !(message.type && $util.isInteger(message.type.low) && $util.isInteger(message.type.high))) return \"type: integer|Long expected\";\n        if (message.unit != null && message.hasOwnProperty(\"unit\")) if (!$util.isInteger(message.unit) && !(message.unit && $util.isInteger(message.unit.low) && $util.isInteger(message.unit.high))) return \"unit: integer|Long expected\";\n        return null;\n      };\n      /**\n       * Creates a ValueType message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.ValueType} ValueType\n       */\n\n\n      ValueType.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.ValueType) return object;\n        var message = new $root.perftools.profiles.ValueType();\n        if (object.type != null) if ($util.Long) (message.type = $util.Long.fromValue(object.type)).unsigned = false;else if (typeof object.type === \"string\") message.type = parseInt(object.type, 10);else if (typeof object.type === \"number\") message.type = object.type;else if (typeof object.type === \"object\") message.type = new $util.LongBits(object.type.low >>> 0, object.type.high >>> 0).toNumber();\n        if (object.unit != null) if ($util.Long) (message.unit = $util.Long.fromValue(object.unit)).unsigned = false;else if (typeof object.unit === \"string\") message.unit = parseInt(object.unit, 10);else if (typeof object.unit === \"number\") message.unit = object.unit;else if (typeof object.unit === \"object\") message.unit = new $util.LongBits(object.unit.low >>> 0, object.unit.high >>> 0).toNumber();\n        return message;\n      };\n      /**\n       * Creates a plain object from a ValueType message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.ValueType\n       * @static\n       * @param {perftools.profiles.ValueType} message ValueType\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ValueType.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.type = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.type = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.unit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.unit = options.longs === String ? \"0\" : 0;\n        }\n\n        if (message.type != null && message.hasOwnProperty(\"type\")) if (typeof message.type === \"number\") object.type = options.longs === String ? String(message.type) : message.type;else object.type = options.longs === String ? $util.Long.prototype.toString.call(message.type) : options.longs === Number ? new $util.LongBits(message.type.low >>> 0, message.type.high >>> 0).toNumber() : message.type;\n        if (message.unit != null && message.hasOwnProperty(\"unit\")) if (typeof message.unit === \"number\") object.unit = options.longs === String ? String(message.unit) : message.unit;else object.unit = options.longs === String ? $util.Long.prototype.toString.call(message.unit) : options.longs === Number ? new $util.LongBits(message.unit.low >>> 0, message.unit.high >>> 0).toNumber() : message.unit;\n        return object;\n      };\n      /**\n       * Converts this ValueType to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.ValueType\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ValueType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ValueType;\n    }();\n\n    profiles.Sample = function () {\n      /**\n       * Properties of a Sample.\n       * @memberof perftools.profiles\n       * @interface ISample\n       * @property {Array.<number|Long>} [locationId] Sample locationId\n       * @property {Array.<number|Long>} [value] Sample value\n       * @property {Array.<perftools.profiles.ILabel>} [label] Sample label\n       */\n\n      /**\n       * Constructs a new Sample.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Sample.\n       * @constructor\n       * @param {perftools.profiles.ISample=} [properties] Properties to set\n       */\n      function Sample(properties) {\n        this.locationId = [];\n        this.value = [];\n        this.label = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Sample locationId.\n       * @member {Array.<number|Long>}locationId\n       * @memberof perftools.profiles.Sample\n       * @instance\n       */\n\n\n      Sample.prototype.locationId = $util.emptyArray;\n      /**\n       * Sample value.\n       * @member {Array.<number|Long>}value\n       * @memberof perftools.profiles.Sample\n       * @instance\n       */\n\n      Sample.prototype.value = $util.emptyArray;\n      /**\n       * Sample label.\n       * @member {Array.<perftools.profiles.ILabel>}label\n       * @memberof perftools.profiles.Sample\n       * @instance\n       */\n\n      Sample.prototype.label = $util.emptyArray;\n      /**\n       * Creates a new Sample instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {perftools.profiles.ISample=} [properties] Properties to set\n       * @returns {perftools.profiles.Sample} Sample instance\n       */\n\n      Sample.create = function create(properties) {\n        return new Sample(properties);\n      };\n      /**\n       * Encodes the specified Sample message. Does not implicitly {@link perftools.profiles.Sample.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {perftools.profiles.ISample} message Sample message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Sample.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n\n        if (message.locationId != null && message.locationId.length) {\n          writer.uint32(\n          /* id 1, wireType 2 =*/\n          10).fork();\n\n          for (var i = 0; i < message.locationId.length; ++i) writer.uint64(message.locationId[i]);\n\n          writer.ldelim();\n        }\n\n        if (message.value != null && message.value.length) {\n          writer.uint32(\n          /* id 2, wireType 2 =*/\n          18).fork();\n\n          for (var i = 0; i < message.value.length; ++i) writer.int64(message.value[i]);\n\n          writer.ldelim();\n        }\n\n        if (message.label != null && message.label.length) for (var i = 0; i < message.label.length; ++i) $root.perftools.profiles.Label.encode(message.label[i], writer.uint32(\n        /* id 3, wireType 2 =*/\n        26).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified Sample message, length delimited. Does not implicitly {@link perftools.profiles.Sample.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {perftools.profiles.ISample} message Sample message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Sample.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Sample message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Sample} Sample\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Sample.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Sample();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.locationId && message.locationId.length)) message.locationId = [];\n\n              if ((tag & 7) === 2) {\n                var end2 = reader.uint32() + reader.pos;\n\n                while (reader.pos < end2) message.locationId.push(reader.uint64());\n              } else message.locationId.push(reader.uint64());\n\n              break;\n\n            case 2:\n              if (!(message.value && message.value.length)) message.value = [];\n\n              if ((tag & 7) === 2) {\n                var end2 = reader.uint32() + reader.pos;\n\n                while (reader.pos < end2) message.value.push(reader.int64());\n              } else message.value.push(reader.int64());\n\n              break;\n\n            case 3:\n              if (!(message.label && message.label.length)) message.label = [];\n              message.label.push($root.perftools.profiles.Label.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Sample message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Sample} Sample\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Sample.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Sample message.\n       * @function verify\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Sample.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.locationId != null && message.hasOwnProperty(\"locationId\")) {\n          if (!Array.isArray(message.locationId)) return \"locationId: array expected\";\n\n          for (var i = 0; i < message.locationId.length; ++i) if (!$util.isInteger(message.locationId[i]) && !(message.locationId[i] && $util.isInteger(message.locationId[i].low) && $util.isInteger(message.locationId[i].high))) return \"locationId: integer|Long[] expected\";\n        }\n\n        if (message.value != null && message.hasOwnProperty(\"value\")) {\n          if (!Array.isArray(message.value)) return \"value: array expected\";\n\n          for (var i = 0; i < message.value.length; ++i) if (!$util.isInteger(message.value[i]) && !(message.value[i] && $util.isInteger(message.value[i].low) && $util.isInteger(message.value[i].high))) return \"value: integer|Long[] expected\";\n        }\n\n        if (message.label != null && message.hasOwnProperty(\"label\")) {\n          if (!Array.isArray(message.label)) return \"label: array expected\";\n\n          for (var i = 0; i < message.label.length; ++i) {\n            var error = $root.perftools.profiles.Label.verify(message.label[i]);\n            if (error) return \"label.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a Sample message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Sample} Sample\n       */\n\n\n      Sample.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Sample) return object;\n        var message = new $root.perftools.profiles.Sample();\n\n        if (object.locationId) {\n          if (!Array.isArray(object.locationId)) throw TypeError(\".perftools.profiles.Sample.locationId: array expected\");\n          message.locationId = [];\n\n          for (var i = 0; i < object.locationId.length; ++i) if ($util.Long) (message.locationId[i] = $util.Long.fromValue(object.locationId[i])).unsigned = true;else if (typeof object.locationId[i] === \"string\") message.locationId[i] = parseInt(object.locationId[i], 10);else if (typeof object.locationId[i] === \"number\") message.locationId[i] = object.locationId[i];else if (typeof object.locationId[i] === \"object\") message.locationId[i] = new $util.LongBits(object.locationId[i].low >>> 0, object.locationId[i].high >>> 0).toNumber(true);\n        }\n\n        if (object.value) {\n          if (!Array.isArray(object.value)) throw TypeError(\".perftools.profiles.Sample.value: array expected\");\n          message.value = [];\n\n          for (var i = 0; i < object.value.length; ++i) if ($util.Long) (message.value[i] = $util.Long.fromValue(object.value[i])).unsigned = false;else if (typeof object.value[i] === \"string\") message.value[i] = parseInt(object.value[i], 10);else if (typeof object.value[i] === \"number\") message.value[i] = object.value[i];else if (typeof object.value[i] === \"object\") message.value[i] = new $util.LongBits(object.value[i].low >>> 0, object.value[i].high >>> 0).toNumber();\n        }\n\n        if (object.label) {\n          if (!Array.isArray(object.label)) throw TypeError(\".perftools.profiles.Sample.label: array expected\");\n          message.label = [];\n\n          for (var i = 0; i < object.label.length; ++i) {\n            if (typeof object.label[i] !== \"object\") throw TypeError(\".perftools.profiles.Sample.label: object expected\");\n            message.label[i] = $root.perftools.profiles.Label.fromObject(object.label[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a Sample message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Sample\n       * @static\n       * @param {perftools.profiles.Sample} message Sample\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Sample.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.arrays || options.defaults) {\n          object.locationId = [];\n          object.value = [];\n          object.label = [];\n        }\n\n        if (message.locationId && message.locationId.length) {\n          object.locationId = [];\n\n          for (var j = 0; j < message.locationId.length; ++j) if (typeof message.locationId[j] === \"number\") object.locationId[j] = options.longs === String ? String(message.locationId[j]) : message.locationId[j];else object.locationId[j] = options.longs === String ? $util.Long.prototype.toString.call(message.locationId[j]) : options.longs === Number ? new $util.LongBits(message.locationId[j].low >>> 0, message.locationId[j].high >>> 0).toNumber(true) : message.locationId[j];\n        }\n\n        if (message.value && message.value.length) {\n          object.value = [];\n\n          for (var j = 0; j < message.value.length; ++j) if (typeof message.value[j] === \"number\") object.value[j] = options.longs === String ? String(message.value[j]) : message.value[j];else object.value[j] = options.longs === String ? $util.Long.prototype.toString.call(message.value[j]) : options.longs === Number ? new $util.LongBits(message.value[j].low >>> 0, message.value[j].high >>> 0).toNumber() : message.value[j];\n        }\n\n        if (message.label && message.label.length) {\n          object.label = [];\n\n          for (var j = 0; j < message.label.length; ++j) object.label[j] = $root.perftools.profiles.Label.toObject(message.label[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this Sample to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Sample\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Sample.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Sample;\n    }();\n\n    profiles.Label = function () {\n      /**\n       * Properties of a Label.\n       * @memberof perftools.profiles\n       * @interface ILabel\n       * @property {number|Long} [key] Label key\n       * @property {number|Long} [str] Label str\n       * @property {number|Long} [num] Label num\n       * @property {number|Long} [numUnit] Label numUnit\n       */\n\n      /**\n       * Constructs a new Label.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Label.\n       * @constructor\n       * @param {perftools.profiles.ILabel=} [properties] Properties to set\n       */\n      function Label(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Label key.\n       * @member {number|Long}key\n       * @memberof perftools.profiles.Label\n       * @instance\n       */\n\n\n      Label.prototype.key = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Label str.\n       * @member {number|Long}str\n       * @memberof perftools.profiles.Label\n       * @instance\n       */\n\n      Label.prototype.str = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Label num.\n       * @member {number|Long}num\n       * @memberof perftools.profiles.Label\n       * @instance\n       */\n\n      Label.prototype.num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Label numUnit.\n       * @member {number|Long}numUnit\n       * @memberof perftools.profiles.Label\n       * @instance\n       */\n\n      Label.prototype.numUnit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Creates a new Label instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {perftools.profiles.ILabel=} [properties] Properties to set\n       * @returns {perftools.profiles.Label} Label instance\n       */\n\n      Label.create = function create(properties) {\n        return new Label(properties);\n      };\n      /**\n       * Encodes the specified Label message. Does not implicitly {@link perftools.profiles.Label.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {perftools.profiles.ILabel} message Label message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Label.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).int64(message.key);\n        if (message.str != null && message.hasOwnProperty(\"str\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int64(message.str);\n        if (message.num != null && message.hasOwnProperty(\"num\")) writer.uint32(\n        /* id 3, wireType 0 =*/\n        24).int64(message.num);\n        if (message.numUnit != null && message.hasOwnProperty(\"numUnit\")) writer.uint32(\n        /* id 4, wireType 0 =*/\n        32).int64(message.numUnit);\n        return writer;\n      };\n      /**\n       * Encodes the specified Label message, length delimited. Does not implicitly {@link perftools.profiles.Label.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {perftools.profiles.ILabel} message Label message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Label.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Label message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Label} Label\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Label.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Label();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.key = reader.int64();\n              break;\n\n            case 2:\n              message.str = reader.int64();\n              break;\n\n            case 3:\n              message.num = reader.int64();\n              break;\n\n            case 4:\n              message.numUnit = reader.int64();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Label message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Label} Label\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Label.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Label message.\n       * @function verify\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Label.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\")) if (!$util.isInteger(message.key) && !(message.key && $util.isInteger(message.key.low) && $util.isInteger(message.key.high))) return \"key: integer|Long expected\";\n        if (message.str != null && message.hasOwnProperty(\"str\")) if (!$util.isInteger(message.str) && !(message.str && $util.isInteger(message.str.low) && $util.isInteger(message.str.high))) return \"str: integer|Long expected\";\n        if (message.num != null && message.hasOwnProperty(\"num\")) if (!$util.isInteger(message.num) && !(message.num && $util.isInteger(message.num.low) && $util.isInteger(message.num.high))) return \"num: integer|Long expected\";\n        if (message.numUnit != null && message.hasOwnProperty(\"numUnit\")) if (!$util.isInteger(message.numUnit) && !(message.numUnit && $util.isInteger(message.numUnit.low) && $util.isInteger(message.numUnit.high))) return \"numUnit: integer|Long expected\";\n        return null;\n      };\n      /**\n       * Creates a Label message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Label} Label\n       */\n\n\n      Label.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Label) return object;\n        var message = new $root.perftools.profiles.Label();\n        if (object.key != null) if ($util.Long) (message.key = $util.Long.fromValue(object.key)).unsigned = false;else if (typeof object.key === \"string\") message.key = parseInt(object.key, 10);else if (typeof object.key === \"number\") message.key = object.key;else if (typeof object.key === \"object\") message.key = new $util.LongBits(object.key.low >>> 0, object.key.high >>> 0).toNumber();\n        if (object.str != null) if ($util.Long) (message.str = $util.Long.fromValue(object.str)).unsigned = false;else if (typeof object.str === \"string\") message.str = parseInt(object.str, 10);else if (typeof object.str === \"number\") message.str = object.str;else if (typeof object.str === \"object\") message.str = new $util.LongBits(object.str.low >>> 0, object.str.high >>> 0).toNumber();\n        if (object.num != null) if ($util.Long) (message.num = $util.Long.fromValue(object.num)).unsigned = false;else if (typeof object.num === \"string\") message.num = parseInt(object.num, 10);else if (typeof object.num === \"number\") message.num = object.num;else if (typeof object.num === \"object\") message.num = new $util.LongBits(object.num.low >>> 0, object.num.high >>> 0).toNumber();\n        if (object.numUnit != null) if ($util.Long) (message.numUnit = $util.Long.fromValue(object.numUnit)).unsigned = false;else if (typeof object.numUnit === \"string\") message.numUnit = parseInt(object.numUnit, 10);else if (typeof object.numUnit === \"number\") message.numUnit = object.numUnit;else if (typeof object.numUnit === \"object\") message.numUnit = new $util.LongBits(object.numUnit.low >>> 0, object.numUnit.high >>> 0).toNumber();\n        return message;\n      };\n      /**\n       * Creates a plain object from a Label message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Label\n       * @static\n       * @param {perftools.profiles.Label} message Label\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Label.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.key = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.key = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.str = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.str = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.num = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.num = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.numUnit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.numUnit = options.longs === String ? \"0\" : 0;\n        }\n\n        if (message.key != null && message.hasOwnProperty(\"key\")) if (typeof message.key === \"number\") object.key = options.longs === String ? String(message.key) : message.key;else object.key = options.longs === String ? $util.Long.prototype.toString.call(message.key) : options.longs === Number ? new $util.LongBits(message.key.low >>> 0, message.key.high >>> 0).toNumber() : message.key;\n        if (message.str != null && message.hasOwnProperty(\"str\")) if (typeof message.str === \"number\") object.str = options.longs === String ? String(message.str) : message.str;else object.str = options.longs === String ? $util.Long.prototype.toString.call(message.str) : options.longs === Number ? new $util.LongBits(message.str.low >>> 0, message.str.high >>> 0).toNumber() : message.str;\n        if (message.num != null && message.hasOwnProperty(\"num\")) if (typeof message.num === \"number\") object.num = options.longs === String ? String(message.num) : message.num;else object.num = options.longs === String ? $util.Long.prototype.toString.call(message.num) : options.longs === Number ? new $util.LongBits(message.num.low >>> 0, message.num.high >>> 0).toNumber() : message.num;\n        if (message.numUnit != null && message.hasOwnProperty(\"numUnit\")) if (typeof message.numUnit === \"number\") object.numUnit = options.longs === String ? String(message.numUnit) : message.numUnit;else object.numUnit = options.longs === String ? $util.Long.prototype.toString.call(message.numUnit) : options.longs === Number ? new $util.LongBits(message.numUnit.low >>> 0, message.numUnit.high >>> 0).toNumber() : message.numUnit;\n        return object;\n      };\n      /**\n       * Converts this Label to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Label\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Label.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Label;\n    }();\n\n    profiles.Mapping = function () {\n      /**\n       * Properties of a Mapping.\n       * @memberof perftools.profiles\n       * @interface IMapping\n       * @property {number|Long} [id] Mapping id\n       * @property {number|Long} [memoryStart] Mapping memoryStart\n       * @property {number|Long} [memoryLimit] Mapping memoryLimit\n       * @property {number|Long} [fileOffset] Mapping fileOffset\n       * @property {number|Long} [filename] Mapping filename\n       * @property {number|Long} [buildId] Mapping buildId\n       * @property {boolean} [hasFunctions] Mapping hasFunctions\n       * @property {boolean} [hasFilenames] Mapping hasFilenames\n       * @property {boolean} [hasLineNumbers] Mapping hasLineNumbers\n       * @property {boolean} [hasInlineFrames] Mapping hasInlineFrames\n       */\n\n      /**\n       * Constructs a new Mapping.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Mapping.\n       * @constructor\n       * @param {perftools.profiles.IMapping=} [properties] Properties to set\n       */\n      function Mapping(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Mapping id.\n       * @member {number|Long}id\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n\n      Mapping.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Mapping memoryStart.\n       * @member {number|Long}memoryStart\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.memoryStart = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Mapping memoryLimit.\n       * @member {number|Long}memoryLimit\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.memoryLimit = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Mapping fileOffset.\n       * @member {number|Long}fileOffset\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.fileOffset = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Mapping filename.\n       * @member {number|Long}filename\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.filename = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Mapping buildId.\n       * @member {number|Long}buildId\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.buildId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Mapping hasFunctions.\n       * @member {boolean}hasFunctions\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.hasFunctions = false;\n      /**\n       * Mapping hasFilenames.\n       * @member {boolean}hasFilenames\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.hasFilenames = false;\n      /**\n       * Mapping hasLineNumbers.\n       * @member {boolean}hasLineNumbers\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.hasLineNumbers = false;\n      /**\n       * Mapping hasInlineFrames.\n       * @member {boolean}hasInlineFrames\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       */\n\n      Mapping.prototype.hasInlineFrames = false;\n      /**\n       * Creates a new Mapping instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {perftools.profiles.IMapping=} [properties] Properties to set\n       * @returns {perftools.profiles.Mapping} Mapping instance\n       */\n\n      Mapping.create = function create(properties) {\n        return new Mapping(properties);\n      };\n      /**\n       * Encodes the specified Mapping message. Does not implicitly {@link perftools.profiles.Mapping.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {perftools.profiles.IMapping} message Mapping message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Mapping.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.id != null && message.hasOwnProperty(\"id\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).uint64(message.id);\n        if (message.memoryStart != null && message.hasOwnProperty(\"memoryStart\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).uint64(message.memoryStart);\n        if (message.memoryLimit != null && message.hasOwnProperty(\"memoryLimit\")) writer.uint32(\n        /* id 3, wireType 0 =*/\n        24).uint64(message.memoryLimit);\n        if (message.fileOffset != null && message.hasOwnProperty(\"fileOffset\")) writer.uint32(\n        /* id 4, wireType 0 =*/\n        32).uint64(message.fileOffset);\n        if (message.filename != null && message.hasOwnProperty(\"filename\")) writer.uint32(\n        /* id 5, wireType 0 =*/\n        40).int64(message.filename);\n        if (message.buildId != null && message.hasOwnProperty(\"buildId\")) writer.uint32(\n        /* id 6, wireType 0 =*/\n        48).int64(message.buildId);\n        if (message.hasFunctions != null && message.hasOwnProperty(\"hasFunctions\")) writer.uint32(\n        /* id 7, wireType 0 =*/\n        56).bool(message.hasFunctions);\n        if (message.hasFilenames != null && message.hasOwnProperty(\"hasFilenames\")) writer.uint32(\n        /* id 8, wireType 0 =*/\n        64).bool(message.hasFilenames);\n        if (message.hasLineNumbers != null && message.hasOwnProperty(\"hasLineNumbers\")) writer.uint32(\n        /* id 9, wireType 0 =*/\n        72).bool(message.hasLineNumbers);\n        if (message.hasInlineFrames != null && message.hasOwnProperty(\"hasInlineFrames\")) writer.uint32(\n        /* id 10, wireType 0 =*/\n        80).bool(message.hasInlineFrames);\n        return writer;\n      };\n      /**\n       * Encodes the specified Mapping message, length delimited. Does not implicitly {@link perftools.profiles.Mapping.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {perftools.profiles.IMapping} message Mapping message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Mapping.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Mapping message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Mapping} Mapping\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Mapping.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Mapping();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.id = reader.uint64();\n              break;\n\n            case 2:\n              message.memoryStart = reader.uint64();\n              break;\n\n            case 3:\n              message.memoryLimit = reader.uint64();\n              break;\n\n            case 4:\n              message.fileOffset = reader.uint64();\n              break;\n\n            case 5:\n              message.filename = reader.int64();\n              break;\n\n            case 6:\n              message.buildId = reader.int64();\n              break;\n\n            case 7:\n              message.hasFunctions = reader.bool();\n              break;\n\n            case 8:\n              message.hasFilenames = reader.bool();\n              break;\n\n            case 9:\n              message.hasLineNumbers = reader.bool();\n              break;\n\n            case 10:\n              message.hasInlineFrames = reader.bool();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Mapping message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Mapping} Mapping\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Mapping.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Mapping message.\n       * @function verify\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Mapping.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return \"id: integer|Long expected\";\n        if (message.memoryStart != null && message.hasOwnProperty(\"memoryStart\")) if (!$util.isInteger(message.memoryStart) && !(message.memoryStart && $util.isInteger(message.memoryStart.low) && $util.isInteger(message.memoryStart.high))) return \"memoryStart: integer|Long expected\";\n        if (message.memoryLimit != null && message.hasOwnProperty(\"memoryLimit\")) if (!$util.isInteger(message.memoryLimit) && !(message.memoryLimit && $util.isInteger(message.memoryLimit.low) && $util.isInteger(message.memoryLimit.high))) return \"memoryLimit: integer|Long expected\";\n        if (message.fileOffset != null && message.hasOwnProperty(\"fileOffset\")) if (!$util.isInteger(message.fileOffset) && !(message.fileOffset && $util.isInteger(message.fileOffset.low) && $util.isInteger(message.fileOffset.high))) return \"fileOffset: integer|Long expected\";\n        if (message.filename != null && message.hasOwnProperty(\"filename\")) if (!$util.isInteger(message.filename) && !(message.filename && $util.isInteger(message.filename.low) && $util.isInteger(message.filename.high))) return \"filename: integer|Long expected\";\n        if (message.buildId != null && message.hasOwnProperty(\"buildId\")) if (!$util.isInteger(message.buildId) && !(message.buildId && $util.isInteger(message.buildId.low) && $util.isInteger(message.buildId.high))) return \"buildId: integer|Long expected\";\n        if (message.hasFunctions != null && message.hasOwnProperty(\"hasFunctions\")) if (typeof message.hasFunctions !== \"boolean\") return \"hasFunctions: boolean expected\";\n        if (message.hasFilenames != null && message.hasOwnProperty(\"hasFilenames\")) if (typeof message.hasFilenames !== \"boolean\") return \"hasFilenames: boolean expected\";\n        if (message.hasLineNumbers != null && message.hasOwnProperty(\"hasLineNumbers\")) if (typeof message.hasLineNumbers !== \"boolean\") return \"hasLineNumbers: boolean expected\";\n        if (message.hasInlineFrames != null && message.hasOwnProperty(\"hasInlineFrames\")) if (typeof message.hasInlineFrames !== \"boolean\") return \"hasInlineFrames: boolean expected\";\n        return null;\n      };\n      /**\n       * Creates a Mapping message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Mapping} Mapping\n       */\n\n\n      Mapping.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Mapping) return object;\n        var message = new $root.perftools.profiles.Mapping();\n        if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = true;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n        if (object.memoryStart != null) if ($util.Long) (message.memoryStart = $util.Long.fromValue(object.memoryStart)).unsigned = true;else if (typeof object.memoryStart === \"string\") message.memoryStart = parseInt(object.memoryStart, 10);else if (typeof object.memoryStart === \"number\") message.memoryStart = object.memoryStart;else if (typeof object.memoryStart === \"object\") message.memoryStart = new $util.LongBits(object.memoryStart.low >>> 0, object.memoryStart.high >>> 0).toNumber(true);\n        if (object.memoryLimit != null) if ($util.Long) (message.memoryLimit = $util.Long.fromValue(object.memoryLimit)).unsigned = true;else if (typeof object.memoryLimit === \"string\") message.memoryLimit = parseInt(object.memoryLimit, 10);else if (typeof object.memoryLimit === \"number\") message.memoryLimit = object.memoryLimit;else if (typeof object.memoryLimit === \"object\") message.memoryLimit = new $util.LongBits(object.memoryLimit.low >>> 0, object.memoryLimit.high >>> 0).toNumber(true);\n        if (object.fileOffset != null) if ($util.Long) (message.fileOffset = $util.Long.fromValue(object.fileOffset)).unsigned = true;else if (typeof object.fileOffset === \"string\") message.fileOffset = parseInt(object.fileOffset, 10);else if (typeof object.fileOffset === \"number\") message.fileOffset = object.fileOffset;else if (typeof object.fileOffset === \"object\") message.fileOffset = new $util.LongBits(object.fileOffset.low >>> 0, object.fileOffset.high >>> 0).toNumber(true);\n        if (object.filename != null) if ($util.Long) (message.filename = $util.Long.fromValue(object.filename)).unsigned = false;else if (typeof object.filename === \"string\") message.filename = parseInt(object.filename, 10);else if (typeof object.filename === \"number\") message.filename = object.filename;else if (typeof object.filename === \"object\") message.filename = new $util.LongBits(object.filename.low >>> 0, object.filename.high >>> 0).toNumber();\n        if (object.buildId != null) if ($util.Long) (message.buildId = $util.Long.fromValue(object.buildId)).unsigned = false;else if (typeof object.buildId === \"string\") message.buildId = parseInt(object.buildId, 10);else if (typeof object.buildId === \"number\") message.buildId = object.buildId;else if (typeof object.buildId === \"object\") message.buildId = new $util.LongBits(object.buildId.low >>> 0, object.buildId.high >>> 0).toNumber();\n        if (object.hasFunctions != null) message.hasFunctions = Boolean(object.hasFunctions);\n        if (object.hasFilenames != null) message.hasFilenames = Boolean(object.hasFilenames);\n        if (object.hasLineNumbers != null) message.hasLineNumbers = Boolean(object.hasLineNumbers);\n        if (object.hasInlineFrames != null) message.hasInlineFrames = Boolean(object.hasInlineFrames);\n        return message;\n      };\n      /**\n       * Creates a plain object from a Mapping message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Mapping\n       * @static\n       * @param {perftools.profiles.Mapping} message Mapping\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Mapping.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.id = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.memoryStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.memoryStart = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.memoryLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.memoryLimit = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.fileOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.fileOffset = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.filename = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.filename = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.buildId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.buildId = options.longs === String ? \"0\" : 0;\n\n          object.hasFunctions = false;\n          object.hasFilenames = false;\n          object.hasLineNumbers = false;\n          object.hasInlineFrames = false;\n        }\n\n        if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n        if (message.memoryStart != null && message.hasOwnProperty(\"memoryStart\")) if (typeof message.memoryStart === \"number\") object.memoryStart = options.longs === String ? String(message.memoryStart) : message.memoryStart;else object.memoryStart = options.longs === String ? $util.Long.prototype.toString.call(message.memoryStart) : options.longs === Number ? new $util.LongBits(message.memoryStart.low >>> 0, message.memoryStart.high >>> 0).toNumber(true) : message.memoryStart;\n        if (message.memoryLimit != null && message.hasOwnProperty(\"memoryLimit\")) if (typeof message.memoryLimit === \"number\") object.memoryLimit = options.longs === String ? String(message.memoryLimit) : message.memoryLimit;else object.memoryLimit = options.longs === String ? $util.Long.prototype.toString.call(message.memoryLimit) : options.longs === Number ? new $util.LongBits(message.memoryLimit.low >>> 0, message.memoryLimit.high >>> 0).toNumber(true) : message.memoryLimit;\n        if (message.fileOffset != null && message.hasOwnProperty(\"fileOffset\")) if (typeof message.fileOffset === \"number\") object.fileOffset = options.longs === String ? String(message.fileOffset) : message.fileOffset;else object.fileOffset = options.longs === String ? $util.Long.prototype.toString.call(message.fileOffset) : options.longs === Number ? new $util.LongBits(message.fileOffset.low >>> 0, message.fileOffset.high >>> 0).toNumber(true) : message.fileOffset;\n        if (message.filename != null && message.hasOwnProperty(\"filename\")) if (typeof message.filename === \"number\") object.filename = options.longs === String ? String(message.filename) : message.filename;else object.filename = options.longs === String ? $util.Long.prototype.toString.call(message.filename) : options.longs === Number ? new $util.LongBits(message.filename.low >>> 0, message.filename.high >>> 0).toNumber() : message.filename;\n        if (message.buildId != null && message.hasOwnProperty(\"buildId\")) if (typeof message.buildId === \"number\") object.buildId = options.longs === String ? String(message.buildId) : message.buildId;else object.buildId = options.longs === String ? $util.Long.prototype.toString.call(message.buildId) : options.longs === Number ? new $util.LongBits(message.buildId.low >>> 0, message.buildId.high >>> 0).toNumber() : message.buildId;\n        if (message.hasFunctions != null && message.hasOwnProperty(\"hasFunctions\")) object.hasFunctions = message.hasFunctions;\n        if (message.hasFilenames != null && message.hasOwnProperty(\"hasFilenames\")) object.hasFilenames = message.hasFilenames;\n        if (message.hasLineNumbers != null && message.hasOwnProperty(\"hasLineNumbers\")) object.hasLineNumbers = message.hasLineNumbers;\n        if (message.hasInlineFrames != null && message.hasOwnProperty(\"hasInlineFrames\")) object.hasInlineFrames = message.hasInlineFrames;\n        return object;\n      };\n      /**\n       * Converts this Mapping to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Mapping\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Mapping.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Mapping;\n    }();\n\n    profiles.Location = function () {\n      /**\n       * Properties of a Location.\n       * @memberof perftools.profiles\n       * @interface ILocation\n       * @property {number|Long} [id] Location id\n       * @property {number|Long} [mappingId] Location mappingId\n       * @property {number|Long} [address] Location address\n       * @property {Array.<perftools.profiles.ILine>} [line] Location line\n       */\n\n      /**\n       * Constructs a new Location.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Location.\n       * @constructor\n       * @param {perftools.profiles.ILocation=} [properties] Properties to set\n       */\n      function Location(properties) {\n        this.line = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Location id.\n       * @member {number|Long}id\n       * @memberof perftools.profiles.Location\n       * @instance\n       */\n\n\n      Location.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Location mappingId.\n       * @member {number|Long}mappingId\n       * @memberof perftools.profiles.Location\n       * @instance\n       */\n\n      Location.prototype.mappingId = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Location address.\n       * @member {number|Long}address\n       * @memberof perftools.profiles.Location\n       * @instance\n       */\n\n      Location.prototype.address = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Location line.\n       * @member {Array.<perftools.profiles.ILine>}line\n       * @memberof perftools.profiles.Location\n       * @instance\n       */\n\n      Location.prototype.line = $util.emptyArray;\n      /**\n       * Creates a new Location instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {perftools.profiles.ILocation=} [properties] Properties to set\n       * @returns {perftools.profiles.Location} Location instance\n       */\n\n      Location.create = function create(properties) {\n        return new Location(properties);\n      };\n      /**\n       * Encodes the specified Location message. Does not implicitly {@link perftools.profiles.Location.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {perftools.profiles.ILocation} message Location message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Location.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.id != null && message.hasOwnProperty(\"id\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).uint64(message.id);\n        if (message.mappingId != null && message.hasOwnProperty(\"mappingId\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).uint64(message.mappingId);\n        if (message.address != null && message.hasOwnProperty(\"address\")) writer.uint32(\n        /* id 3, wireType 0 =*/\n        24).uint64(message.address);\n        if (message.line != null && message.line.length) for (var i = 0; i < message.line.length; ++i) $root.perftools.profiles.Line.encode(message.line[i], writer.uint32(\n        /* id 4, wireType 2 =*/\n        34).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified Location message, length delimited. Does not implicitly {@link perftools.profiles.Location.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {perftools.profiles.ILocation} message Location message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Location.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Location message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Location} Location\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Location.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Location();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.id = reader.uint64();\n              break;\n\n            case 2:\n              message.mappingId = reader.uint64();\n              break;\n\n            case 3:\n              message.address = reader.uint64();\n              break;\n\n            case 4:\n              if (!(message.line && message.line.length)) message.line = [];\n              message.line.push($root.perftools.profiles.Line.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Location message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Location} Location\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Location.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Location message.\n       * @function verify\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Location.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return \"id: integer|Long expected\";\n        if (message.mappingId != null && message.hasOwnProperty(\"mappingId\")) if (!$util.isInteger(message.mappingId) && !(message.mappingId && $util.isInteger(message.mappingId.low) && $util.isInteger(message.mappingId.high))) return \"mappingId: integer|Long expected\";\n        if (message.address != null && message.hasOwnProperty(\"address\")) if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high))) return \"address: integer|Long expected\";\n\n        if (message.line != null && message.hasOwnProperty(\"line\")) {\n          if (!Array.isArray(message.line)) return \"line: array expected\";\n\n          for (var i = 0; i < message.line.length; ++i) {\n            var error = $root.perftools.profiles.Line.verify(message.line[i]);\n            if (error) return \"line.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a Location message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Location} Location\n       */\n\n\n      Location.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Location) return object;\n        var message = new $root.perftools.profiles.Location();\n        if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = true;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n        if (object.mappingId != null) if ($util.Long) (message.mappingId = $util.Long.fromValue(object.mappingId)).unsigned = true;else if (typeof object.mappingId === \"string\") message.mappingId = parseInt(object.mappingId, 10);else if (typeof object.mappingId === \"number\") message.mappingId = object.mappingId;else if (typeof object.mappingId === \"object\") message.mappingId = new $util.LongBits(object.mappingId.low >>> 0, object.mappingId.high >>> 0).toNumber(true);\n        if (object.address != null) if ($util.Long) (message.address = $util.Long.fromValue(object.address)).unsigned = true;else if (typeof object.address === \"string\") message.address = parseInt(object.address, 10);else if (typeof object.address === \"number\") message.address = object.address;else if (typeof object.address === \"object\") message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);\n\n        if (object.line) {\n          if (!Array.isArray(object.line)) throw TypeError(\".perftools.profiles.Location.line: array expected\");\n          message.line = [];\n\n          for (var i = 0; i < object.line.length; ++i) {\n            if (typeof object.line[i] !== \"object\") throw TypeError(\".perftools.profiles.Location.line: object expected\");\n            message.line[i] = $root.perftools.profiles.Line.fromObject(object.line[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a Location message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Location\n       * @static\n       * @param {perftools.profiles.Location} message Location\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Location.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.line = [];\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.id = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.mappingId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.mappingId = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.address = options.longs === String ? \"0\" : 0;\n        }\n\n        if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n        if (message.mappingId != null && message.hasOwnProperty(\"mappingId\")) if (typeof message.mappingId === \"number\") object.mappingId = options.longs === String ? String(message.mappingId) : message.mappingId;else object.mappingId = options.longs === String ? $util.Long.prototype.toString.call(message.mappingId) : options.longs === Number ? new $util.LongBits(message.mappingId.low >>> 0, message.mappingId.high >>> 0).toNumber(true) : message.mappingId;\n        if (message.address != null && message.hasOwnProperty(\"address\")) if (typeof message.address === \"number\") object.address = options.longs === String ? String(message.address) : message.address;else object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;\n\n        if (message.line && message.line.length) {\n          object.line = [];\n\n          for (var j = 0; j < message.line.length; ++j) object.line[j] = $root.perftools.profiles.Line.toObject(message.line[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this Location to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Location\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Location.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Location;\n    }();\n\n    profiles.Line = function () {\n      /**\n       * Properties of a Line.\n       * @memberof perftools.profiles\n       * @interface ILine\n       * @property {number|Long} [functionId] Line functionId\n       * @property {number|Long} [line] Line line\n       */\n\n      /**\n       * Constructs a new Line.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Line.\n       * @constructor\n       * @param {perftools.profiles.ILine=} [properties] Properties to set\n       */\n      function Line(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Line functionId.\n       * @member {number|Long}functionId\n       * @memberof perftools.profiles.Line\n       * @instance\n       */\n\n\n      Line.prototype.functionId = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Line line.\n       * @member {number|Long}line\n       * @memberof perftools.profiles.Line\n       * @instance\n       */\n\n      Line.prototype.line = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Creates a new Line instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {perftools.profiles.ILine=} [properties] Properties to set\n       * @returns {perftools.profiles.Line} Line instance\n       */\n\n      Line.create = function create(properties) {\n        return new Line(properties);\n      };\n      /**\n       * Encodes the specified Line message. Does not implicitly {@link perftools.profiles.Line.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {perftools.profiles.ILine} message Line message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Line.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.functionId != null && message.hasOwnProperty(\"functionId\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).uint64(message.functionId);\n        if (message.line != null && message.hasOwnProperty(\"line\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int64(message.line);\n        return writer;\n      };\n      /**\n       * Encodes the specified Line message, length delimited. Does not implicitly {@link perftools.profiles.Line.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {perftools.profiles.ILine} message Line message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Line.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Line message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Line} Line\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Line.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Line();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.functionId = reader.uint64();\n              break;\n\n            case 2:\n              message.line = reader.int64();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Line message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Line} Line\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Line.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Line message.\n       * @function verify\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Line.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.functionId != null && message.hasOwnProperty(\"functionId\")) if (!$util.isInteger(message.functionId) && !(message.functionId && $util.isInteger(message.functionId.low) && $util.isInteger(message.functionId.high))) return \"functionId: integer|Long expected\";\n        if (message.line != null && message.hasOwnProperty(\"line\")) if (!$util.isInteger(message.line) && !(message.line && $util.isInteger(message.line.low) && $util.isInteger(message.line.high))) return \"line: integer|Long expected\";\n        return null;\n      };\n      /**\n       * Creates a Line message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Line} Line\n       */\n\n\n      Line.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Line) return object;\n        var message = new $root.perftools.profiles.Line();\n        if (object.functionId != null) if ($util.Long) (message.functionId = $util.Long.fromValue(object.functionId)).unsigned = true;else if (typeof object.functionId === \"string\") message.functionId = parseInt(object.functionId, 10);else if (typeof object.functionId === \"number\") message.functionId = object.functionId;else if (typeof object.functionId === \"object\") message.functionId = new $util.LongBits(object.functionId.low >>> 0, object.functionId.high >>> 0).toNumber(true);\n        if (object.line != null) if ($util.Long) (message.line = $util.Long.fromValue(object.line)).unsigned = false;else if (typeof object.line === \"string\") message.line = parseInt(object.line, 10);else if (typeof object.line === \"number\") message.line = object.line;else if (typeof object.line === \"object\") message.line = new $util.LongBits(object.line.low >>> 0, object.line.high >>> 0).toNumber();\n        return message;\n      };\n      /**\n       * Creates a plain object from a Line message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Line\n       * @static\n       * @param {perftools.profiles.Line} message Line\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Line.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.functionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.functionId = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.line = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.line = options.longs === String ? \"0\" : 0;\n        }\n\n        if (message.functionId != null && message.hasOwnProperty(\"functionId\")) if (typeof message.functionId === \"number\") object.functionId = options.longs === String ? String(message.functionId) : message.functionId;else object.functionId = options.longs === String ? $util.Long.prototype.toString.call(message.functionId) : options.longs === Number ? new $util.LongBits(message.functionId.low >>> 0, message.functionId.high >>> 0).toNumber(true) : message.functionId;\n        if (message.line != null && message.hasOwnProperty(\"line\")) if (typeof message.line === \"number\") object.line = options.longs === String ? String(message.line) : message.line;else object.line = options.longs === String ? $util.Long.prototype.toString.call(message.line) : options.longs === Number ? new $util.LongBits(message.line.low >>> 0, message.line.high >>> 0).toNumber() : message.line;\n        return object;\n      };\n      /**\n       * Converts this Line to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Line\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Line.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Line;\n    }();\n\n    profiles.Function = function () {\n      /**\n       * Properties of a Function.\n       * @memberof perftools.profiles\n       * @interface IFunction\n       * @property {number|Long} [id] Function id\n       * @property {number|Long} [name] Function name\n       * @property {number|Long} [systemName] Function systemName\n       * @property {number|Long} [filename] Function filename\n       * @property {number|Long} [startLine] Function startLine\n       */\n\n      /**\n       * Constructs a new Function.\n       * @memberof perftools.profiles\n       * @classdesc Represents a Function.\n       * @constructor\n       * @param {perftools.profiles.IFunction=} [properties] Properties to set\n       */\n      function Function(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Function id.\n       * @member {number|Long}id\n       * @memberof perftools.profiles.Function\n       * @instance\n       */\n\n\n      Function.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * Function name.\n       * @member {number|Long}name\n       * @memberof perftools.profiles.Function\n       * @instance\n       */\n\n      Function.prototype.name = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Function systemName.\n       * @member {number|Long}systemName\n       * @memberof perftools.profiles.Function\n       * @instance\n       */\n\n      Function.prototype.systemName = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Function filename.\n       * @member {number|Long}filename\n       * @memberof perftools.profiles.Function\n       * @instance\n       */\n\n      Function.prototype.filename = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Function startLine.\n       * @member {number|Long}startLine\n       * @memberof perftools.profiles.Function\n       * @instance\n       */\n\n      Function.prototype.startLine = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Creates a new Function instance using the specified properties.\n       * @function create\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {perftools.profiles.IFunction=} [properties] Properties to set\n       * @returns {perftools.profiles.Function} Function instance\n       */\n\n      Function.create = function create(properties) {\n        return new Function(properties);\n      };\n      /**\n       * Encodes the specified Function message. Does not implicitly {@link perftools.profiles.Function.verify|verify} messages.\n       * @function encode\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {perftools.profiles.IFunction} message Function message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Function.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.id != null && message.hasOwnProperty(\"id\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).uint64(message.id);\n        if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int64(message.name);\n        if (message.systemName != null && message.hasOwnProperty(\"systemName\")) writer.uint32(\n        /* id 3, wireType 0 =*/\n        24).int64(message.systemName);\n        if (message.filename != null && message.hasOwnProperty(\"filename\")) writer.uint32(\n        /* id 4, wireType 0 =*/\n        32).int64(message.filename);\n        if (message.startLine != null && message.hasOwnProperty(\"startLine\")) writer.uint32(\n        /* id 5, wireType 0 =*/\n        40).int64(message.startLine);\n        return writer;\n      };\n      /**\n       * Encodes the specified Function message, length delimited. Does not implicitly {@link perftools.profiles.Function.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {perftools.profiles.IFunction} message Function message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Function.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Function message from the specified reader or buffer.\n       * @function decode\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {perftools.profiles.Function} Function\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Function.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.perftools.profiles.Function();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.id = reader.uint64();\n              break;\n\n            case 2:\n              message.name = reader.int64();\n              break;\n\n            case 3:\n              message.systemName = reader.int64();\n              break;\n\n            case 4:\n              message.filename = reader.int64();\n              break;\n\n            case 5:\n              message.startLine = reader.int64();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Function message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {perftools.profiles.Function} Function\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Function.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Function message.\n       * @function verify\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Function.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return \"id: integer|Long expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isInteger(message.name) && !(message.name && $util.isInteger(message.name.low) && $util.isInteger(message.name.high))) return \"name: integer|Long expected\";\n        if (message.systemName != null && message.hasOwnProperty(\"systemName\")) if (!$util.isInteger(message.systemName) && !(message.systemName && $util.isInteger(message.systemName.low) && $util.isInteger(message.systemName.high))) return \"systemName: integer|Long expected\";\n        if (message.filename != null && message.hasOwnProperty(\"filename\")) if (!$util.isInteger(message.filename) && !(message.filename && $util.isInteger(message.filename.low) && $util.isInteger(message.filename.high))) return \"filename: integer|Long expected\";\n        if (message.startLine != null && message.hasOwnProperty(\"startLine\")) if (!$util.isInteger(message.startLine) && !(message.startLine && $util.isInteger(message.startLine.low) && $util.isInteger(message.startLine.high))) return \"startLine: integer|Long expected\";\n        return null;\n      };\n      /**\n       * Creates a Function message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {perftools.profiles.Function} Function\n       */\n\n\n      Function.fromObject = function fromObject(object) {\n        if (object instanceof $root.perftools.profiles.Function) return object;\n        var message = new $root.perftools.profiles.Function();\n        if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = true;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n        if (object.name != null) if ($util.Long) (message.name = $util.Long.fromValue(object.name)).unsigned = false;else if (typeof object.name === \"string\") message.name = parseInt(object.name, 10);else if (typeof object.name === \"number\") message.name = object.name;else if (typeof object.name === \"object\") message.name = new $util.LongBits(object.name.low >>> 0, object.name.high >>> 0).toNumber();\n        if (object.systemName != null) if ($util.Long) (message.systemName = $util.Long.fromValue(object.systemName)).unsigned = false;else if (typeof object.systemName === \"string\") message.systemName = parseInt(object.systemName, 10);else if (typeof object.systemName === \"number\") message.systemName = object.systemName;else if (typeof object.systemName === \"object\") message.systemName = new $util.LongBits(object.systemName.low >>> 0, object.systemName.high >>> 0).toNumber();\n        if (object.filename != null) if ($util.Long) (message.filename = $util.Long.fromValue(object.filename)).unsigned = false;else if (typeof object.filename === \"string\") message.filename = parseInt(object.filename, 10);else if (typeof object.filename === \"number\") message.filename = object.filename;else if (typeof object.filename === \"object\") message.filename = new $util.LongBits(object.filename.low >>> 0, object.filename.high >>> 0).toNumber();\n        if (object.startLine != null) if ($util.Long) (message.startLine = $util.Long.fromValue(object.startLine)).unsigned = false;else if (typeof object.startLine === \"string\") message.startLine = parseInt(object.startLine, 10);else if (typeof object.startLine === \"number\") message.startLine = object.startLine;else if (typeof object.startLine === \"object\") message.startLine = new $util.LongBits(object.startLine.low >>> 0, object.startLine.high >>> 0).toNumber();\n        return message;\n      };\n      /**\n       * Creates a plain object from a Function message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof perftools.profiles.Function\n       * @static\n       * @param {perftools.profiles.Function} message Function\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Function.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.id = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.name = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.name = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.systemName = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.systemName = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.filename = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.filename = options.longs === String ? \"0\" : 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.startLine = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.startLine = options.longs === String ? \"0\" : 0;\n        }\n\n        if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n        if (message.name != null && message.hasOwnProperty(\"name\")) if (typeof message.name === \"number\") object.name = options.longs === String ? String(message.name) : message.name;else object.name = options.longs === String ? $util.Long.prototype.toString.call(message.name) : options.longs === Number ? new $util.LongBits(message.name.low >>> 0, message.name.high >>> 0).toNumber() : message.name;\n        if (message.systemName != null && message.hasOwnProperty(\"systemName\")) if (typeof message.systemName === \"number\") object.systemName = options.longs === String ? String(message.systemName) : message.systemName;else object.systemName = options.longs === String ? $util.Long.prototype.toString.call(message.systemName) : options.longs === Number ? new $util.LongBits(message.systemName.low >>> 0, message.systemName.high >>> 0).toNumber() : message.systemName;\n        if (message.filename != null && message.hasOwnProperty(\"filename\")) if (typeof message.filename === \"number\") object.filename = options.longs === String ? String(message.filename) : message.filename;else object.filename = options.longs === String ? $util.Long.prototype.toString.call(message.filename) : options.longs === Number ? new $util.LongBits(message.filename.low >>> 0, message.filename.high >>> 0).toNumber() : message.filename;\n        if (message.startLine != null && message.hasOwnProperty(\"startLine\")) if (typeof message.startLine === \"number\") object.startLine = options.longs === String ? String(message.startLine) : message.startLine;else object.startLine = options.longs === String ? $util.Long.prototype.toString.call(message.startLine) : options.longs === Number ? new $util.LongBits(message.startLine.low >>> 0, message.startLine.high >>> 0).toNumber() : message.startLine;\n        return object;\n      };\n      /**\n       * Converts this Function to JSON.\n       * @function toJSON\n       * @memberof perftools.profiles.Function\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Function.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Function;\n    }();\n\n    return profiles;\n  }();\n\n  return perftools;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/@datadog/pprof/proto/profile.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","perftools","profiles","Profile","properties","sampleType","sample","mapping","location","stringTable","comment","keys","Object","i","length","prototype","emptyArray","dropFrames","Long","fromBits","keepFrames","timeNanos","durationNanos","periodType","period","defaultSampleType","create","encode","message","writer","ValueType","uint32","fork","ldelim","Sample","Mapping","Location","Function","string","hasOwnProperty","int64","encodeDelimited","decode","reader","end","undefined","len","pos","tag","push","end2","skipType","decodeDelimited","verify","Array","isArray","error","isString","isInteger","low","high","fromObject","object","TypeError","String","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","arrays","defaults","long","longs","toString","Number","j","call","toJSON","constructor","toJSONOptions","type","unit","locationId","value","label","uint64","Label","key","str","num","numUnit","id","memoryStart","memoryLimit","fileOffset","filename","buildId","hasFunctions","hasFilenames","hasLineNumbers","hasInlineFrames","bool","Boolean","line","mappingId","address","Line","functionId","name","systemName","startLine","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.perftools = (function() {\n\n    /**\n     * Namespace perftools.\n     * @exports perftools\n     * @namespace\n     */\n    var perftools = {};\n\n    perftools.profiles = (function() {\n\n        /**\n         * Namespace profiles.\n         * @memberof perftools\n         * @namespace\n         */\n        var profiles = {};\n\n        profiles.Profile = (function() {\n\n            /**\n             * Properties of a Profile.\n             * @memberof perftools.profiles\n             * @interface IProfile\n             * @property {Array.<perftools.profiles.IValueType>} [sampleType] Profile sampleType\n             * @property {Array.<perftools.profiles.ISample>} [sample] Profile sample\n             * @property {Array.<perftools.profiles.IMapping>} [mapping] Profile mapping\n             * @property {Array.<perftools.profiles.ILocation>} [location] Profile location\n             * @property {Array.<perftools.profiles.IFunction>} [\"function\"] Profile function\n             * @property {Array.<string>} [stringTable] Profile stringTable\n             * @property {number|Long} [dropFrames] Profile dropFrames\n             * @property {number|Long} [keepFrames] Profile keepFrames\n             * @property {number|Long} [timeNanos] Profile timeNanos\n             * @property {number|Long} [durationNanos] Profile durationNanos\n             * @property {perftools.profiles.IValueType} [periodType] Profile periodType\n             * @property {number|Long} [period] Profile period\n             * @property {Array.<number|Long>} [comment] Profile comment\n             * @property {number|Long} [defaultSampleType] Profile defaultSampleType\n             */\n\n            /**\n             * Constructs a new Profile.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Profile.\n             * @constructor\n             * @param {perftools.profiles.IProfile=} [properties] Properties to set\n             */\n            function Profile(properties) {\n                this.sampleType = [];\n                this.sample = [];\n                this.mapping = [];\n                this.location = [];\n                this[\"function\"] = [];\n                this.stringTable = [];\n                this.comment = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Profile sampleType.\n             * @member {Array.<perftools.profiles.IValueType>}sampleType\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.sampleType = $util.emptyArray;\n\n            /**\n             * Profile sample.\n             * @member {Array.<perftools.profiles.ISample>}sample\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.sample = $util.emptyArray;\n\n            /**\n             * Profile mapping.\n             * @member {Array.<perftools.profiles.IMapping>}mapping\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.mapping = $util.emptyArray;\n\n            /**\n             * Profile location.\n             * @member {Array.<perftools.profiles.ILocation>}location\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.location = $util.emptyArray;\n\n            /**\n             * Profile function.\n             * @member {Array.<perftools.profiles.IFunction>}function_\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype[\"function\"] = $util.emptyArray;\n\n            /**\n             * Profile stringTable.\n             * @member {Array.<string>}stringTable\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.stringTable = $util.emptyArray;\n\n            /**\n             * Profile dropFrames.\n             * @member {number|Long}dropFrames\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.dropFrames = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Profile keepFrames.\n             * @member {number|Long}keepFrames\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.keepFrames = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Profile timeNanos.\n             * @member {number|Long}timeNanos\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.timeNanos = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Profile durationNanos.\n             * @member {number|Long}durationNanos\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.durationNanos = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Profile periodType.\n             * @member {(perftools.profiles.IValueType|null|undefined)}periodType\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.periodType = null;\n\n            /**\n             * Profile period.\n             * @member {number|Long}period\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.period = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Profile comment.\n             * @member {Array.<number|Long>}comment\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.comment = $util.emptyArray;\n\n            /**\n             * Profile defaultSampleType.\n             * @member {number|Long}defaultSampleType\n             * @memberof perftools.profiles.Profile\n             * @instance\n             */\n            Profile.prototype.defaultSampleType = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Profile instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {perftools.profiles.IProfile=} [properties] Properties to set\n             * @returns {perftools.profiles.Profile} Profile instance\n             */\n            Profile.create = function create(properties) {\n                return new Profile(properties);\n            };\n\n            /**\n             * Encodes the specified Profile message. Does not implicitly {@link perftools.profiles.Profile.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {perftools.profiles.IProfile} message Profile message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Profile.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.sampleType != null && message.sampleType.length)\n                    for (var i = 0; i < message.sampleType.length; ++i)\n                        $root.perftools.profiles.ValueType.encode(message.sampleType[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.sample != null && message.sample.length)\n                    for (var i = 0; i < message.sample.length; ++i)\n                        $root.perftools.profiles.Sample.encode(message.sample[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.mapping != null && message.mapping.length)\n                    for (var i = 0; i < message.mapping.length; ++i)\n                        $root.perftools.profiles.Mapping.encode(message.mapping[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.location != null && message.location.length)\n                    for (var i = 0; i < message.location.length; ++i)\n                        $root.perftools.profiles.Location.encode(message.location[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                if (message[\"function\"] != null && message[\"function\"].length)\n                    for (var i = 0; i < message[\"function\"].length; ++i)\n                        $root.perftools.profiles.Function.encode(message[\"function\"][i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.stringTable != null && message.stringTable.length)\n                    for (var i = 0; i < message.stringTable.length; ++i)\n                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.stringTable[i]);\n                if (message.dropFrames != null && message.hasOwnProperty(\"dropFrames\"))\n                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.dropFrames);\n                if (message.keepFrames != null && message.hasOwnProperty(\"keepFrames\"))\n                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.keepFrames);\n                if (message.timeNanos != null && message.hasOwnProperty(\"timeNanos\"))\n                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.timeNanos);\n                if (message.durationNanos != null && message.hasOwnProperty(\"durationNanos\"))\n                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.durationNanos);\n                if (message.periodType != null && message.hasOwnProperty(\"periodType\"))\n                    $root.perftools.profiles.ValueType.encode(message.periodType, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                if (message.period != null && message.hasOwnProperty(\"period\"))\n                    writer.uint32(/* id 12, wireType 0 =*/96).int64(message.period);\n                if (message.comment != null && message.comment.length) {\n                    writer.uint32(/* id 13, wireType 2 =*/106).fork();\n                    for (var i = 0; i < message.comment.length; ++i)\n                        writer.int64(message.comment[i]);\n                    writer.ldelim();\n                }\n                if (message.defaultSampleType != null && message.hasOwnProperty(\"defaultSampleType\"))\n                    writer.uint32(/* id 14, wireType 0 =*/112).int64(message.defaultSampleType);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Profile message, length delimited. Does not implicitly {@link perftools.profiles.Profile.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {perftools.profiles.IProfile} message Profile message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Profile.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Profile message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Profile} Profile\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Profile.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Profile();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.sampleType && message.sampleType.length))\n                            message.sampleType = [];\n                        message.sampleType.push($root.perftools.profiles.ValueType.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        if (!(message.sample && message.sample.length))\n                            message.sample = [];\n                        message.sample.push($root.perftools.profiles.Sample.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        if (!(message.mapping && message.mapping.length))\n                            message.mapping = [];\n                        message.mapping.push($root.perftools.profiles.Mapping.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        if (!(message.location && message.location.length))\n                            message.location = [];\n                        message.location.push($root.perftools.profiles.Location.decode(reader, reader.uint32()));\n                        break;\n                    case 5:\n                        if (!(message[\"function\"] && message[\"function\"].length))\n                            message[\"function\"] = [];\n                        message[\"function\"].push($root.perftools.profiles.Function.decode(reader, reader.uint32()));\n                        break;\n                    case 6:\n                        if (!(message.stringTable && message.stringTable.length))\n                            message.stringTable = [];\n                        message.stringTable.push(reader.string());\n                        break;\n                    case 7:\n                        message.dropFrames = reader.int64();\n                        break;\n                    case 8:\n                        message.keepFrames = reader.int64();\n                        break;\n                    case 9:\n                        message.timeNanos = reader.int64();\n                        break;\n                    case 10:\n                        message.durationNanos = reader.int64();\n                        break;\n                    case 11:\n                        message.periodType = $root.perftools.profiles.ValueType.decode(reader, reader.uint32());\n                        break;\n                    case 12:\n                        message.period = reader.int64();\n                        break;\n                    case 13:\n                        if (!(message.comment && message.comment.length))\n                            message.comment = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.comment.push(reader.int64());\n                        } else\n                            message.comment.push(reader.int64());\n                        break;\n                    case 14:\n                        message.defaultSampleType = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Profile message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Profile} Profile\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Profile.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Profile message.\n             * @function verify\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Profile.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.sampleType != null && message.hasOwnProperty(\"sampleType\")) {\n                    if (!Array.isArray(message.sampleType))\n                        return \"sampleType: array expected\";\n                    for (var i = 0; i < message.sampleType.length; ++i) {\n                        var error = $root.perftools.profiles.ValueType.verify(message.sampleType[i]);\n                        if (error)\n                            return \"sampleType.\" + error;\n                    }\n                }\n                if (message.sample != null && message.hasOwnProperty(\"sample\")) {\n                    if (!Array.isArray(message.sample))\n                        return \"sample: array expected\";\n                    for (var i = 0; i < message.sample.length; ++i) {\n                        error = $root.perftools.profiles.Sample.verify(message.sample[i]);\n                        if (error)\n                            return \"sample.\" + error;\n                    }\n                }\n                if (message.mapping != null && message.hasOwnProperty(\"mapping\")) {\n                    if (!Array.isArray(message.mapping))\n                        return \"mapping: array expected\";\n                    for (var i = 0; i < message.mapping.length; ++i) {\n                        error = $root.perftools.profiles.Mapping.verify(message.mapping[i]);\n                        if (error)\n                            return \"mapping.\" + error;\n                    }\n                }\n                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                    if (!Array.isArray(message.location))\n                        return \"location: array expected\";\n                    for (var i = 0; i < message.location.length; ++i) {\n                        error = $root.perftools.profiles.Location.verify(message.location[i]);\n                        if (error)\n                            return \"location.\" + error;\n                    }\n                }\n                if (message[\"function\"] != null && message.hasOwnProperty(\"function\")) {\n                    if (!Array.isArray(message[\"function\"]))\n                        return \"function: array expected\";\n                    for (var i = 0; i < message[\"function\"].length; ++i) {\n                        error = $root.perftools.profiles.Function.verify(message[\"function\"][i]);\n                        if (error)\n                            return \"function.\" + error;\n                    }\n                }\n                if (message.stringTable != null && message.hasOwnProperty(\"stringTable\")) {\n                    if (!Array.isArray(message.stringTable))\n                        return \"stringTable: array expected\";\n                    for (var i = 0; i < message.stringTable.length; ++i)\n                        if (!$util.isString(message.stringTable[i]))\n                            return \"stringTable: string[] expected\";\n                }\n                if (message.dropFrames != null && message.hasOwnProperty(\"dropFrames\"))\n                    if (!$util.isInteger(message.dropFrames) && !(message.dropFrames && $util.isInteger(message.dropFrames.low) && $util.isInteger(message.dropFrames.high)))\n                        return \"dropFrames: integer|Long expected\";\n                if (message.keepFrames != null && message.hasOwnProperty(\"keepFrames\"))\n                    if (!$util.isInteger(message.keepFrames) && !(message.keepFrames && $util.isInteger(message.keepFrames.low) && $util.isInteger(message.keepFrames.high)))\n                        return \"keepFrames: integer|Long expected\";\n                if (message.timeNanos != null && message.hasOwnProperty(\"timeNanos\"))\n                    if (!$util.isInteger(message.timeNanos) && !(message.timeNanos && $util.isInteger(message.timeNanos.low) && $util.isInteger(message.timeNanos.high)))\n                        return \"timeNanos: integer|Long expected\";\n                if (message.durationNanos != null && message.hasOwnProperty(\"durationNanos\"))\n                    if (!$util.isInteger(message.durationNanos) && !(message.durationNanos && $util.isInteger(message.durationNanos.low) && $util.isInteger(message.durationNanos.high)))\n                        return \"durationNanos: integer|Long expected\";\n                if (message.periodType != null && message.hasOwnProperty(\"periodType\")) {\n                    error = $root.perftools.profiles.ValueType.verify(message.periodType);\n                    if (error)\n                        return \"periodType.\" + error;\n                }\n                if (message.period != null && message.hasOwnProperty(\"period\"))\n                    if (!$util.isInteger(message.period) && !(message.period && $util.isInteger(message.period.low) && $util.isInteger(message.period.high)))\n                        return \"period: integer|Long expected\";\n                if (message.comment != null && message.hasOwnProperty(\"comment\")) {\n                    if (!Array.isArray(message.comment))\n                        return \"comment: array expected\";\n                    for (var i = 0; i < message.comment.length; ++i)\n                        if (!$util.isInteger(message.comment[i]) && !(message.comment[i] && $util.isInteger(message.comment[i].low) && $util.isInteger(message.comment[i].high)))\n                            return \"comment: integer|Long[] expected\";\n                }\n                if (message.defaultSampleType != null && message.hasOwnProperty(\"defaultSampleType\"))\n                    if (!$util.isInteger(message.defaultSampleType) && !(message.defaultSampleType && $util.isInteger(message.defaultSampleType.low) && $util.isInteger(message.defaultSampleType.high)))\n                        return \"defaultSampleType: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Profile message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Profile} Profile\n             */\n            Profile.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Profile)\n                    return object;\n                var message = new $root.perftools.profiles.Profile();\n                if (object.sampleType) {\n                    if (!Array.isArray(object.sampleType))\n                        throw TypeError(\".perftools.profiles.Profile.sampleType: array expected\");\n                    message.sampleType = [];\n                    for (var i = 0; i < object.sampleType.length; ++i) {\n                        if (typeof object.sampleType[i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Profile.sampleType: object expected\");\n                        message.sampleType[i] = $root.perftools.profiles.ValueType.fromObject(object.sampleType[i]);\n                    }\n                }\n                if (object.sample) {\n                    if (!Array.isArray(object.sample))\n                        throw TypeError(\".perftools.profiles.Profile.sample: array expected\");\n                    message.sample = [];\n                    for (var i = 0; i < object.sample.length; ++i) {\n                        if (typeof object.sample[i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Profile.sample: object expected\");\n                        message.sample[i] = $root.perftools.profiles.Sample.fromObject(object.sample[i]);\n                    }\n                }\n                if (object.mapping) {\n                    if (!Array.isArray(object.mapping))\n                        throw TypeError(\".perftools.profiles.Profile.mapping: array expected\");\n                    message.mapping = [];\n                    for (var i = 0; i < object.mapping.length; ++i) {\n                        if (typeof object.mapping[i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Profile.mapping: object expected\");\n                        message.mapping[i] = $root.perftools.profiles.Mapping.fromObject(object.mapping[i]);\n                    }\n                }\n                if (object.location) {\n                    if (!Array.isArray(object.location))\n                        throw TypeError(\".perftools.profiles.Profile.location: array expected\");\n                    message.location = [];\n                    for (var i = 0; i < object.location.length; ++i) {\n                        if (typeof object.location[i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Profile.location: object expected\");\n                        message.location[i] = $root.perftools.profiles.Location.fromObject(object.location[i]);\n                    }\n                }\n                if (object[\"function\"]) {\n                    if (!Array.isArray(object[\"function\"]))\n                        throw TypeError(\".perftools.profiles.Profile.function: array expected\");\n                    message[\"function\"] = [];\n                    for (var i = 0; i < object[\"function\"].length; ++i) {\n                        if (typeof object[\"function\"][i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Profile.function: object expected\");\n                        message[\"function\"][i] = $root.perftools.profiles.Function.fromObject(object[\"function\"][i]);\n                    }\n                }\n                if (object.stringTable) {\n                    if (!Array.isArray(object.stringTable))\n                        throw TypeError(\".perftools.profiles.Profile.stringTable: array expected\");\n                    message.stringTable = [];\n                    for (var i = 0; i < object.stringTable.length; ++i)\n                        message.stringTable[i] = String(object.stringTable[i]);\n                }\n                if (object.dropFrames != null)\n                    if ($util.Long)\n                        (message.dropFrames = $util.Long.fromValue(object.dropFrames)).unsigned = false;\n                    else if (typeof object.dropFrames === \"string\")\n                        message.dropFrames = parseInt(object.dropFrames, 10);\n                    else if (typeof object.dropFrames === \"number\")\n                        message.dropFrames = object.dropFrames;\n                    else if (typeof object.dropFrames === \"object\")\n                        message.dropFrames = new $util.LongBits(object.dropFrames.low >>> 0, object.dropFrames.high >>> 0).toNumber();\n                if (object.keepFrames != null)\n                    if ($util.Long)\n                        (message.keepFrames = $util.Long.fromValue(object.keepFrames)).unsigned = false;\n                    else if (typeof object.keepFrames === \"string\")\n                        message.keepFrames = parseInt(object.keepFrames, 10);\n                    else if (typeof object.keepFrames === \"number\")\n                        message.keepFrames = object.keepFrames;\n                    else if (typeof object.keepFrames === \"object\")\n                        message.keepFrames = new $util.LongBits(object.keepFrames.low >>> 0, object.keepFrames.high >>> 0).toNumber();\n                if (object.timeNanos != null)\n                    if ($util.Long)\n                        (message.timeNanos = $util.Long.fromValue(object.timeNanos)).unsigned = false;\n                    else if (typeof object.timeNanos === \"string\")\n                        message.timeNanos = parseInt(object.timeNanos, 10);\n                    else if (typeof object.timeNanos === \"number\")\n                        message.timeNanos = object.timeNanos;\n                    else if (typeof object.timeNanos === \"object\")\n                        message.timeNanos = new $util.LongBits(object.timeNanos.low >>> 0, object.timeNanos.high >>> 0).toNumber();\n                if (object.durationNanos != null)\n                    if ($util.Long)\n                        (message.durationNanos = $util.Long.fromValue(object.durationNanos)).unsigned = false;\n                    else if (typeof object.durationNanos === \"string\")\n                        message.durationNanos = parseInt(object.durationNanos, 10);\n                    else if (typeof object.durationNanos === \"number\")\n                        message.durationNanos = object.durationNanos;\n                    else if (typeof object.durationNanos === \"object\")\n                        message.durationNanos = new $util.LongBits(object.durationNanos.low >>> 0, object.durationNanos.high >>> 0).toNumber();\n                if (object.periodType != null) {\n                    if (typeof object.periodType !== \"object\")\n                        throw TypeError(\".perftools.profiles.Profile.periodType: object expected\");\n                    message.periodType = $root.perftools.profiles.ValueType.fromObject(object.periodType);\n                }\n                if (object.period != null)\n                    if ($util.Long)\n                        (message.period = $util.Long.fromValue(object.period)).unsigned = false;\n                    else if (typeof object.period === \"string\")\n                        message.period = parseInt(object.period, 10);\n                    else if (typeof object.period === \"number\")\n                        message.period = object.period;\n                    else if (typeof object.period === \"object\")\n                        message.period = new $util.LongBits(object.period.low >>> 0, object.period.high >>> 0).toNumber();\n                if (object.comment) {\n                    if (!Array.isArray(object.comment))\n                        throw TypeError(\".perftools.profiles.Profile.comment: array expected\");\n                    message.comment = [];\n                    for (var i = 0; i < object.comment.length; ++i)\n                        if ($util.Long)\n                            (message.comment[i] = $util.Long.fromValue(object.comment[i])).unsigned = false;\n                        else if (typeof object.comment[i] === \"string\")\n                            message.comment[i] = parseInt(object.comment[i], 10);\n                        else if (typeof object.comment[i] === \"number\")\n                            message.comment[i] = object.comment[i];\n                        else if (typeof object.comment[i] === \"object\")\n                            message.comment[i] = new $util.LongBits(object.comment[i].low >>> 0, object.comment[i].high >>> 0).toNumber();\n                }\n                if (object.defaultSampleType != null)\n                    if ($util.Long)\n                        (message.defaultSampleType = $util.Long.fromValue(object.defaultSampleType)).unsigned = false;\n                    else if (typeof object.defaultSampleType === \"string\")\n                        message.defaultSampleType = parseInt(object.defaultSampleType, 10);\n                    else if (typeof object.defaultSampleType === \"number\")\n                        message.defaultSampleType = object.defaultSampleType;\n                    else if (typeof object.defaultSampleType === \"object\")\n                        message.defaultSampleType = new $util.LongBits(object.defaultSampleType.low >>> 0, object.defaultSampleType.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Profile message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Profile\n             * @static\n             * @param {perftools.profiles.Profile} message Profile\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Profile.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.sampleType = [];\n                    object.sample = [];\n                    object.mapping = [];\n                    object.location = [];\n                    object[\"function\"] = [];\n                    object.stringTable = [];\n                    object.comment = [];\n                }\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.dropFrames = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.dropFrames = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.keepFrames = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.keepFrames = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.timeNanos = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.timeNanos = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.durationNanos = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.durationNanos = options.longs === String ? \"0\" : 0;\n                    object.periodType = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.period = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.defaultSampleType = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.defaultSampleType = options.longs === String ? \"0\" : 0;\n                }\n                if (message.sampleType && message.sampleType.length) {\n                    object.sampleType = [];\n                    for (var j = 0; j < message.sampleType.length; ++j)\n                        object.sampleType[j] = $root.perftools.profiles.ValueType.toObject(message.sampleType[j], options);\n                }\n                if (message.sample && message.sample.length) {\n                    object.sample = [];\n                    for (var j = 0; j < message.sample.length; ++j)\n                        object.sample[j] = $root.perftools.profiles.Sample.toObject(message.sample[j], options);\n                }\n                if (message.mapping && message.mapping.length) {\n                    object.mapping = [];\n                    for (var j = 0; j < message.mapping.length; ++j)\n                        object.mapping[j] = $root.perftools.profiles.Mapping.toObject(message.mapping[j], options);\n                }\n                if (message.location && message.location.length) {\n                    object.location = [];\n                    for (var j = 0; j < message.location.length; ++j)\n                        object.location[j] = $root.perftools.profiles.Location.toObject(message.location[j], options);\n                }\n                if (message[\"function\"] && message[\"function\"].length) {\n                    object[\"function\"] = [];\n                    for (var j = 0; j < message[\"function\"].length; ++j)\n                        object[\"function\"][j] = $root.perftools.profiles.Function.toObject(message[\"function\"][j], options);\n                }\n                if (message.stringTable && message.stringTable.length) {\n                    object.stringTable = [];\n                    for (var j = 0; j < message.stringTable.length; ++j)\n                        object.stringTable[j] = message.stringTable[j];\n                }\n                if (message.dropFrames != null && message.hasOwnProperty(\"dropFrames\"))\n                    if (typeof message.dropFrames === \"number\")\n                        object.dropFrames = options.longs === String ? String(message.dropFrames) : message.dropFrames;\n                    else\n                        object.dropFrames = options.longs === String ? $util.Long.prototype.toString.call(message.dropFrames) : options.longs === Number ? new $util.LongBits(message.dropFrames.low >>> 0, message.dropFrames.high >>> 0).toNumber() : message.dropFrames;\n                if (message.keepFrames != null && message.hasOwnProperty(\"keepFrames\"))\n                    if (typeof message.keepFrames === \"number\")\n                        object.keepFrames = options.longs === String ? String(message.keepFrames) : message.keepFrames;\n                    else\n                        object.keepFrames = options.longs === String ? $util.Long.prototype.toString.call(message.keepFrames) : options.longs === Number ? new $util.LongBits(message.keepFrames.low >>> 0, message.keepFrames.high >>> 0).toNumber() : message.keepFrames;\n                if (message.timeNanos != null && message.hasOwnProperty(\"timeNanos\"))\n                    if (typeof message.timeNanos === \"number\")\n                        object.timeNanos = options.longs === String ? String(message.timeNanos) : message.timeNanos;\n                    else\n                        object.timeNanos = options.longs === String ? $util.Long.prototype.toString.call(message.timeNanos) : options.longs === Number ? new $util.LongBits(message.timeNanos.low >>> 0, message.timeNanos.high >>> 0).toNumber() : message.timeNanos;\n                if (message.durationNanos != null && message.hasOwnProperty(\"durationNanos\"))\n                    if (typeof message.durationNanos === \"number\")\n                        object.durationNanos = options.longs === String ? String(message.durationNanos) : message.durationNanos;\n                    else\n                        object.durationNanos = options.longs === String ? $util.Long.prototype.toString.call(message.durationNanos) : options.longs === Number ? new $util.LongBits(message.durationNanos.low >>> 0, message.durationNanos.high >>> 0).toNumber() : message.durationNanos;\n                if (message.periodType != null && message.hasOwnProperty(\"periodType\"))\n                    object.periodType = $root.perftools.profiles.ValueType.toObject(message.periodType, options);\n                if (message.period != null && message.hasOwnProperty(\"period\"))\n                    if (typeof message.period === \"number\")\n                        object.period = options.longs === String ? String(message.period) : message.period;\n                    else\n                        object.period = options.longs === String ? $util.Long.prototype.toString.call(message.period) : options.longs === Number ? new $util.LongBits(message.period.low >>> 0, message.period.high >>> 0).toNumber() : message.period;\n                if (message.comment && message.comment.length) {\n                    object.comment = [];\n                    for (var j = 0; j < message.comment.length; ++j)\n                        if (typeof message.comment[j] === \"number\")\n                            object.comment[j] = options.longs === String ? String(message.comment[j]) : message.comment[j];\n                        else\n                            object.comment[j] = options.longs === String ? $util.Long.prototype.toString.call(message.comment[j]) : options.longs === Number ? new $util.LongBits(message.comment[j].low >>> 0, message.comment[j].high >>> 0).toNumber() : message.comment[j];\n                }\n                if (message.defaultSampleType != null && message.hasOwnProperty(\"defaultSampleType\"))\n                    if (typeof message.defaultSampleType === \"number\")\n                        object.defaultSampleType = options.longs === String ? String(message.defaultSampleType) : message.defaultSampleType;\n                    else\n                        object.defaultSampleType = options.longs === String ? $util.Long.prototype.toString.call(message.defaultSampleType) : options.longs === Number ? new $util.LongBits(message.defaultSampleType.low >>> 0, message.defaultSampleType.high >>> 0).toNumber() : message.defaultSampleType;\n                return object;\n            };\n\n            /**\n             * Converts this Profile to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Profile\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Profile.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Profile;\n        })();\n\n        profiles.ValueType = (function() {\n\n            /**\n             * Properties of a ValueType.\n             * @memberof perftools.profiles\n             * @interface IValueType\n             * @property {number|Long} [type] ValueType type\n             * @property {number|Long} [unit] ValueType unit\n             */\n\n            /**\n             * Constructs a new ValueType.\n             * @memberof perftools.profiles\n             * @classdesc Represents a ValueType.\n             * @constructor\n             * @param {perftools.profiles.IValueType=} [properties] Properties to set\n             */\n            function ValueType(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ValueType type.\n             * @member {number|Long}type\n             * @memberof perftools.profiles.ValueType\n             * @instance\n             */\n            ValueType.prototype.type = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * ValueType unit.\n             * @member {number|Long}unit\n             * @memberof perftools.profiles.ValueType\n             * @instance\n             */\n            ValueType.prototype.unit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new ValueType instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {perftools.profiles.IValueType=} [properties] Properties to set\n             * @returns {perftools.profiles.ValueType} ValueType instance\n             */\n            ValueType.create = function create(properties) {\n                return new ValueType(properties);\n            };\n\n            /**\n             * Encodes the specified ValueType message. Does not implicitly {@link perftools.profiles.ValueType.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {perftools.profiles.IValueType} message ValueType message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ValueType.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.type != null && message.hasOwnProperty(\"type\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.type);\n                if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.unit);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ValueType message, length delimited. Does not implicitly {@link perftools.profiles.ValueType.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {perftools.profiles.IValueType} message ValueType message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ValueType.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ValueType message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.ValueType} ValueType\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ValueType.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.ValueType();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.type = reader.int64();\n                        break;\n                    case 2:\n                        message.unit = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ValueType message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.ValueType} ValueType\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ValueType.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ValueType message.\n             * @function verify\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ValueType.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.type != null && message.hasOwnProperty(\"type\"))\n                    if (!$util.isInteger(message.type) && !(message.type && $util.isInteger(message.type.low) && $util.isInteger(message.type.high)))\n                        return \"type: integer|Long expected\";\n                if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                    if (!$util.isInteger(message.unit) && !(message.unit && $util.isInteger(message.unit.low) && $util.isInteger(message.unit.high)))\n                        return \"unit: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a ValueType message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.ValueType} ValueType\n             */\n            ValueType.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.ValueType)\n                    return object;\n                var message = new $root.perftools.profiles.ValueType();\n                if (object.type != null)\n                    if ($util.Long)\n                        (message.type = $util.Long.fromValue(object.type)).unsigned = false;\n                    else if (typeof object.type === \"string\")\n                        message.type = parseInt(object.type, 10);\n                    else if (typeof object.type === \"number\")\n                        message.type = object.type;\n                    else if (typeof object.type === \"object\")\n                        message.type = new $util.LongBits(object.type.low >>> 0, object.type.high >>> 0).toNumber();\n                if (object.unit != null)\n                    if ($util.Long)\n                        (message.unit = $util.Long.fromValue(object.unit)).unsigned = false;\n                    else if (typeof object.unit === \"string\")\n                        message.unit = parseInt(object.unit, 10);\n                    else if (typeof object.unit === \"number\")\n                        message.unit = object.unit;\n                    else if (typeof object.unit === \"object\")\n                        message.unit = new $util.LongBits(object.unit.low >>> 0, object.unit.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ValueType message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.ValueType\n             * @static\n             * @param {perftools.profiles.ValueType} message ValueType\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ValueType.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.type = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.type = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.unit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.unit = options.longs === String ? \"0\" : 0;\n                }\n                if (message.type != null && message.hasOwnProperty(\"type\"))\n                    if (typeof message.type === \"number\")\n                        object.type = options.longs === String ? String(message.type) : message.type;\n                    else\n                        object.type = options.longs === String ? $util.Long.prototype.toString.call(message.type) : options.longs === Number ? new $util.LongBits(message.type.low >>> 0, message.type.high >>> 0).toNumber() : message.type;\n                if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                    if (typeof message.unit === \"number\")\n                        object.unit = options.longs === String ? String(message.unit) : message.unit;\n                    else\n                        object.unit = options.longs === String ? $util.Long.prototype.toString.call(message.unit) : options.longs === Number ? new $util.LongBits(message.unit.low >>> 0, message.unit.high >>> 0).toNumber() : message.unit;\n                return object;\n            };\n\n            /**\n             * Converts this ValueType to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.ValueType\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ValueType.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ValueType;\n        })();\n\n        profiles.Sample = (function() {\n\n            /**\n             * Properties of a Sample.\n             * @memberof perftools.profiles\n             * @interface ISample\n             * @property {Array.<number|Long>} [locationId] Sample locationId\n             * @property {Array.<number|Long>} [value] Sample value\n             * @property {Array.<perftools.profiles.ILabel>} [label] Sample label\n             */\n\n            /**\n             * Constructs a new Sample.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Sample.\n             * @constructor\n             * @param {perftools.profiles.ISample=} [properties] Properties to set\n             */\n            function Sample(properties) {\n                this.locationId = [];\n                this.value = [];\n                this.label = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sample locationId.\n             * @member {Array.<number|Long>}locationId\n             * @memberof perftools.profiles.Sample\n             * @instance\n             */\n            Sample.prototype.locationId = $util.emptyArray;\n\n            /**\n             * Sample value.\n             * @member {Array.<number|Long>}value\n             * @memberof perftools.profiles.Sample\n             * @instance\n             */\n            Sample.prototype.value = $util.emptyArray;\n\n            /**\n             * Sample label.\n             * @member {Array.<perftools.profiles.ILabel>}label\n             * @memberof perftools.profiles.Sample\n             * @instance\n             */\n            Sample.prototype.label = $util.emptyArray;\n\n            /**\n             * Creates a new Sample instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {perftools.profiles.ISample=} [properties] Properties to set\n             * @returns {perftools.profiles.Sample} Sample instance\n             */\n            Sample.create = function create(properties) {\n                return new Sample(properties);\n            };\n\n            /**\n             * Encodes the specified Sample message. Does not implicitly {@link perftools.profiles.Sample.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {perftools.profiles.ISample} message Sample message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sample.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.locationId != null && message.locationId.length) {\n                    writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                    for (var i = 0; i < message.locationId.length; ++i)\n                        writer.uint64(message.locationId[i]);\n                    writer.ldelim();\n                }\n                if (message.value != null && message.value.length) {\n                    writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                    for (var i = 0; i < message.value.length; ++i)\n                        writer.int64(message.value[i]);\n                    writer.ldelim();\n                }\n                if (message.label != null && message.label.length)\n                    for (var i = 0; i < message.label.length; ++i)\n                        $root.perftools.profiles.Label.encode(message.label[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sample message, length delimited. Does not implicitly {@link perftools.profiles.Sample.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {perftools.profiles.ISample} message Sample message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sample.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sample message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Sample} Sample\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sample.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Sample();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.locationId && message.locationId.length))\n                            message.locationId = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.locationId.push(reader.uint64());\n                        } else\n                            message.locationId.push(reader.uint64());\n                        break;\n                    case 2:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.value.push(reader.int64());\n                        } else\n                            message.value.push(reader.int64());\n                        break;\n                    case 3:\n                        if (!(message.label && message.label.length))\n                            message.label = [];\n                        message.label.push($root.perftools.profiles.Label.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sample message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Sample} Sample\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sample.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sample message.\n             * @function verify\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sample.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.locationId != null && message.hasOwnProperty(\"locationId\")) {\n                    if (!Array.isArray(message.locationId))\n                        return \"locationId: array expected\";\n                    for (var i = 0; i < message.locationId.length; ++i)\n                        if (!$util.isInteger(message.locationId[i]) && !(message.locationId[i] && $util.isInteger(message.locationId[i].low) && $util.isInteger(message.locationId[i].high)))\n                            return \"locationId: integer|Long[] expected\";\n                }\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i)\n                        if (!$util.isInteger(message.value[i]) && !(message.value[i] && $util.isInteger(message.value[i].low) && $util.isInteger(message.value[i].high)))\n                            return \"value: integer|Long[] expected\";\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\")) {\n                    if (!Array.isArray(message.label))\n                        return \"label: array expected\";\n                    for (var i = 0; i < message.label.length; ++i) {\n                        var error = $root.perftools.profiles.Label.verify(message.label[i]);\n                        if (error)\n                            return \"label.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sample message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Sample} Sample\n             */\n            Sample.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Sample)\n                    return object;\n                var message = new $root.perftools.profiles.Sample();\n                if (object.locationId) {\n                    if (!Array.isArray(object.locationId))\n                        throw TypeError(\".perftools.profiles.Sample.locationId: array expected\");\n                    message.locationId = [];\n                    for (var i = 0; i < object.locationId.length; ++i)\n                        if ($util.Long)\n                            (message.locationId[i] = $util.Long.fromValue(object.locationId[i])).unsigned = true;\n                        else if (typeof object.locationId[i] === \"string\")\n                            message.locationId[i] = parseInt(object.locationId[i], 10);\n                        else if (typeof object.locationId[i] === \"number\")\n                            message.locationId[i] = object.locationId[i];\n                        else if (typeof object.locationId[i] === \"object\")\n                            message.locationId[i] = new $util.LongBits(object.locationId[i].low >>> 0, object.locationId[i].high >>> 0).toNumber(true);\n                }\n                if (object.value) {\n                    if (!Array.isArray(object.value))\n                        throw TypeError(\".perftools.profiles.Sample.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i)\n                        if ($util.Long)\n                            (message.value[i] = $util.Long.fromValue(object.value[i])).unsigned = false;\n                        else if (typeof object.value[i] === \"string\")\n                            message.value[i] = parseInt(object.value[i], 10);\n                        else if (typeof object.value[i] === \"number\")\n                            message.value[i] = object.value[i];\n                        else if (typeof object.value[i] === \"object\")\n                            message.value[i] = new $util.LongBits(object.value[i].low >>> 0, object.value[i].high >>> 0).toNumber();\n                }\n                if (object.label) {\n                    if (!Array.isArray(object.label))\n                        throw TypeError(\".perftools.profiles.Sample.label: array expected\");\n                    message.label = [];\n                    for (var i = 0; i < object.label.length; ++i) {\n                        if (typeof object.label[i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Sample.label: object expected\");\n                        message.label[i] = $root.perftools.profiles.Label.fromObject(object.label[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sample message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Sample\n             * @static\n             * @param {perftools.profiles.Sample} message Sample\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sample.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.locationId = [];\n                    object.value = [];\n                    object.label = [];\n                }\n                if (message.locationId && message.locationId.length) {\n                    object.locationId = [];\n                    for (var j = 0; j < message.locationId.length; ++j)\n                        if (typeof message.locationId[j] === \"number\")\n                            object.locationId[j] = options.longs === String ? String(message.locationId[j]) : message.locationId[j];\n                        else\n                            object.locationId[j] = options.longs === String ? $util.Long.prototype.toString.call(message.locationId[j]) : options.longs === Number ? new $util.LongBits(message.locationId[j].low >>> 0, message.locationId[j].high >>> 0).toNumber(true) : message.locationId[j];\n                }\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        if (typeof message.value[j] === \"number\")\n                            object.value[j] = options.longs === String ? String(message.value[j]) : message.value[j];\n                        else\n                            object.value[j] = options.longs === String ? $util.Long.prototype.toString.call(message.value[j]) : options.longs === Number ? new $util.LongBits(message.value[j].low >>> 0, message.value[j].high >>> 0).toNumber() : message.value[j];\n                }\n                if (message.label && message.label.length) {\n                    object.label = [];\n                    for (var j = 0; j < message.label.length; ++j)\n                        object.label[j] = $root.perftools.profiles.Label.toObject(message.label[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Sample to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Sample\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sample.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Sample;\n        })();\n\n        profiles.Label = (function() {\n\n            /**\n             * Properties of a Label.\n             * @memberof perftools.profiles\n             * @interface ILabel\n             * @property {number|Long} [key] Label key\n             * @property {number|Long} [str] Label str\n             * @property {number|Long} [num] Label num\n             * @property {number|Long} [numUnit] Label numUnit\n             */\n\n            /**\n             * Constructs a new Label.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Label.\n             * @constructor\n             * @param {perftools.profiles.ILabel=} [properties] Properties to set\n             */\n            function Label(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Label key.\n             * @member {number|Long}key\n             * @memberof perftools.profiles.Label\n             * @instance\n             */\n            Label.prototype.key = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Label str.\n             * @member {number|Long}str\n             * @memberof perftools.profiles.Label\n             * @instance\n             */\n            Label.prototype.str = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Label num.\n             * @member {number|Long}num\n             * @memberof perftools.profiles.Label\n             * @instance\n             */\n            Label.prototype.num = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Label numUnit.\n             * @member {number|Long}numUnit\n             * @memberof perftools.profiles.Label\n             * @instance\n             */\n            Label.prototype.numUnit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Label instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {perftools.profiles.ILabel=} [properties] Properties to set\n             * @returns {perftools.profiles.Label} Label instance\n             */\n            Label.create = function create(properties) {\n                return new Label(properties);\n            };\n\n            /**\n             * Encodes the specified Label message. Does not implicitly {@link perftools.profiles.Label.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {perftools.profiles.ILabel} message Label message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Label.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.key != null && message.hasOwnProperty(\"key\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.key);\n                if (message.str != null && message.hasOwnProperty(\"str\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.str);\n                if (message.num != null && message.hasOwnProperty(\"num\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.num);\n                if (message.numUnit != null && message.hasOwnProperty(\"numUnit\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.numUnit);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Label message, length delimited. Does not implicitly {@link perftools.profiles.Label.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {perftools.profiles.ILabel} message Label message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Label.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Label message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Label} Label\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Label.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Label();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.key = reader.int64();\n                        break;\n                    case 2:\n                        message.str = reader.int64();\n                        break;\n                    case 3:\n                        message.num = reader.int64();\n                        break;\n                    case 4:\n                        message.numUnit = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Label message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Label} Label\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Label.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Label message.\n             * @function verify\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Label.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.key != null && message.hasOwnProperty(\"key\"))\n                    if (!$util.isInteger(message.key) && !(message.key && $util.isInteger(message.key.low) && $util.isInteger(message.key.high)))\n                        return \"key: integer|Long expected\";\n                if (message.str != null && message.hasOwnProperty(\"str\"))\n                    if (!$util.isInteger(message.str) && !(message.str && $util.isInteger(message.str.low) && $util.isInteger(message.str.high)))\n                        return \"str: integer|Long expected\";\n                if (message.num != null && message.hasOwnProperty(\"num\"))\n                    if (!$util.isInteger(message.num) && !(message.num && $util.isInteger(message.num.low) && $util.isInteger(message.num.high)))\n                        return \"num: integer|Long expected\";\n                if (message.numUnit != null && message.hasOwnProperty(\"numUnit\"))\n                    if (!$util.isInteger(message.numUnit) && !(message.numUnit && $util.isInteger(message.numUnit.low) && $util.isInteger(message.numUnit.high)))\n                        return \"numUnit: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Label message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Label} Label\n             */\n            Label.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Label)\n                    return object;\n                var message = new $root.perftools.profiles.Label();\n                if (object.key != null)\n                    if ($util.Long)\n                        (message.key = $util.Long.fromValue(object.key)).unsigned = false;\n                    else if (typeof object.key === \"string\")\n                        message.key = parseInt(object.key, 10);\n                    else if (typeof object.key === \"number\")\n                        message.key = object.key;\n                    else if (typeof object.key === \"object\")\n                        message.key = new $util.LongBits(object.key.low >>> 0, object.key.high >>> 0).toNumber();\n                if (object.str != null)\n                    if ($util.Long)\n                        (message.str = $util.Long.fromValue(object.str)).unsigned = false;\n                    else if (typeof object.str === \"string\")\n                        message.str = parseInt(object.str, 10);\n                    else if (typeof object.str === \"number\")\n                        message.str = object.str;\n                    else if (typeof object.str === \"object\")\n                        message.str = new $util.LongBits(object.str.low >>> 0, object.str.high >>> 0).toNumber();\n                if (object.num != null)\n                    if ($util.Long)\n                        (message.num = $util.Long.fromValue(object.num)).unsigned = false;\n                    else if (typeof object.num === \"string\")\n                        message.num = parseInt(object.num, 10);\n                    else if (typeof object.num === \"number\")\n                        message.num = object.num;\n                    else if (typeof object.num === \"object\")\n                        message.num = new $util.LongBits(object.num.low >>> 0, object.num.high >>> 0).toNumber();\n                if (object.numUnit != null)\n                    if ($util.Long)\n                        (message.numUnit = $util.Long.fromValue(object.numUnit)).unsigned = false;\n                    else if (typeof object.numUnit === \"string\")\n                        message.numUnit = parseInt(object.numUnit, 10);\n                    else if (typeof object.numUnit === \"number\")\n                        message.numUnit = object.numUnit;\n                    else if (typeof object.numUnit === \"object\")\n                        message.numUnit = new $util.LongBits(object.numUnit.low >>> 0, object.numUnit.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Label message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Label\n             * @static\n             * @param {perftools.profiles.Label} message Label\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Label.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.key = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.key = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.str = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.str = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.num = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.num = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.numUnit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.numUnit = options.longs === String ? \"0\" : 0;\n                }\n                if (message.key != null && message.hasOwnProperty(\"key\"))\n                    if (typeof message.key === \"number\")\n                        object.key = options.longs === String ? String(message.key) : message.key;\n                    else\n                        object.key = options.longs === String ? $util.Long.prototype.toString.call(message.key) : options.longs === Number ? new $util.LongBits(message.key.low >>> 0, message.key.high >>> 0).toNumber() : message.key;\n                if (message.str != null && message.hasOwnProperty(\"str\"))\n                    if (typeof message.str === \"number\")\n                        object.str = options.longs === String ? String(message.str) : message.str;\n                    else\n                        object.str = options.longs === String ? $util.Long.prototype.toString.call(message.str) : options.longs === Number ? new $util.LongBits(message.str.low >>> 0, message.str.high >>> 0).toNumber() : message.str;\n                if (message.num != null && message.hasOwnProperty(\"num\"))\n                    if (typeof message.num === \"number\")\n                        object.num = options.longs === String ? String(message.num) : message.num;\n                    else\n                        object.num = options.longs === String ? $util.Long.prototype.toString.call(message.num) : options.longs === Number ? new $util.LongBits(message.num.low >>> 0, message.num.high >>> 0).toNumber() : message.num;\n                if (message.numUnit != null && message.hasOwnProperty(\"numUnit\"))\n                    if (typeof message.numUnit === \"number\")\n                        object.numUnit = options.longs === String ? String(message.numUnit) : message.numUnit;\n                    else\n                        object.numUnit = options.longs === String ? $util.Long.prototype.toString.call(message.numUnit) : options.longs === Number ? new $util.LongBits(message.numUnit.low >>> 0, message.numUnit.high >>> 0).toNumber() : message.numUnit;\n                return object;\n            };\n\n            /**\n             * Converts this Label to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Label\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Label.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Label;\n        })();\n\n        profiles.Mapping = (function() {\n\n            /**\n             * Properties of a Mapping.\n             * @memberof perftools.profiles\n             * @interface IMapping\n             * @property {number|Long} [id] Mapping id\n             * @property {number|Long} [memoryStart] Mapping memoryStart\n             * @property {number|Long} [memoryLimit] Mapping memoryLimit\n             * @property {number|Long} [fileOffset] Mapping fileOffset\n             * @property {number|Long} [filename] Mapping filename\n             * @property {number|Long} [buildId] Mapping buildId\n             * @property {boolean} [hasFunctions] Mapping hasFunctions\n             * @property {boolean} [hasFilenames] Mapping hasFilenames\n             * @property {boolean} [hasLineNumbers] Mapping hasLineNumbers\n             * @property {boolean} [hasInlineFrames] Mapping hasInlineFrames\n             */\n\n            /**\n             * Constructs a new Mapping.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Mapping.\n             * @constructor\n             * @param {perftools.profiles.IMapping=} [properties] Properties to set\n             */\n            function Mapping(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Mapping id.\n             * @member {number|Long}id\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Mapping memoryStart.\n             * @member {number|Long}memoryStart\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.memoryStart = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Mapping memoryLimit.\n             * @member {number|Long}memoryLimit\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.memoryLimit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Mapping fileOffset.\n             * @member {number|Long}fileOffset\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.fileOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Mapping filename.\n             * @member {number|Long}filename\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.filename = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Mapping buildId.\n             * @member {number|Long}buildId\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.buildId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Mapping hasFunctions.\n             * @member {boolean}hasFunctions\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.hasFunctions = false;\n\n            /**\n             * Mapping hasFilenames.\n             * @member {boolean}hasFilenames\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.hasFilenames = false;\n\n            /**\n             * Mapping hasLineNumbers.\n             * @member {boolean}hasLineNumbers\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.hasLineNumbers = false;\n\n            /**\n             * Mapping hasInlineFrames.\n             * @member {boolean}hasInlineFrames\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             */\n            Mapping.prototype.hasInlineFrames = false;\n\n            /**\n             * Creates a new Mapping instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {perftools.profiles.IMapping=} [properties] Properties to set\n             * @returns {perftools.profiles.Mapping} Mapping instance\n             */\n            Mapping.create = function create(properties) {\n                return new Mapping(properties);\n            };\n\n            /**\n             * Encodes the specified Mapping message. Does not implicitly {@link perftools.profiles.Mapping.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {perftools.profiles.IMapping} message Mapping message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Mapping.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);\n                if (message.memoryStart != null && message.hasOwnProperty(\"memoryStart\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.memoryStart);\n                if (message.memoryLimit != null && message.hasOwnProperty(\"memoryLimit\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.memoryLimit);\n                if (message.fileOffset != null && message.hasOwnProperty(\"fileOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.fileOffset);\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.filename);\n                if (message.buildId != null && message.hasOwnProperty(\"buildId\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.buildId);\n                if (message.hasFunctions != null && message.hasOwnProperty(\"hasFunctions\"))\n                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.hasFunctions);\n                if (message.hasFilenames != null && message.hasOwnProperty(\"hasFilenames\"))\n                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.hasFilenames);\n                if (message.hasLineNumbers != null && message.hasOwnProperty(\"hasLineNumbers\"))\n                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.hasLineNumbers);\n                if (message.hasInlineFrames != null && message.hasOwnProperty(\"hasInlineFrames\"))\n                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.hasInlineFrames);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Mapping message, length delimited. Does not implicitly {@link perftools.profiles.Mapping.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {perftools.profiles.IMapping} message Mapping message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Mapping.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Mapping message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Mapping} Mapping\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Mapping.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Mapping();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.uint64();\n                        break;\n                    case 2:\n                        message.memoryStart = reader.uint64();\n                        break;\n                    case 3:\n                        message.memoryLimit = reader.uint64();\n                        break;\n                    case 4:\n                        message.fileOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.filename = reader.int64();\n                        break;\n                    case 6:\n                        message.buildId = reader.int64();\n                        break;\n                    case 7:\n                        message.hasFunctions = reader.bool();\n                        break;\n                    case 8:\n                        message.hasFilenames = reader.bool();\n                        break;\n                    case 9:\n                        message.hasLineNumbers = reader.bool();\n                        break;\n                    case 10:\n                        message.hasInlineFrames = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Mapping message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Mapping} Mapping\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Mapping.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Mapping message.\n             * @function verify\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Mapping.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))\n                        return \"id: integer|Long expected\";\n                if (message.memoryStart != null && message.hasOwnProperty(\"memoryStart\"))\n                    if (!$util.isInteger(message.memoryStart) && !(message.memoryStart && $util.isInteger(message.memoryStart.low) && $util.isInteger(message.memoryStart.high)))\n                        return \"memoryStart: integer|Long expected\";\n                if (message.memoryLimit != null && message.hasOwnProperty(\"memoryLimit\"))\n                    if (!$util.isInteger(message.memoryLimit) && !(message.memoryLimit && $util.isInteger(message.memoryLimit.low) && $util.isInteger(message.memoryLimit.high)))\n                        return \"memoryLimit: integer|Long expected\";\n                if (message.fileOffset != null && message.hasOwnProperty(\"fileOffset\"))\n                    if (!$util.isInteger(message.fileOffset) && !(message.fileOffset && $util.isInteger(message.fileOffset.low) && $util.isInteger(message.fileOffset.high)))\n                        return \"fileOffset: integer|Long expected\";\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (!$util.isInteger(message.filename) && !(message.filename && $util.isInteger(message.filename.low) && $util.isInteger(message.filename.high)))\n                        return \"filename: integer|Long expected\";\n                if (message.buildId != null && message.hasOwnProperty(\"buildId\"))\n                    if (!$util.isInteger(message.buildId) && !(message.buildId && $util.isInteger(message.buildId.low) && $util.isInteger(message.buildId.high)))\n                        return \"buildId: integer|Long expected\";\n                if (message.hasFunctions != null && message.hasOwnProperty(\"hasFunctions\"))\n                    if (typeof message.hasFunctions !== \"boolean\")\n                        return \"hasFunctions: boolean expected\";\n                if (message.hasFilenames != null && message.hasOwnProperty(\"hasFilenames\"))\n                    if (typeof message.hasFilenames !== \"boolean\")\n                        return \"hasFilenames: boolean expected\";\n                if (message.hasLineNumbers != null && message.hasOwnProperty(\"hasLineNumbers\"))\n                    if (typeof message.hasLineNumbers !== \"boolean\")\n                        return \"hasLineNumbers: boolean expected\";\n                if (message.hasInlineFrames != null && message.hasOwnProperty(\"hasInlineFrames\"))\n                    if (typeof message.hasInlineFrames !== \"boolean\")\n                        return \"hasInlineFrames: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Mapping message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Mapping} Mapping\n             */\n            Mapping.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Mapping)\n                    return object;\n                var message = new $root.perftools.profiles.Mapping();\n                if (object.id != null)\n                    if ($util.Long)\n                        (message.id = $util.Long.fromValue(object.id)).unsigned = true;\n                    else if (typeof object.id === \"string\")\n                        message.id = parseInt(object.id, 10);\n                    else if (typeof object.id === \"number\")\n                        message.id = object.id;\n                    else if (typeof object.id === \"object\")\n                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n                if (object.memoryStart != null)\n                    if ($util.Long)\n                        (message.memoryStart = $util.Long.fromValue(object.memoryStart)).unsigned = true;\n                    else if (typeof object.memoryStart === \"string\")\n                        message.memoryStart = parseInt(object.memoryStart, 10);\n                    else if (typeof object.memoryStart === \"number\")\n                        message.memoryStart = object.memoryStart;\n                    else if (typeof object.memoryStart === \"object\")\n                        message.memoryStart = new $util.LongBits(object.memoryStart.low >>> 0, object.memoryStart.high >>> 0).toNumber(true);\n                if (object.memoryLimit != null)\n                    if ($util.Long)\n                        (message.memoryLimit = $util.Long.fromValue(object.memoryLimit)).unsigned = true;\n                    else if (typeof object.memoryLimit === \"string\")\n                        message.memoryLimit = parseInt(object.memoryLimit, 10);\n                    else if (typeof object.memoryLimit === \"number\")\n                        message.memoryLimit = object.memoryLimit;\n                    else if (typeof object.memoryLimit === \"object\")\n                        message.memoryLimit = new $util.LongBits(object.memoryLimit.low >>> 0, object.memoryLimit.high >>> 0).toNumber(true);\n                if (object.fileOffset != null)\n                    if ($util.Long)\n                        (message.fileOffset = $util.Long.fromValue(object.fileOffset)).unsigned = true;\n                    else if (typeof object.fileOffset === \"string\")\n                        message.fileOffset = parseInt(object.fileOffset, 10);\n                    else if (typeof object.fileOffset === \"number\")\n                        message.fileOffset = object.fileOffset;\n                    else if (typeof object.fileOffset === \"object\")\n                        message.fileOffset = new $util.LongBits(object.fileOffset.low >>> 0, object.fileOffset.high >>> 0).toNumber(true);\n                if (object.filename != null)\n                    if ($util.Long)\n                        (message.filename = $util.Long.fromValue(object.filename)).unsigned = false;\n                    else if (typeof object.filename === \"string\")\n                        message.filename = parseInt(object.filename, 10);\n                    else if (typeof object.filename === \"number\")\n                        message.filename = object.filename;\n                    else if (typeof object.filename === \"object\")\n                        message.filename = new $util.LongBits(object.filename.low >>> 0, object.filename.high >>> 0).toNumber();\n                if (object.buildId != null)\n                    if ($util.Long)\n                        (message.buildId = $util.Long.fromValue(object.buildId)).unsigned = false;\n                    else if (typeof object.buildId === \"string\")\n                        message.buildId = parseInt(object.buildId, 10);\n                    else if (typeof object.buildId === \"number\")\n                        message.buildId = object.buildId;\n                    else if (typeof object.buildId === \"object\")\n                        message.buildId = new $util.LongBits(object.buildId.low >>> 0, object.buildId.high >>> 0).toNumber();\n                if (object.hasFunctions != null)\n                    message.hasFunctions = Boolean(object.hasFunctions);\n                if (object.hasFilenames != null)\n                    message.hasFilenames = Boolean(object.hasFilenames);\n                if (object.hasLineNumbers != null)\n                    message.hasLineNumbers = Boolean(object.hasLineNumbers);\n                if (object.hasInlineFrames != null)\n                    message.hasInlineFrames = Boolean(object.hasInlineFrames);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Mapping message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Mapping\n             * @static\n             * @param {perftools.profiles.Mapping} message Mapping\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Mapping.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.id = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.memoryStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.memoryStart = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.memoryLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.memoryLimit = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.fileOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.fileOffset = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.filename = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.filename = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.buildId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.buildId = options.longs === String ? \"0\" : 0;\n                    object.hasFunctions = false;\n                    object.hasFilenames = false;\n                    object.hasLineNumbers = false;\n                    object.hasInlineFrames = false;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (typeof message.id === \"number\")\n                        object.id = options.longs === String ? String(message.id) : message.id;\n                    else\n                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n                if (message.memoryStart != null && message.hasOwnProperty(\"memoryStart\"))\n                    if (typeof message.memoryStart === \"number\")\n                        object.memoryStart = options.longs === String ? String(message.memoryStart) : message.memoryStart;\n                    else\n                        object.memoryStart = options.longs === String ? $util.Long.prototype.toString.call(message.memoryStart) : options.longs === Number ? new $util.LongBits(message.memoryStart.low >>> 0, message.memoryStart.high >>> 0).toNumber(true) : message.memoryStart;\n                if (message.memoryLimit != null && message.hasOwnProperty(\"memoryLimit\"))\n                    if (typeof message.memoryLimit === \"number\")\n                        object.memoryLimit = options.longs === String ? String(message.memoryLimit) : message.memoryLimit;\n                    else\n                        object.memoryLimit = options.longs === String ? $util.Long.prototype.toString.call(message.memoryLimit) : options.longs === Number ? new $util.LongBits(message.memoryLimit.low >>> 0, message.memoryLimit.high >>> 0).toNumber(true) : message.memoryLimit;\n                if (message.fileOffset != null && message.hasOwnProperty(\"fileOffset\"))\n                    if (typeof message.fileOffset === \"number\")\n                        object.fileOffset = options.longs === String ? String(message.fileOffset) : message.fileOffset;\n                    else\n                        object.fileOffset = options.longs === String ? $util.Long.prototype.toString.call(message.fileOffset) : options.longs === Number ? new $util.LongBits(message.fileOffset.low >>> 0, message.fileOffset.high >>> 0).toNumber(true) : message.fileOffset;\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (typeof message.filename === \"number\")\n                        object.filename = options.longs === String ? String(message.filename) : message.filename;\n                    else\n                        object.filename = options.longs === String ? $util.Long.prototype.toString.call(message.filename) : options.longs === Number ? new $util.LongBits(message.filename.low >>> 0, message.filename.high >>> 0).toNumber() : message.filename;\n                if (message.buildId != null && message.hasOwnProperty(\"buildId\"))\n                    if (typeof message.buildId === \"number\")\n                        object.buildId = options.longs === String ? String(message.buildId) : message.buildId;\n                    else\n                        object.buildId = options.longs === String ? $util.Long.prototype.toString.call(message.buildId) : options.longs === Number ? new $util.LongBits(message.buildId.low >>> 0, message.buildId.high >>> 0).toNumber() : message.buildId;\n                if (message.hasFunctions != null && message.hasOwnProperty(\"hasFunctions\"))\n                    object.hasFunctions = message.hasFunctions;\n                if (message.hasFilenames != null && message.hasOwnProperty(\"hasFilenames\"))\n                    object.hasFilenames = message.hasFilenames;\n                if (message.hasLineNumbers != null && message.hasOwnProperty(\"hasLineNumbers\"))\n                    object.hasLineNumbers = message.hasLineNumbers;\n                if (message.hasInlineFrames != null && message.hasOwnProperty(\"hasInlineFrames\"))\n                    object.hasInlineFrames = message.hasInlineFrames;\n                return object;\n            };\n\n            /**\n             * Converts this Mapping to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Mapping\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Mapping.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Mapping;\n        })();\n\n        profiles.Location = (function() {\n\n            /**\n             * Properties of a Location.\n             * @memberof perftools.profiles\n             * @interface ILocation\n             * @property {number|Long} [id] Location id\n             * @property {number|Long} [mappingId] Location mappingId\n             * @property {number|Long} [address] Location address\n             * @property {Array.<perftools.profiles.ILine>} [line] Location line\n             */\n\n            /**\n             * Constructs a new Location.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Location.\n             * @constructor\n             * @param {perftools.profiles.ILocation=} [properties] Properties to set\n             */\n            function Location(properties) {\n                this.line = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Location id.\n             * @member {number|Long}id\n             * @memberof perftools.profiles.Location\n             * @instance\n             */\n            Location.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Location mappingId.\n             * @member {number|Long}mappingId\n             * @memberof perftools.profiles.Location\n             * @instance\n             */\n            Location.prototype.mappingId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Location address.\n             * @member {number|Long}address\n             * @memberof perftools.profiles.Location\n             * @instance\n             */\n            Location.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Location line.\n             * @member {Array.<perftools.profiles.ILine>}line\n             * @memberof perftools.profiles.Location\n             * @instance\n             */\n            Location.prototype.line = $util.emptyArray;\n\n            /**\n             * Creates a new Location instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {perftools.profiles.ILocation=} [properties] Properties to set\n             * @returns {perftools.profiles.Location} Location instance\n             */\n            Location.create = function create(properties) {\n                return new Location(properties);\n            };\n\n            /**\n             * Encodes the specified Location message. Does not implicitly {@link perftools.profiles.Location.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {perftools.profiles.ILocation} message Location message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Location.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);\n                if (message.mappingId != null && message.hasOwnProperty(\"mappingId\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.mappingId);\n                if (message.address != null && message.hasOwnProperty(\"address\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.address);\n                if (message.line != null && message.line.length)\n                    for (var i = 0; i < message.line.length; ++i)\n                        $root.perftools.profiles.Line.encode(message.line[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Location message, length delimited. Does not implicitly {@link perftools.profiles.Location.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {perftools.profiles.ILocation} message Location message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Location.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Location message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Location} Location\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Location.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Location();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.uint64();\n                        break;\n                    case 2:\n                        message.mappingId = reader.uint64();\n                        break;\n                    case 3:\n                        message.address = reader.uint64();\n                        break;\n                    case 4:\n                        if (!(message.line && message.line.length))\n                            message.line = [];\n                        message.line.push($root.perftools.profiles.Line.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Location message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Location} Location\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Location.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Location message.\n             * @function verify\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Location.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))\n                        return \"id: integer|Long expected\";\n                if (message.mappingId != null && message.hasOwnProperty(\"mappingId\"))\n                    if (!$util.isInteger(message.mappingId) && !(message.mappingId && $util.isInteger(message.mappingId.low) && $util.isInteger(message.mappingId.high)))\n                        return \"mappingId: integer|Long expected\";\n                if (message.address != null && message.hasOwnProperty(\"address\"))\n                    if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))\n                        return \"address: integer|Long expected\";\n                if (message.line != null && message.hasOwnProperty(\"line\")) {\n                    if (!Array.isArray(message.line))\n                        return \"line: array expected\";\n                    for (var i = 0; i < message.line.length; ++i) {\n                        var error = $root.perftools.profiles.Line.verify(message.line[i]);\n                        if (error)\n                            return \"line.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Location message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Location} Location\n             */\n            Location.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Location)\n                    return object;\n                var message = new $root.perftools.profiles.Location();\n                if (object.id != null)\n                    if ($util.Long)\n                        (message.id = $util.Long.fromValue(object.id)).unsigned = true;\n                    else if (typeof object.id === \"string\")\n                        message.id = parseInt(object.id, 10);\n                    else if (typeof object.id === \"number\")\n                        message.id = object.id;\n                    else if (typeof object.id === \"object\")\n                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n                if (object.mappingId != null)\n                    if ($util.Long)\n                        (message.mappingId = $util.Long.fromValue(object.mappingId)).unsigned = true;\n                    else if (typeof object.mappingId === \"string\")\n                        message.mappingId = parseInt(object.mappingId, 10);\n                    else if (typeof object.mappingId === \"number\")\n                        message.mappingId = object.mappingId;\n                    else if (typeof object.mappingId === \"object\")\n                        message.mappingId = new $util.LongBits(object.mappingId.low >>> 0, object.mappingId.high >>> 0).toNumber(true);\n                if (object.address != null)\n                    if ($util.Long)\n                        (message.address = $util.Long.fromValue(object.address)).unsigned = true;\n                    else if (typeof object.address === \"string\")\n                        message.address = parseInt(object.address, 10);\n                    else if (typeof object.address === \"number\")\n                        message.address = object.address;\n                    else if (typeof object.address === \"object\")\n                        message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);\n                if (object.line) {\n                    if (!Array.isArray(object.line))\n                        throw TypeError(\".perftools.profiles.Location.line: array expected\");\n                    message.line = [];\n                    for (var i = 0; i < object.line.length; ++i) {\n                        if (typeof object.line[i] !== \"object\")\n                            throw TypeError(\".perftools.profiles.Location.line: object expected\");\n                        message.line[i] = $root.perftools.profiles.Line.fromObject(object.line[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Location message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Location\n             * @static\n             * @param {perftools.profiles.Location} message Location\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Location.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.line = [];\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.id = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.mappingId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.mappingId = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.address = options.longs === String ? \"0\" : 0;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (typeof message.id === \"number\")\n                        object.id = options.longs === String ? String(message.id) : message.id;\n                    else\n                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n                if (message.mappingId != null && message.hasOwnProperty(\"mappingId\"))\n                    if (typeof message.mappingId === \"number\")\n                        object.mappingId = options.longs === String ? String(message.mappingId) : message.mappingId;\n                    else\n                        object.mappingId = options.longs === String ? $util.Long.prototype.toString.call(message.mappingId) : options.longs === Number ? new $util.LongBits(message.mappingId.low >>> 0, message.mappingId.high >>> 0).toNumber(true) : message.mappingId;\n                if (message.address != null && message.hasOwnProperty(\"address\"))\n                    if (typeof message.address === \"number\")\n                        object.address = options.longs === String ? String(message.address) : message.address;\n                    else\n                        object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;\n                if (message.line && message.line.length) {\n                    object.line = [];\n                    for (var j = 0; j < message.line.length; ++j)\n                        object.line[j] = $root.perftools.profiles.Line.toObject(message.line[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Location to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Location\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Location.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Location;\n        })();\n\n        profiles.Line = (function() {\n\n            /**\n             * Properties of a Line.\n             * @memberof perftools.profiles\n             * @interface ILine\n             * @property {number|Long} [functionId] Line functionId\n             * @property {number|Long} [line] Line line\n             */\n\n            /**\n             * Constructs a new Line.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Line.\n             * @constructor\n             * @param {perftools.profiles.ILine=} [properties] Properties to set\n             */\n            function Line(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Line functionId.\n             * @member {number|Long}functionId\n             * @memberof perftools.profiles.Line\n             * @instance\n             */\n            Line.prototype.functionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Line line.\n             * @member {number|Long}line\n             * @memberof perftools.profiles.Line\n             * @instance\n             */\n            Line.prototype.line = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Line instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {perftools.profiles.ILine=} [properties] Properties to set\n             * @returns {perftools.profiles.Line} Line instance\n             */\n            Line.create = function create(properties) {\n                return new Line(properties);\n            };\n\n            /**\n             * Encodes the specified Line message. Does not implicitly {@link perftools.profiles.Line.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {perftools.profiles.ILine} message Line message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Line.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.functionId != null && message.hasOwnProperty(\"functionId\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.functionId);\n                if (message.line != null && message.hasOwnProperty(\"line\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.line);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Line message, length delimited. Does not implicitly {@link perftools.profiles.Line.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {perftools.profiles.ILine} message Line message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Line.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Line message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Line} Line\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Line.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Line();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.functionId = reader.uint64();\n                        break;\n                    case 2:\n                        message.line = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Line message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Line} Line\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Line.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Line message.\n             * @function verify\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Line.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.functionId != null && message.hasOwnProperty(\"functionId\"))\n                    if (!$util.isInteger(message.functionId) && !(message.functionId && $util.isInteger(message.functionId.low) && $util.isInteger(message.functionId.high)))\n                        return \"functionId: integer|Long expected\";\n                if (message.line != null && message.hasOwnProperty(\"line\"))\n                    if (!$util.isInteger(message.line) && !(message.line && $util.isInteger(message.line.low) && $util.isInteger(message.line.high)))\n                        return \"line: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Line message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Line} Line\n             */\n            Line.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Line)\n                    return object;\n                var message = new $root.perftools.profiles.Line();\n                if (object.functionId != null)\n                    if ($util.Long)\n                        (message.functionId = $util.Long.fromValue(object.functionId)).unsigned = true;\n                    else if (typeof object.functionId === \"string\")\n                        message.functionId = parseInt(object.functionId, 10);\n                    else if (typeof object.functionId === \"number\")\n                        message.functionId = object.functionId;\n                    else if (typeof object.functionId === \"object\")\n                        message.functionId = new $util.LongBits(object.functionId.low >>> 0, object.functionId.high >>> 0).toNumber(true);\n                if (object.line != null)\n                    if ($util.Long)\n                        (message.line = $util.Long.fromValue(object.line)).unsigned = false;\n                    else if (typeof object.line === \"string\")\n                        message.line = parseInt(object.line, 10);\n                    else if (typeof object.line === \"number\")\n                        message.line = object.line;\n                    else if (typeof object.line === \"object\")\n                        message.line = new $util.LongBits(object.line.low >>> 0, object.line.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Line message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Line\n             * @static\n             * @param {perftools.profiles.Line} message Line\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Line.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.functionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.functionId = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.line = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.line = options.longs === String ? \"0\" : 0;\n                }\n                if (message.functionId != null && message.hasOwnProperty(\"functionId\"))\n                    if (typeof message.functionId === \"number\")\n                        object.functionId = options.longs === String ? String(message.functionId) : message.functionId;\n                    else\n                        object.functionId = options.longs === String ? $util.Long.prototype.toString.call(message.functionId) : options.longs === Number ? new $util.LongBits(message.functionId.low >>> 0, message.functionId.high >>> 0).toNumber(true) : message.functionId;\n                if (message.line != null && message.hasOwnProperty(\"line\"))\n                    if (typeof message.line === \"number\")\n                        object.line = options.longs === String ? String(message.line) : message.line;\n                    else\n                        object.line = options.longs === String ? $util.Long.prototype.toString.call(message.line) : options.longs === Number ? new $util.LongBits(message.line.low >>> 0, message.line.high >>> 0).toNumber() : message.line;\n                return object;\n            };\n\n            /**\n             * Converts this Line to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Line\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Line.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Line;\n        })();\n\n        profiles.Function = (function() {\n\n            /**\n             * Properties of a Function.\n             * @memberof perftools.profiles\n             * @interface IFunction\n             * @property {number|Long} [id] Function id\n             * @property {number|Long} [name] Function name\n             * @property {number|Long} [systemName] Function systemName\n             * @property {number|Long} [filename] Function filename\n             * @property {number|Long} [startLine] Function startLine\n             */\n\n            /**\n             * Constructs a new Function.\n             * @memberof perftools.profiles\n             * @classdesc Represents a Function.\n             * @constructor\n             * @param {perftools.profiles.IFunction=} [properties] Properties to set\n             */\n            function Function(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Function id.\n             * @member {number|Long}id\n             * @memberof perftools.profiles.Function\n             * @instance\n             */\n            Function.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Function name.\n             * @member {number|Long}name\n             * @memberof perftools.profiles.Function\n             * @instance\n             */\n            Function.prototype.name = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Function systemName.\n             * @member {number|Long}systemName\n             * @memberof perftools.profiles.Function\n             * @instance\n             */\n            Function.prototype.systemName = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Function filename.\n             * @member {number|Long}filename\n             * @memberof perftools.profiles.Function\n             * @instance\n             */\n            Function.prototype.filename = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Function startLine.\n             * @member {number|Long}startLine\n             * @memberof perftools.profiles.Function\n             * @instance\n             */\n            Function.prototype.startLine = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Function instance using the specified properties.\n             * @function create\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {perftools.profiles.IFunction=} [properties] Properties to set\n             * @returns {perftools.profiles.Function} Function instance\n             */\n            Function.create = function create(properties) {\n                return new Function(properties);\n            };\n\n            /**\n             * Encodes the specified Function message. Does not implicitly {@link perftools.profiles.Function.verify|verify} messages.\n             * @function encode\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {perftools.profiles.IFunction} message Function message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Function.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.name);\n                if (message.systemName != null && message.hasOwnProperty(\"systemName\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.systemName);\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.filename);\n                if (message.startLine != null && message.hasOwnProperty(\"startLine\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.startLine);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Function message, length delimited. Does not implicitly {@link perftools.profiles.Function.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {perftools.profiles.IFunction} message Function message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Function.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Function message from the specified reader or buffer.\n             * @function decode\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {perftools.profiles.Function} Function\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Function.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.perftools.profiles.Function();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.uint64();\n                        break;\n                    case 2:\n                        message.name = reader.int64();\n                        break;\n                    case 3:\n                        message.systemName = reader.int64();\n                        break;\n                    case 4:\n                        message.filename = reader.int64();\n                        break;\n                    case 5:\n                        message.startLine = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Function message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {perftools.profiles.Function} Function\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Function.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Function message.\n             * @function verify\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Function.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))\n                        return \"id: integer|Long expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isInteger(message.name) && !(message.name && $util.isInteger(message.name.low) && $util.isInteger(message.name.high)))\n                        return \"name: integer|Long expected\";\n                if (message.systemName != null && message.hasOwnProperty(\"systemName\"))\n                    if (!$util.isInteger(message.systemName) && !(message.systemName && $util.isInteger(message.systemName.low) && $util.isInteger(message.systemName.high)))\n                        return \"systemName: integer|Long expected\";\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (!$util.isInteger(message.filename) && !(message.filename && $util.isInteger(message.filename.low) && $util.isInteger(message.filename.high)))\n                        return \"filename: integer|Long expected\";\n                if (message.startLine != null && message.hasOwnProperty(\"startLine\"))\n                    if (!$util.isInteger(message.startLine) && !(message.startLine && $util.isInteger(message.startLine.low) && $util.isInteger(message.startLine.high)))\n                        return \"startLine: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Function message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {perftools.profiles.Function} Function\n             */\n            Function.fromObject = function fromObject(object) {\n                if (object instanceof $root.perftools.profiles.Function)\n                    return object;\n                var message = new $root.perftools.profiles.Function();\n                if (object.id != null)\n                    if ($util.Long)\n                        (message.id = $util.Long.fromValue(object.id)).unsigned = true;\n                    else if (typeof object.id === \"string\")\n                        message.id = parseInt(object.id, 10);\n                    else if (typeof object.id === \"number\")\n                        message.id = object.id;\n                    else if (typeof object.id === \"object\")\n                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);\n                if (object.name != null)\n                    if ($util.Long)\n                        (message.name = $util.Long.fromValue(object.name)).unsigned = false;\n                    else if (typeof object.name === \"string\")\n                        message.name = parseInt(object.name, 10);\n                    else if (typeof object.name === \"number\")\n                        message.name = object.name;\n                    else if (typeof object.name === \"object\")\n                        message.name = new $util.LongBits(object.name.low >>> 0, object.name.high >>> 0).toNumber();\n                if (object.systemName != null)\n                    if ($util.Long)\n                        (message.systemName = $util.Long.fromValue(object.systemName)).unsigned = false;\n                    else if (typeof object.systemName === \"string\")\n                        message.systemName = parseInt(object.systemName, 10);\n                    else if (typeof object.systemName === \"number\")\n                        message.systemName = object.systemName;\n                    else if (typeof object.systemName === \"object\")\n                        message.systemName = new $util.LongBits(object.systemName.low >>> 0, object.systemName.high >>> 0).toNumber();\n                if (object.filename != null)\n                    if ($util.Long)\n                        (message.filename = $util.Long.fromValue(object.filename)).unsigned = false;\n                    else if (typeof object.filename === \"string\")\n                        message.filename = parseInt(object.filename, 10);\n                    else if (typeof object.filename === \"number\")\n                        message.filename = object.filename;\n                    else if (typeof object.filename === \"object\")\n                        message.filename = new $util.LongBits(object.filename.low >>> 0, object.filename.high >>> 0).toNumber();\n                if (object.startLine != null)\n                    if ($util.Long)\n                        (message.startLine = $util.Long.fromValue(object.startLine)).unsigned = false;\n                    else if (typeof object.startLine === \"string\")\n                        message.startLine = parseInt(object.startLine, 10);\n                    else if (typeof object.startLine === \"number\")\n                        message.startLine = object.startLine;\n                    else if (typeof object.startLine === \"object\")\n                        message.startLine = new $util.LongBits(object.startLine.low >>> 0, object.startLine.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Function message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof perftools.profiles.Function\n             * @static\n             * @param {perftools.profiles.Function} message Function\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Function.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.id = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.name = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.name = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.systemName = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.systemName = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.filename = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.filename = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.startLine = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.startLine = options.longs === String ? \"0\" : 0;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (typeof message.id === \"number\")\n                        object.id = options.longs === String ? String(message.id) : message.id;\n                    else\n                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (typeof message.name === \"number\")\n                        object.name = options.longs === String ? String(message.name) : message.name;\n                    else\n                        object.name = options.longs === String ? $util.Long.prototype.toString.call(message.name) : options.longs === Number ? new $util.LongBits(message.name.low >>> 0, message.name.high >>> 0).toNumber() : message.name;\n                if (message.systemName != null && message.hasOwnProperty(\"systemName\"))\n                    if (typeof message.systemName === \"number\")\n                        object.systemName = options.longs === String ? String(message.systemName) : message.systemName;\n                    else\n                        object.systemName = options.longs === String ? $util.Long.prototype.toString.call(message.systemName) : options.longs === Number ? new $util.LongBits(message.systemName.low >>> 0, message.systemName.high >>> 0).toNumber() : message.systemName;\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (typeof message.filename === \"number\")\n                        object.filename = options.longs === String ? String(message.filename) : message.filename;\n                    else\n                        object.filename = options.longs === String ? $util.Long.prototype.toString.call(message.filename) : options.longs === Number ? new $util.LongBits(message.filename.low >>> 0, message.filename.high >>> 0).toNumber() : message.filename;\n                if (message.startLine != null && message.hasOwnProperty(\"startLine\"))\n                    if (typeof message.startLine === \"number\")\n                        object.startLine = options.longs === String ? String(message.startLine) : message.startLine;\n                    else\n                        object.startLine = options.longs === String ? $util.Long.prototype.toString.call(message.startLine) : options.longs === Number ? new $util.LongBits(message.startLine.low >>> 0, message.startLine.high >>> 0).toNumber() : message.startLine;\n                return object;\n            };\n\n            /**\n             * Converts this Function to JSON.\n             * @function toJSON\n             * @memberof perftools.profiles.Function\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Function.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Function;\n        })();\n\n        return profiles;\n    })();\n\n    return perftools;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}