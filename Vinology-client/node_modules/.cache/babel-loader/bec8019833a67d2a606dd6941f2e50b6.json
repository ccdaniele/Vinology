{"ast":null,"code":"'use strict';\n\nconst opentracing = require('opentracing');\n\nconst now = require('performance-now');\n\nconst Span = opentracing.Span;\n\nconst SpanContext = require('./span_context');\n\nconst constants = require('../constants');\n\nconst id = require('../id');\n\nconst tagger = require('../tagger');\n\nconst log = require('../log');\n\nconst SAMPLE_RATE_METRIC_KEY = constants.SAMPLE_RATE_METRIC_KEY;\nconst {\n  DD_TRACE_EXPERIMENTAL_STATE_TRACKING\n} = process.env;\n\nclass DatadogSpan extends Span {\n  constructor(tracer, processor, sampler, prioritySampler, fields, debug) {\n    super();\n    const operationName = fields.operationName;\n    const parent = fields.parent || null;\n    const tags = Object.assign({\n      [SAMPLE_RATE_METRIC_KEY]: sampler.rate()\n    }, fields.tags);\n    const hostname = fields.hostname;\n    this._parentTracer = tracer;\n    this._debug = debug;\n    this._sampler = sampler;\n    this._processor = processor;\n    this._prioritySampler = prioritySampler;\n    this._spanContext = this._createContext(parent);\n    this._spanContext._name = operationName;\n    this._spanContext._tags = tags;\n    this._spanContext._hostname = hostname;\n    this._startTime = fields.startTime || this._getTime();\n  }\n\n  toString() {\n    const spanContext = this.context();\n    const resourceName = spanContext._tags['resource.name'];\n    const resource = resourceName.length > 100 ? `${resourceName.substring(0, 97)}...` : resourceName;\n    const json = JSON.stringify({\n      traceId: spanContext._traceId,\n      spanId: spanContext._spanId,\n      parentId: spanContext._parentId,\n      service: spanContext._tags['service.name'],\n      name: spanContext._name,\n      resource\n    });\n    return `Span${json}`;\n  }\n\n  _createContext(parent) {\n    let spanContext;\n\n    if (parent) {\n      spanContext = new SpanContext({\n        traceId: parent._traceId,\n        spanId: id(),\n        parentId: parent._spanId,\n        sampling: parent._sampling,\n        baggageItems: Object.assign({}, parent._baggageItems),\n        trace: parent._trace\n      });\n    } else {\n      const spanId = id();\n      spanContext = new SpanContext({\n        traceId: spanId,\n        spanId\n      });\n    }\n\n    spanContext._trace.started.push(this);\n\n    spanContext._trace.startTime = spanContext._trace.startTime || Date.now();\n    spanContext._trace.ticks = spanContext._trace.ticks || now();\n    return spanContext;\n  }\n\n  _getTime() {\n    const {\n      startTime,\n      ticks\n    } = this._spanContext._trace;\n    return startTime + now() - ticks;\n  }\n\n  _context() {\n    return this._spanContext;\n  }\n\n  _tracer() {\n    return this._parentTracer;\n  }\n\n  _setOperationName(name) {\n    this._spanContext._name = name;\n  }\n\n  _setBaggageItem(key, value) {\n    this._spanContext._baggageItems[key] = value;\n  }\n\n  _getBaggageItem(key) {\n    return this._spanContext._baggageItems[key];\n  }\n\n  _addTags(keyValuePairs) {\n    tagger.add(this._spanContext._tags, keyValuePairs);\n\n    this._prioritySampler.sample(this, false);\n  }\n\n  _finish(finishTime) {\n    if (this._duration !== undefined) {\n      return;\n    }\n\n    if (DD_TRACE_EXPERIMENTAL_STATE_TRACKING === 'true') {\n      if (!this._spanContext._tags['service.name']) {\n        log.error(`Finishing invalid span: ${this}`);\n      }\n    }\n\n    finishTime = parseFloat(finishTime) || this._getTime();\n    this._duration = finishTime - this._startTime;\n\n    this._spanContext._trace.finished.push(this);\n\n    this._spanContext._isFinished = true;\n\n    this._processor.process(this);\n  }\n\n}\n\nmodule.exports = DatadogSpan;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/opentracing/span.js"],"names":["opentracing","require","now","Span","SpanContext","constants","id","tagger","log","SAMPLE_RATE_METRIC_KEY","DD_TRACE_EXPERIMENTAL_STATE_TRACKING","process","env","DatadogSpan","constructor","tracer","processor","sampler","prioritySampler","fields","debug","operationName","parent","tags","Object","assign","rate","hostname","_parentTracer","_debug","_sampler","_processor","_prioritySampler","_spanContext","_createContext","_name","_tags","_hostname","_startTime","startTime","_getTime","toString","spanContext","context","resourceName","resource","length","substring","json","JSON","stringify","traceId","_traceId","spanId","_spanId","parentId","_parentId","service","name","sampling","_sampling","baggageItems","_baggageItems","trace","_trace","started","push","Date","ticks","_context","_tracer","_setOperationName","_setBaggageItem","key","value","_getBaggageItem","_addTags","keyValuePairs","add","sample","_finish","finishTime","_duration","undefined","error","parseFloat","finished","_isFinished","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst opentracing = require('opentracing')\nconst now = require('performance-now')\nconst Span = opentracing.Span\nconst SpanContext = require('./span_context')\nconst constants = require('../constants')\nconst id = require('../id')\nconst tagger = require('../tagger')\nconst log = require('../log')\n\nconst SAMPLE_RATE_METRIC_KEY = constants.SAMPLE_RATE_METRIC_KEY\nconst { DD_TRACE_EXPERIMENTAL_STATE_TRACKING } = process.env\n\nclass DatadogSpan extends Span {\n  constructor (tracer, processor, sampler, prioritySampler, fields, debug) {\n    super()\n\n    const operationName = fields.operationName\n    const parent = fields.parent || null\n    const tags = Object.assign({\n      [SAMPLE_RATE_METRIC_KEY]: sampler.rate()\n    }, fields.tags)\n    const hostname = fields.hostname\n\n    this._parentTracer = tracer\n    this._debug = debug\n    this._sampler = sampler\n    this._processor = processor\n    this._prioritySampler = prioritySampler\n\n    this._spanContext = this._createContext(parent)\n    this._spanContext._name = operationName\n    this._spanContext._tags = tags\n    this._spanContext._hostname = hostname\n\n    this._startTime = fields.startTime || this._getTime()\n  }\n\n  toString () {\n    const spanContext = this.context()\n    const resourceName = spanContext._tags['resource.name']\n    const resource = resourceName.length > 100\n      ? `${resourceName.substring(0, 97)}...`\n      : resourceName\n    const json = JSON.stringify({\n      traceId: spanContext._traceId,\n      spanId: spanContext._spanId,\n      parentId: spanContext._parentId,\n      service: spanContext._tags['service.name'],\n      name: spanContext._name,\n      resource\n    })\n\n    return `Span${json}`\n  }\n\n  _createContext (parent) {\n    let spanContext\n\n    if (parent) {\n      spanContext = new SpanContext({\n        traceId: parent._traceId,\n        spanId: id(),\n        parentId: parent._spanId,\n        sampling: parent._sampling,\n        baggageItems: Object.assign({}, parent._baggageItems),\n        trace: parent._trace\n      })\n    } else {\n      const spanId = id()\n      spanContext = new SpanContext({\n        traceId: spanId,\n        spanId\n      })\n    }\n\n    spanContext._trace.started.push(this)\n    spanContext._trace.startTime = spanContext._trace.startTime || Date.now()\n    spanContext._trace.ticks = spanContext._trace.ticks || now()\n\n    return spanContext\n  }\n\n  _getTime () {\n    const { startTime, ticks } = this._spanContext._trace\n\n    return startTime + now() - ticks\n  }\n\n  _context () {\n    return this._spanContext\n  }\n\n  _tracer () {\n    return this._parentTracer\n  }\n\n  _setOperationName (name) {\n    this._spanContext._name = name\n  }\n\n  _setBaggageItem (key, value) {\n    this._spanContext._baggageItems[key] = value\n  }\n\n  _getBaggageItem (key) {\n    return this._spanContext._baggageItems[key]\n  }\n\n  _addTags (keyValuePairs) {\n    tagger.add(this._spanContext._tags, keyValuePairs)\n\n    this._prioritySampler.sample(this, false)\n  }\n\n  _finish (finishTime) {\n    if (this._duration !== undefined) {\n      return\n    }\n\n    if (DD_TRACE_EXPERIMENTAL_STATE_TRACKING === 'true') {\n      if (!this._spanContext._tags['service.name']) {\n        log.error(`Finishing invalid span: ${this}`)\n      }\n    }\n\n    finishTime = parseFloat(finishTime) || this._getTime()\n\n    this._duration = finishTime - this._startTime\n    this._spanContext._trace.finished.push(this)\n    this._spanContext._isFinished = true\n    this._processor.process(this)\n  }\n}\n\nmodule.exports = DatadogSpan\n"]},"metadata":{},"sourceType":"script"}