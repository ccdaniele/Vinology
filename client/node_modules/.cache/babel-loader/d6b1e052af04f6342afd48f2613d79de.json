{"ast":null,"code":"'use strict';\n\nconst Tags = require('opentracing').Tags;\n\nconst services = {\n  cloudwatchlogs: getService(require('./services/cloudwatchlogs')),\n  dynamodb: getService(require('./services/dynamodb')),\n  kinesis: getService(require('./services/kinesis')),\n  lambda: getService(require('./services/lambda')),\n  s3: getService(require('./services/s3')),\n  redshift: getService(require('./services/redshift')),\n  sns: getService(require('./services/sns')),\n  sqs: getService(require('./services/sqs'))\n};\n\nfunction getService(Service) {\n  return new Service();\n}\n\nconst helpers = {\n  finish(span, err) {\n    if (err) {\n      span.setTag('error', err);\n\n      if (err.requestId) {\n        span.addTags({\n          'aws.response.request_id': err.requestId\n        });\n      }\n    }\n\n    span.finish();\n  },\n\n  isEnabled(serviceIdentifier, config, request) {\n    if (typeof config === 'boolean') {\n      return config;\n    } else if (!config || typeof config !== 'object' || !services[serviceIdentifier]) {\n      return true;\n    }\n\n    return services[serviceIdentifier].isEnabled ? services[serviceIdentifier].isEnabled(config, request) : true;\n  },\n\n  addResponseTags(span, response, serviceName, config) {\n    if (!span) return;\n\n    if (response.request) {\n      this.addServicesTags(span, response, serviceName);\n    }\n\n    config.hooks.request(span, response);\n  },\n\n  addServicesTags(span, response, serviceName) {\n    if (!span) return;\n    const params = response.request.params;\n    const operation = response.request.operation;\n    const extraTags = services[serviceName] ? services[serviceName].generateTags(params, operation, response) : {};\n    const tags = Object.assign({\n      'aws.response.request_id': response.requestId,\n      'resource.name': operation,\n      'span.kind': 'client'\n    }, extraTags);\n    span.addTags(tags);\n  },\n\n  responseExtract(serviceName, request, response, tracer) {\n    if (services[serviceName] && services[serviceName].responseExtract) {\n      const params = request.params;\n      const operation = request.operation;\n      return services[serviceName].responseExtract(params, operation, response, tracer);\n    }\n  },\n\n  requestInject(span, request, serviceName, tracer) {\n    if (!span) return;\n    const inject = services[serviceName] && services[serviceName].requestInject;\n    if (inject) inject(span, request, tracer);\n  },\n\n  wrapCb(cb, serviceName, tags, request, tracer, childOf) {\n    const awsHelpers = this;\n    return function wrappedCb(err, resp) {\n      const maybeChildOf = awsHelpers.responseExtract(serviceName, request, resp, tracer);\n\n      if (maybeChildOf) {\n        const options = {\n          childOf: maybeChildOf,\n          tags: Object.assign({}, tags, {\n            [Tags.SPAN_KIND]: 'server'\n          })\n        };\n        return tracer.wrap('aws.response', options, cb).apply(this, arguments);\n      } else {\n        return tracer.scope().bind(cb, childOf).apply(this, arguments);\n      }\n    };\n  }\n\n};\nmodule.exports = helpers;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-aws-sdk/src/helpers.js"],"names":["Tags","require","services","cloudwatchlogs","getService","dynamodb","kinesis","lambda","s3","redshift","sns","sqs","Service","helpers","finish","span","err","setTag","requestId","addTags","isEnabled","serviceIdentifier","config","request","addResponseTags","response","serviceName","addServicesTags","hooks","params","operation","extraTags","generateTags","tags","Object","assign","responseExtract","tracer","requestInject","inject","wrapCb","cb","childOf","awsHelpers","wrappedCb","resp","maybeChildOf","options","SPAN_KIND","wrap","apply","arguments","scope","bind","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Tags = require('opentracing').Tags\n\nconst services = {\n  cloudwatchlogs: getService(require('./services/cloudwatchlogs')),\n  dynamodb: getService(require('./services/dynamodb')),\n  kinesis: getService(require('./services/kinesis')),\n  lambda: getService(require('./services/lambda')),\n  s3: getService(require('./services/s3')),\n  redshift: getService(require('./services/redshift')),\n  sns: getService(require('./services/sns')),\n  sqs: getService(require('./services/sqs'))\n}\n\nfunction getService (Service) {\n  return new Service()\n}\n\nconst helpers = {\n  finish (span, err) {\n    if (err) {\n      span.setTag('error', err)\n\n      if (err.requestId) {\n        span.addTags({ 'aws.response.request_id': err.requestId })\n      }\n    }\n\n    span.finish()\n  },\n\n  isEnabled (serviceIdentifier, config, request) {\n    if (typeof config === 'boolean') {\n      return config\n    } else if (!config || typeof config !== 'object' || !services[serviceIdentifier]) {\n      return true\n    }\n\n    return services[serviceIdentifier].isEnabled\n      ? services[serviceIdentifier].isEnabled(config, request)\n      : true\n  },\n\n  addResponseTags (span, response, serviceName, config) {\n    if (!span) return\n\n    if (response.request) {\n      this.addServicesTags(span, response, serviceName)\n    }\n\n    config.hooks.request(span, response)\n  },\n\n  addServicesTags (span, response, serviceName) {\n    if (!span) return\n\n    const params = response.request.params\n    const operation = response.request.operation\n    const extraTags = services[serviceName] ? services[serviceName].generateTags(params, operation, response) : {}\n    const tags = Object.assign({\n      'aws.response.request_id': response.requestId,\n      'resource.name': operation,\n      'span.kind': 'client'\n    }, extraTags)\n\n    span.addTags(tags)\n  },\n\n  responseExtract (serviceName, request, response, tracer) {\n    if (services[serviceName] && services[serviceName].responseExtract) {\n      const params = request.params\n      const operation = request.operation\n      return services[serviceName].responseExtract(params, operation, response, tracer)\n    }\n  },\n\n  requestInject (span, request, serviceName, tracer) {\n    if (!span) return\n\n    const inject = services[serviceName] && services[serviceName].requestInject\n    if (inject) inject(span, request, tracer)\n  },\n\n  wrapCb (cb, serviceName, tags, request, tracer, childOf) {\n    const awsHelpers = this\n    return function wrappedCb (err, resp) {\n      const maybeChildOf = awsHelpers.responseExtract(serviceName, request, resp, tracer)\n      if (maybeChildOf) {\n        const options = {\n          childOf: maybeChildOf,\n          tags: Object.assign({}, tags, { [Tags.SPAN_KIND]: 'server' })\n        }\n        return tracer.wrap('aws.response', options, cb).apply(this, arguments)\n      } else {\n        return tracer.scope().bind(cb, childOf).apply(this, arguments)\n      }\n    }\n  }\n}\n\nmodule.exports = helpers\n"]},"metadata":{},"sourceType":"script"}