{"ast":null,"code":"const path = require('path');\n\nconst {\n  getGitMetadata\n} = require('./git');\n\nconst {\n  getCIMetadata\n} = require('./ci');\n\nconst {\n  getRuntimeAndOSMetadata\n} = require('./env');\n\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  CI_WORKSPACE_PATH\n} = require('./tags');\n\nconst id = require('../../id');\n\nconst TEST_FRAMEWORK = 'test.framework';\nconst TEST_TYPE = 'test.type';\nconst TEST_NAME = 'test.name';\nconst TEST_SUITE = 'test.suite';\nconst TEST_STATUS = 'test.status';\nconst TEST_PARAMETERS = 'test.parameters';\nconst TEST_SKIP_REASON = 'test.skip_reason';\nconst ERROR_TYPE = 'error.type';\nconst ERROR_MESSAGE = 'error.msg';\nconst ERROR_STACK = 'error.stack';\nconst CI_APP_ORIGIN = 'ciapp-test';\nmodule.exports = {\n  TEST_FRAMEWORK,\n  TEST_TYPE,\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  TEST_PARAMETERS,\n  TEST_SKIP_REASON,\n  ERROR_TYPE,\n  ERROR_MESSAGE,\n  ERROR_STACK,\n  CI_APP_ORIGIN,\n  getTestEnvironmentMetadata,\n  getTestParametersString,\n  finishAllTraceSpans,\n  getTestParentSpan,\n  getTestSuitePath\n};\n\nfunction getTestEnvironmentMetadata(testFramework) {\n  // TODO: eventually these will come from the tracer (generally available)\n  const ciMetadata = getCIMetadata();\n  const {\n    [GIT_COMMIT_SHA]: commitSHA,\n    [GIT_BRANCH]: branch,\n    [GIT_REPOSITORY_URL]: repositoryUrl,\n    [GIT_TAG]: tag,\n    [GIT_COMMIT_AUTHOR_NAME]: authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: authorEmail,\n    [GIT_COMMIT_MESSAGE]: commitMessage,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath\n  } = ciMetadata;\n  const gitMetadata = getGitMetadata({\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    authorName,\n    authorEmail,\n    commitMessage,\n    ciWorkspacePath\n  });\n  const runtimeAndOSMetadata = getRuntimeAndOSMetadata();\n  return {\n    [TEST_FRAMEWORK]: testFramework,\n    ...gitMetadata,\n    ...ciMetadata,\n    ...runtimeAndOSMetadata\n  };\n}\n\nfunction getTestParametersString(parametersByTestName, testName) {\n  if (!parametersByTestName[testName]) {\n    return '';\n  }\n\n  try {\n    // test is invoked with each parameter set sequencially\n    const testParameters = parametersByTestName[testName].shift();\n    return JSON.stringify({\n      arguments: testParameters,\n      metadata: {}\n    });\n  } catch (e) {\n    // We can't afford to interrupt the test if `testParameters` is not serializable to JSON,\n    // so we ignore the test parameters and move on\n    return '';\n  }\n}\n\nfunction finishAllTraceSpans(span) {\n  span.context()._trace.started.forEach(traceSpan => {\n    if (traceSpan !== span) {\n      traceSpan.finish();\n    }\n  });\n}\n\nfunction getTestParentSpan(tracer) {\n  return tracer.extract('text_map', {\n    'x-datadog-trace-id': id().toString(10),\n    'x-datadog-parent-id': '0000000000000000',\n    'x-datadog-sampled': 1\n  });\n}\n/**\n * We want to make sure that test suites are reported the same way for\n * every OS, so we replace `path.sep` by `/`\n */\n\n\nfunction getTestSuitePath(testSuiteAbsolutePath, sourceRoot) {\n  if (!testSuiteAbsolutePath) {\n    return sourceRoot;\n  }\n\n  const testSuitePath = testSuiteAbsolutePath === sourceRoot ? testSuiteAbsolutePath : path.relative(sourceRoot, testSuiteAbsolutePath);\n  return testSuitePath.replace(path.sep, '/');\n}","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/plugins/util/test.js"],"names":["path","require","getGitMetadata","getCIMetadata","getRuntimeAndOSMetadata","GIT_BRANCH","GIT_COMMIT_SHA","GIT_REPOSITORY_URL","GIT_TAG","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","GIT_COMMIT_MESSAGE","CI_WORKSPACE_PATH","id","TEST_FRAMEWORK","TEST_TYPE","TEST_NAME","TEST_SUITE","TEST_STATUS","TEST_PARAMETERS","TEST_SKIP_REASON","ERROR_TYPE","ERROR_MESSAGE","ERROR_STACK","CI_APP_ORIGIN","module","exports","getTestEnvironmentMetadata","getTestParametersString","finishAllTraceSpans","getTestParentSpan","getTestSuitePath","testFramework","ciMetadata","commitSHA","branch","repositoryUrl","tag","authorName","authorEmail","commitMessage","ciWorkspacePath","gitMetadata","runtimeAndOSMetadata","parametersByTestName","testName","testParameters","shift","JSON","stringify","arguments","metadata","e","span","context","_trace","started","forEach","traceSpan","finish","tracer","extract","toString","testSuiteAbsolutePath","sourceRoot","testSuitePath","relative","replace","sep"],"mappings":"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","sourcesContent":["const path = require('path')\n\nconst { getGitMetadata } = require('./git')\nconst { getCIMetadata } = require('./ci')\nconst { getRuntimeAndOSMetadata } = require('./env')\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  CI_WORKSPACE_PATH\n} = require('./tags')\nconst id = require('../../id')\n\nconst TEST_FRAMEWORK = 'test.framework'\nconst TEST_TYPE = 'test.type'\nconst TEST_NAME = 'test.name'\nconst TEST_SUITE = 'test.suite'\nconst TEST_STATUS = 'test.status'\nconst TEST_PARAMETERS = 'test.parameters'\nconst TEST_SKIP_REASON = 'test.skip_reason'\n\nconst ERROR_TYPE = 'error.type'\nconst ERROR_MESSAGE = 'error.msg'\nconst ERROR_STACK = 'error.stack'\n\nconst CI_APP_ORIGIN = 'ciapp-test'\n\nmodule.exports = {\n  TEST_FRAMEWORK,\n  TEST_TYPE,\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  TEST_PARAMETERS,\n  TEST_SKIP_REASON,\n  ERROR_TYPE,\n  ERROR_MESSAGE,\n  ERROR_STACK,\n  CI_APP_ORIGIN,\n  getTestEnvironmentMetadata,\n  getTestParametersString,\n  finishAllTraceSpans,\n  getTestParentSpan,\n  getTestSuitePath\n}\n\nfunction getTestEnvironmentMetadata (testFramework) {\n  // TODO: eventually these will come from the tracer (generally available)\n  const ciMetadata = getCIMetadata()\n  const {\n    [GIT_COMMIT_SHA]: commitSHA,\n    [GIT_BRANCH]: branch,\n    [GIT_REPOSITORY_URL]: repositoryUrl,\n    [GIT_TAG]: tag,\n    [GIT_COMMIT_AUTHOR_NAME]: authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: authorEmail,\n    [GIT_COMMIT_MESSAGE]: commitMessage,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath\n  } = ciMetadata\n\n  const gitMetadata = getGitMetadata({\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    authorName,\n    authorEmail,\n    commitMessage,\n    ciWorkspacePath\n  })\n\n  const runtimeAndOSMetadata = getRuntimeAndOSMetadata()\n\n  return {\n    [TEST_FRAMEWORK]: testFramework,\n    ...gitMetadata,\n    ...ciMetadata,\n    ...runtimeAndOSMetadata\n  }\n}\n\nfunction getTestParametersString (parametersByTestName, testName) {\n  if (!parametersByTestName[testName]) {\n    return ''\n  }\n  try {\n    // test is invoked with each parameter set sequencially\n    const testParameters = parametersByTestName[testName].shift()\n    return JSON.stringify({ arguments: testParameters, metadata: {} })\n  } catch (e) {\n    // We can't afford to interrupt the test if `testParameters` is not serializable to JSON,\n    // so we ignore the test parameters and move on\n    return ''\n  }\n}\n\nfunction finishAllTraceSpans (span) {\n  span.context()._trace.started.forEach(traceSpan => {\n    if (traceSpan !== span) {\n      traceSpan.finish()\n    }\n  })\n}\n\nfunction getTestParentSpan (tracer) {\n  return tracer.extract('text_map', {\n    'x-datadog-trace-id': id().toString(10),\n    'x-datadog-parent-id': '0000000000000000',\n    'x-datadog-sampled': 1\n  })\n}\n/**\n * We want to make sure that test suites are reported the same way for\n * every OS, so we replace `path.sep` by `/`\n */\nfunction getTestSuitePath (testSuiteAbsolutePath, sourceRoot) {\n  if (!testSuiteAbsolutePath) {\n    return sourceRoot\n  }\n  const testSuitePath = testSuiteAbsolutePath === sourceRoot\n    ? testSuiteAbsolutePath : path.relative(sourceRoot, testSuiteAbsolutePath)\n\n  return testSuitePath.replace(path.sep, '/')\n}\n"]},"metadata":{},"sourceType":"script"}