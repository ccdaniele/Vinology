{"ast":null,"code":"'use strict';\n\nconst {\n  LOG\n} = require('../../../ext/formats');\n\nfunction createWrapEmit(tracer, config) {\n  return function wrapEmit(emit) {\n    return function emitWithTrace(rec, noemit) {\n      const span = tracer.scope().active();\n      tracer.inject(span, LOG, rec);\n      return emit.apply(this, arguments);\n    };\n  };\n}\n\nmodule.exports = {\n  name: 'bunyan',\n  versions: ['>=1'],\n\n  patch(Logger, tracer, config) {\n    if (!tracer._logInjection) return;\n    this.wrap(Logger.prototype, '_emit', createWrapEmit(tracer, config));\n  },\n\n  unpatch(Logger) {\n    this.unwrap(Logger.prototype, '_emit');\n  }\n\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-bunyan/src/index.js"],"names":["LOG","require","createWrapEmit","tracer","config","wrapEmit","emit","emitWithTrace","rec","noemit","span","scope","active","inject","apply","arguments","module","exports","name","versions","patch","Logger","_logInjection","wrap","prototype","unpatch","unwrap"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,sBAAD,CAAvB;;AAEA,SAASC,cAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AACvC,SAAO,SAASC,QAAT,CAAmBC,IAAnB,EAAyB;AAC9B,WAAO,SAASC,aAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqC;AAC1C,YAAMC,IAAI,GAAGP,MAAM,CAACQ,KAAP,GAAeC,MAAf,EAAb;AAEAT,MAAAA,MAAM,CAACU,MAAP,CAAcH,IAAd,EAAoBV,GAApB,EAAyBQ,GAAzB;AAEA,aAAOF,IAAI,CAACQ,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,KAND;AAOD,GARD;AASD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAE,QADS;AAEfC,EAAAA,QAAQ,EAAE,CAAC,KAAD,CAFK;;AAGfC,EAAAA,KAAK,CAAEC,MAAF,EAAUlB,MAAV,EAAkBC,MAAlB,EAA0B;AAC7B,QAAI,CAACD,MAAM,CAACmB,aAAZ,EAA2B;AAC3B,SAAKC,IAAL,CAAUF,MAAM,CAACG,SAAjB,EAA4B,OAA5B,EAAqCtB,cAAc,CAACC,MAAD,EAASC,MAAT,CAAnD;AACD,GANc;;AAOfqB,EAAAA,OAAO,CAAEJ,MAAF,EAAU;AACf,SAAKK,MAAL,CAAYL,MAAM,CAACG,SAAnB,EAA8B,OAA9B;AACD;;AATc,CAAjB","sourcesContent":["'use strict'\n\nconst { LOG } = require('../../../ext/formats')\n\nfunction createWrapEmit (tracer, config) {\n  return function wrapEmit (emit) {\n    return function emitWithTrace (rec, noemit) {\n      const span = tracer.scope().active()\n\n      tracer.inject(span, LOG, rec)\n\n      return emit.apply(this, arguments)\n    }\n  }\n}\n\nmodule.exports = {\n  name: 'bunyan',\n  versions: ['>=1'],\n  patch (Logger, tracer, config) {\n    if (!tracer._logInjection) return\n    this.wrap(Logger.prototype, '_emit', createWrapEmit(tracer, config))\n  },\n  unpatch (Logger) {\n    this.unwrap(Logger.prototype, '_emit')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}