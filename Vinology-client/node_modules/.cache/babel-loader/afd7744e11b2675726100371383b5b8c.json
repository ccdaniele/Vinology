{"ast":null,"code":"'use strict';\n\nconst Tags = require('opentracing').Tags;\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nfunction createWrapQuery(tracer, config) {\n  return function wrapQuery(query) {\n    return function queryWithTrace(sql, values, cb) {\n      const scope = tracer.scope();\n      const childOf = scope.active();\n      const span = tracer.startSpan('mysql.query', {\n        childOf,\n        tags: {\n          [Tags.SPAN_KIND]: Tags.SPAN_KIND_RPC_CLIENT,\n          'service.name': config.service || `${tracer._service}-mysql`,\n          'span.type': 'sql',\n          'span.kind': 'client',\n          'db.type': 'mysql',\n          'db.user': this.config.user,\n          'out.host': this.config.host,\n          'out.port': this.config.port\n        }\n      });\n\n      if (this.config.database) {\n        span.setTag('db.name', this.config.database);\n      }\n\n      analyticsSampler.sample(span, config.measured);\n      const sequence = scope.bind(query, span).apply(this, arguments);\n      scope.bind(sequence);\n      span.setTag('resource.name', sequence.sql);\n\n      if (sequence._callback) {\n        sequence._callback = wrapCallback(tracer, span, childOf, sequence._callback);\n      } else {\n        sequence.on('end', () => {\n          span.finish();\n        });\n      }\n\n      return sequence;\n    };\n  };\n}\n\nfunction createWrapGetConnection(tracer, config) {\n  return function wrapGetConnection(getConnection) {\n    return function getConnectionWithTrace(cb) {\n      const scope = tracer.scope();\n      arguments[0] = scope.bind(cb);\n      return scope.bind(getConnection).apply(this, arguments);\n    };\n  };\n}\n\nfunction wrapCallback(tracer, span, parent, done) {\n  return tracer.scope().bind((...args) => {\n    const err = args[0];\n\n    if (err) {\n      span.addTags({\n        'error.type': err.name,\n        'error.msg': err.message,\n        'error.stack': err.stack\n      });\n    }\n\n    span.finish();\n    done(...args);\n  }, parent);\n}\n\nfunction patchConnection(Connection, tracer, config) {\n  this.wrap(Connection.prototype, 'query', createWrapQuery(tracer, config));\n}\n\nfunction unpatchConnection(Connection) {\n  this.unwrap(Connection.prototype, 'query');\n}\n\nfunction patchPool(Pool, tracer, config) {\n  this.wrap(Pool.prototype, 'getConnection', createWrapGetConnection(tracer, config));\n}\n\nfunction unpatchPool(Pool) {\n  this.unwrap(Pool.prototype, 'getConnection');\n}\n\nmodule.exports = [{\n  name: 'mysql',\n  file: 'lib/Connection.js',\n  versions: ['>=2'],\n  patch: patchConnection,\n  unpatch: unpatchConnection\n}, {\n  name: 'mysql',\n  file: 'lib/Pool.js',\n  versions: ['>=2'],\n  patch: patchPool,\n  unpatch: unpatchPool\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-mysql/src/index.js"],"names":["Tags","require","analyticsSampler","createWrapQuery","tracer","config","wrapQuery","query","queryWithTrace","sql","values","cb","scope","childOf","active","span","startSpan","tags","SPAN_KIND","SPAN_KIND_RPC_CLIENT","service","_service","user","host","port","database","setTag","sample","measured","sequence","bind","apply","arguments","_callback","wrapCallback","on","finish","createWrapGetConnection","wrapGetConnection","getConnection","getConnectionWithTrace","parent","done","args","err","addTags","name","message","stack","patchConnection","Connection","wrap","prototype","unpatchConnection","unwrap","patchPool","Pool","unpatchPool","module","exports","file","versions","patch","unpatch"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Tags = require('opentracing').Tags\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\n\nfunction createWrapQuery (tracer, config) {\n  return function wrapQuery (query) {\n    return function queryWithTrace (sql, values, cb) {\n      const scope = tracer.scope()\n      const childOf = scope.active()\n      const span = tracer.startSpan('mysql.query', {\n        childOf,\n        tags: {\n          [Tags.SPAN_KIND]: Tags.SPAN_KIND_RPC_CLIENT,\n          'service.name': config.service || `${tracer._service}-mysql`,\n          'span.type': 'sql',\n          'span.kind': 'client',\n          'db.type': 'mysql',\n          'db.user': this.config.user,\n          'out.host': this.config.host,\n          'out.port': this.config.port\n        }\n      })\n\n      if (this.config.database) {\n        span.setTag('db.name', this.config.database)\n      }\n\n      analyticsSampler.sample(span, config.measured)\n\n      const sequence = scope.bind(query, span).apply(this, arguments)\n\n      scope.bind(sequence)\n\n      span.setTag('resource.name', sequence.sql)\n\n      if (sequence._callback) {\n        sequence._callback = wrapCallback(tracer, span, childOf, sequence._callback)\n      } else {\n        sequence.on('end', () => {\n          span.finish()\n        })\n      }\n\n      return sequence\n    }\n  }\n}\n\nfunction createWrapGetConnection (tracer, config) {\n  return function wrapGetConnection (getConnection) {\n    return function getConnectionWithTrace (cb) {\n      const scope = tracer.scope()\n\n      arguments[0] = scope.bind(cb)\n\n      return scope.bind(getConnection).apply(this, arguments)\n    }\n  }\n}\n\nfunction wrapCallback (tracer, span, parent, done) {\n  return tracer.scope().bind((...args) => {\n    const err = args[0]\n    if (err) {\n      span.addTags({\n        'error.type': err.name,\n        'error.msg': err.message,\n        'error.stack': err.stack\n      })\n    }\n\n    span.finish()\n\n    done(...args)\n  }, parent)\n}\n\nfunction patchConnection (Connection, tracer, config) {\n  this.wrap(Connection.prototype, 'query', createWrapQuery(tracer, config))\n}\n\nfunction unpatchConnection (Connection) {\n  this.unwrap(Connection.prototype, 'query')\n}\n\nfunction patchPool (Pool, tracer, config) {\n  this.wrap(Pool.prototype, 'getConnection', createWrapGetConnection(tracer, config))\n}\n\nfunction unpatchPool (Pool) {\n  this.unwrap(Pool.prototype, 'getConnection')\n}\n\nmodule.exports = [\n  {\n    name: 'mysql',\n    file: 'lib/Connection.js',\n    versions: ['>=2'],\n    patch: patchConnection,\n    unpatch: unpatchConnection\n  },\n  {\n    name: 'mysql',\n    file: 'lib/Pool.js',\n    versions: ['>=2'],\n    patch: patchPool,\n    unpatch: unpatchPool\n  }\n]\n"]},"metadata":{},"sourceType":"script"}