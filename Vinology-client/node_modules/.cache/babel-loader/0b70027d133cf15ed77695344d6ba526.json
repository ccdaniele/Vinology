{"ast":null,"code":"\"use strict\";\n/* eslint-disable import/no-extraneous-dependencies */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar opentracing = require(\"../index\");\n\nvar mock_context_1 = require(\"./mock_context\");\n/**\n * OpenTracing Span implementation designed for use in unit tests.\n */\n\n\nvar MockSpan =\n/** @class */\nfunction (_super) {\n  __extends(MockSpan, _super); //------------------------------------------------------------------------//\n  // MockSpan-specific\n  //------------------------------------------------------------------------//\n\n\n  function MockSpan(tracer) {\n    var _this = _super.call(this) || this;\n\n    _this._mockTracer = tracer;\n    _this._uuid = _this._generateUUID();\n    _this._startMs = Date.now();\n    _this._finishMs = 0;\n    _this._operationName = '';\n    _this._tags = {};\n    _this._logs = [];\n    return _this;\n  } //------------------------------------------------------------------------//\n  // OpenTracing implementation\n  //------------------------------------------------------------------------//\n\n\n  MockSpan.prototype._context = function () {\n    return new mock_context_1.default(this);\n  };\n\n  MockSpan.prototype._setOperationName = function (name) {\n    this._operationName = name;\n  };\n\n  MockSpan.prototype._addTags = function (set) {\n    var keys = Object.keys(set);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      this._tags[key] = set[key];\n    }\n  };\n\n  MockSpan.prototype._log = function (fields, timestamp) {\n    this._logs.push({\n      fields: fields,\n      timestamp: timestamp\n    });\n  };\n\n  MockSpan.prototype._finish = function (finishTime) {\n    this._finishMs = finishTime || Date.now();\n  };\n\n  MockSpan.prototype.uuid = function () {\n    return this._uuid;\n  };\n\n  MockSpan.prototype.operationName = function () {\n    return this._operationName;\n  };\n\n  MockSpan.prototype.durationMs = function () {\n    return this._finishMs - this._startMs;\n  };\n\n  MockSpan.prototype.tags = function () {\n    return this._tags;\n  };\n\n  MockSpan.prototype.tracer = function () {\n    return this._mockTracer;\n  };\n\n  MockSpan.prototype._generateUUID = function () {\n    var p0 = (\"00000000\" + Math.abs(Math.random() * 0xFFFFFFFF | 0).toString(16)).substr(-8);\n    var p1 = (\"00000000\" + Math.abs(Math.random() * 0xFFFFFFFF | 0).toString(16)).substr(-8);\n    return \"\" + p0 + p1;\n  };\n\n  MockSpan.prototype.addReference = function (ref) {};\n  /**\n   * Returns a simplified object better for console.log()'ing.\n   */\n\n\n  MockSpan.prototype.debug = function () {\n    var obj = {\n      uuid: this._uuid,\n      operation: this._operationName,\n      millis: [this._finishMs - this._startMs, this._startMs, this._finishMs]\n    };\n\n    if (Object.keys(this._tags).length) {\n      obj.tags = this._tags;\n    }\n\n    return obj;\n  };\n\n  return MockSpan;\n}(opentracing.Span);\n\nexports.MockSpan = MockSpan;\nexports.default = MockSpan;","map":{"version":3,"sources":["../../src/mock_tracer/mock_span.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/* eslint-disable import/no-extraneous-dependencies */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar opentracing = require(\"../index\");\nvar mock_context_1 = require(\"./mock_context\");\n/**\n * OpenTracing Span implementation designed for use in unit tests.\n */\nvar MockSpan = /** @class */ (function (_super) {\n    __extends(MockSpan, _super);\n    //------------------------------------------------------------------------//\n    // MockSpan-specific\n    //------------------------------------------------------------------------//\n    function MockSpan(tracer) {\n        var _this = _super.call(this) || this;\n        _this._mockTracer = tracer;\n        _this._uuid = _this._generateUUID();\n        _this._startMs = Date.now();\n        _this._finishMs = 0;\n        _this._operationName = '';\n        _this._tags = {};\n        _this._logs = [];\n        return _this;\n    }\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n    MockSpan.prototype._context = function () {\n        return new mock_context_1.default(this);\n    };\n    MockSpan.prototype._setOperationName = function (name) {\n        this._operationName = name;\n    };\n    MockSpan.prototype._addTags = function (set) {\n        var keys = Object.keys(set);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            this._tags[key] = set[key];\n        }\n    };\n    MockSpan.prototype._log = function (fields, timestamp) {\n        this._logs.push({\n            fields: fields,\n            timestamp: timestamp\n        });\n    };\n    MockSpan.prototype._finish = function (finishTime) {\n        this._finishMs = finishTime || Date.now();\n    };\n    MockSpan.prototype.uuid = function () {\n        return this._uuid;\n    };\n    MockSpan.prototype.operationName = function () {\n        return this._operationName;\n    };\n    MockSpan.prototype.durationMs = function () {\n        return this._finishMs - this._startMs;\n    };\n    MockSpan.prototype.tags = function () {\n        return this._tags;\n    };\n    MockSpan.prototype.tracer = function () {\n        return this._mockTracer;\n    };\n    MockSpan.prototype._generateUUID = function () {\n        var p0 = (\"00000000\" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);\n        var p1 = (\"00000000\" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);\n        return \"\" + p0 + p1;\n    };\n    MockSpan.prototype.addReference = function (ref) {\n    };\n    /**\n     * Returns a simplified object better for console.log()'ing.\n     */\n    MockSpan.prototype.debug = function () {\n        var obj = {\n            uuid: this._uuid,\n            operation: this._operationName,\n            millis: [this._finishMs - this._startMs, this._startMs, this._finishMs]\n        };\n        if (Object.keys(this._tags).length) {\n            obj.tags = this._tags;\n        }\n        return obj;\n    };\n    return MockSpan;\n}(opentracing.Span));\nexports.MockSpan = MockSpan;\nexports.default = MockSpan;\n//# sourceMappingURL=mock_span.js.map"]},"metadata":{},"sourceType":"script"}