{"ast":null,"code":"const {\n  SAMPLING_RULE_DECISION\n} = require('../../dd-trace/src/constants');\n\nconst {\n  TEST_TYPE,\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  TEST_SKIP_REASON,\n  CI_APP_ORIGIN,\n  ERROR_MESSAGE,\n  getTestEnvironmentMetadata,\n  finishAllTraceSpans,\n  getTestSuitePath\n} = require('../../dd-trace/src/plugins/util/test');\n\nfunction setStatusFromResult(span, result, tag) {\n  if (result.status === 1) {\n    span.setTag(tag, 'pass');\n  } else if (result.status === 2) {\n    span.setTag(tag, 'skip');\n  } else if (result.status === 4) {\n    span.setTag(tag, 'skip');\n    span.setTag(TEST_SKIP_REASON, 'not implemented');\n  } else {\n    span.setTag(tag, 'fail');\n    span.setTag(ERROR_MESSAGE, result.message);\n  }\n}\n\nfunction setStatusFromResultLatest(span, result, tag) {\n  if (result.status === 'PASSED') {\n    span.setTag(tag, 'pass');\n  } else if (result.status === 'SKIPPED' || result.status === 'PENDING') {\n    span.setTag(tag, 'skip');\n  } else if (result.status === 'UNDEFINED') {\n    span.setTag(tag, 'skip');\n    span.setTag(TEST_SKIP_REASON, 'not implemented');\n  } else {\n    span.setTag(tag, 'fail');\n    span.setTag(ERROR_MESSAGE, result.message);\n  }\n}\n\nfunction createWrapRun(tracer, testEnvironmentMetadata, sourceRoot, setStatus) {\n  return function wrapRun(run) {\n    return function handleRun() {\n      const testName = this.pickle.name;\n      const testSuite = getTestSuitePath(this.pickle.uri, sourceRoot);\n      const commonSpanTags = {\n        [TEST_TYPE]: 'test',\n        [TEST_NAME]: testName,\n        [TEST_SUITE]: testSuite,\n        [SAMPLING_RULE_DECISION]: 1,\n        ...testEnvironmentMetadata\n      };\n      return tracer.trace('cucumber.test', {\n        type: 'test',\n        resource: testName,\n        tags: commonSpanTags\n      }, testSpan => {\n        testSpan.context()._trace.origin = CI_APP_ORIGIN;\n        const promise = run.apply(this, arguments);\n        promise.then(() => {\n          setStatus(testSpan, this.getWorstStepResult(), TEST_STATUS);\n        }).finally(() => {\n          finishAllTraceSpans(testSpan);\n        });\n        return promise;\n      });\n    };\n  };\n}\n\nfunction createWrapRunStep(tracer, getResourceName, setStatus) {\n  return function wrapRunStep(runStep) {\n    return function handleRunStep() {\n      const resource = getResourceName(arguments[0]);\n      return tracer.trace('cucumber.step', {\n        resource,\n        tags: {\n          'cucumber.step': resource\n        }\n      }, span => {\n        const promise = runStep.apply(this, arguments);\n        promise.then(result => {\n          setStatus(span, result, 'step.status');\n        });\n        return promise;\n      });\n    };\n  };\n}\n\nmodule.exports = [{\n  name: '@cucumber/cucumber',\n  versions: ['7.0.0 - 7.2.1'],\n  file: 'lib/runtime/pickle_runner.js',\n\n  patch(PickleRunner, tracer) {\n    const testEnvironmentMetadata = getTestEnvironmentMetadata('cucumber');\n    const sourceRoot = process.cwd();\n    const pl = PickleRunner.default;\n    this.wrap(pl.prototype, 'run', createWrapRun(tracer, testEnvironmentMetadata, sourceRoot, setStatusFromResult));\n\n    const getResourceName = testStep => {\n      return testStep.isHook ? 'hook' : testStep.pickleStep.text;\n    };\n\n    this.wrap(pl.prototype, 'runStep', createWrapRunStep(tracer, getResourceName, setStatusFromResult));\n  },\n\n  unpatch(PickleRunner) {\n    const pl = PickleRunner.default;\n    this.unwrap(pl.prototype, 'run');\n    this.unwrap(pl.prototype, 'runStep');\n  }\n\n}, {\n  name: '@cucumber/cucumber',\n  versions: ['>=7.3.0'],\n  file: 'lib/runtime/test_case_runner.js',\n\n  patch(TestCaseRunner, tracer) {\n    const testEnvironmentMetadata = getTestEnvironmentMetadata('cucumber');\n    const sourceRoot = process.cwd();\n    const pl = TestCaseRunner.default;\n    this.wrap(pl.prototype, 'run', createWrapRun(tracer, testEnvironmentMetadata, sourceRoot, setStatusFromResultLatest));\n\n    const getResourceName = testStep => {\n      return testStep.text;\n    };\n\n    this.wrap(pl.prototype, 'runStep', createWrapRunStep(tracer, getResourceName, setStatusFromResultLatest));\n  },\n\n  unpatch(TestCaseRunner) {\n    const pl = TestCaseRunner.default;\n    this.unwrap(pl.prototype, 'run');\n    this.unwrap(pl.prototype, 'runStep');\n  }\n\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-cucumber/src/index.js"],"names":["SAMPLING_RULE_DECISION","require","TEST_TYPE","TEST_NAME","TEST_SUITE","TEST_STATUS","TEST_SKIP_REASON","CI_APP_ORIGIN","ERROR_MESSAGE","getTestEnvironmentMetadata","finishAllTraceSpans","getTestSuitePath","setStatusFromResult","span","result","tag","status","setTag","message","setStatusFromResultLatest","createWrapRun","tracer","testEnvironmentMetadata","sourceRoot","setStatus","wrapRun","run","handleRun","testName","pickle","name","testSuite","uri","commonSpanTags","trace","type","resource","tags","testSpan","context","_trace","origin","promise","apply","arguments","then","getWorstStepResult","finally","createWrapRunStep","getResourceName","wrapRunStep","runStep","handleRunStep","module","exports","versions","file","patch","PickleRunner","process","cwd","pl","default","wrap","prototype","testStep","isHook","pickleStep","text","unpatch","unwrap","TestCaseRunner"],"mappings":"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","sourcesContent":["const { SAMPLING_RULE_DECISION } = require('../../dd-trace/src/constants')\n\nconst {\n  TEST_TYPE,\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  TEST_SKIP_REASON,\n  CI_APP_ORIGIN,\n  ERROR_MESSAGE,\n  getTestEnvironmentMetadata,\n  finishAllTraceSpans,\n  getTestSuitePath\n} = require('../../dd-trace/src/plugins/util/test')\n\nfunction setStatusFromResult (span, result, tag) {\n  if (result.status === 1) {\n    span.setTag(tag, 'pass')\n  } else if (result.status === 2) {\n    span.setTag(tag, 'skip')\n  } else if (result.status === 4) {\n    span.setTag(tag, 'skip')\n    span.setTag(TEST_SKIP_REASON, 'not implemented')\n  } else {\n    span.setTag(tag, 'fail')\n    span.setTag(ERROR_MESSAGE, result.message)\n  }\n}\n\nfunction setStatusFromResultLatest (span, result, tag) {\n  if (result.status === 'PASSED') {\n    span.setTag(tag, 'pass')\n  } else if (result.status === 'SKIPPED' || result.status === 'PENDING') {\n    span.setTag(tag, 'skip')\n  } else if (result.status === 'UNDEFINED') {\n    span.setTag(tag, 'skip')\n    span.setTag(TEST_SKIP_REASON, 'not implemented')\n  } else {\n    span.setTag(tag, 'fail')\n    span.setTag(ERROR_MESSAGE, result.message)\n  }\n}\n\nfunction createWrapRun (tracer, testEnvironmentMetadata, sourceRoot, setStatus) {\n  return function wrapRun (run) {\n    return function handleRun () {\n      const testName = this.pickle.name\n      const testSuite = getTestSuitePath(this.pickle.uri, sourceRoot)\n\n      const commonSpanTags = {\n        [TEST_TYPE]: 'test',\n        [TEST_NAME]: testName,\n        [TEST_SUITE]: testSuite,\n        [SAMPLING_RULE_DECISION]: 1,\n        ...testEnvironmentMetadata\n      }\n\n      return tracer.trace(\n        'cucumber.test',\n        {\n          type: 'test',\n          resource: testName,\n          tags: commonSpanTags\n        },\n        (testSpan) => {\n          testSpan.context()._trace.origin = CI_APP_ORIGIN\n          const promise = run.apply(this, arguments)\n          promise.then(() => {\n            setStatus(testSpan, this.getWorstStepResult(), TEST_STATUS)\n          }).finally(() => {\n            finishAllTraceSpans(testSpan)\n          })\n          return promise\n        }\n      )\n    }\n  }\n}\n\nfunction createWrapRunStep (tracer, getResourceName, setStatus) {\n  return function wrapRunStep (runStep) {\n    return function handleRunStep () {\n      const resource = getResourceName(arguments[0])\n      return tracer.trace(\n        'cucumber.step',\n        { resource, tags: { 'cucumber.step': resource } },\n        (span) => {\n          const promise = runStep.apply(this, arguments)\n          promise.then((result) => {\n            setStatus(span, result, 'step.status')\n          })\n          return promise\n        }\n      )\n    }\n  }\n}\n\nmodule.exports = [\n  {\n    name: '@cucumber/cucumber',\n    versions: ['7.0.0 - 7.2.1'],\n    file: 'lib/runtime/pickle_runner.js',\n    patch (PickleRunner, tracer) {\n      const testEnvironmentMetadata = getTestEnvironmentMetadata('cucumber')\n      const sourceRoot = process.cwd()\n      const pl = PickleRunner.default\n      this.wrap(\n        pl.prototype,\n        'run',\n        createWrapRun(tracer, testEnvironmentMetadata, sourceRoot, setStatusFromResult)\n      )\n      const getResourceName = (testStep) => {\n        return testStep.isHook ? 'hook' : testStep.pickleStep.text\n      }\n      this.wrap(pl.prototype, 'runStep', createWrapRunStep(tracer, getResourceName, setStatusFromResult))\n    },\n    unpatch (PickleRunner) {\n      const pl = PickleRunner.default\n      this.unwrap(pl.prototype, 'run')\n      this.unwrap(pl.prototype, 'runStep')\n    }\n  },\n  {\n    name: '@cucumber/cucumber',\n    versions: ['>=7.3.0'],\n    file: 'lib/runtime/test_case_runner.js',\n    patch (TestCaseRunner, tracer) {\n      const testEnvironmentMetadata = getTestEnvironmentMetadata('cucumber')\n      const sourceRoot = process.cwd()\n      const pl = TestCaseRunner.default\n      this.wrap(\n        pl.prototype,\n        'run',\n        createWrapRun(tracer, testEnvironmentMetadata, sourceRoot, setStatusFromResultLatest)\n      )\n      const getResourceName = (testStep) => {\n        return testStep.text\n      }\n      this.wrap(pl.prototype, 'runStep', createWrapRunStep(tracer, getResourceName, setStatusFromResultLatest))\n    },\n    unpatch (TestCaseRunner) {\n      const pl = TestCaseRunner.default\n      this.unwrap(pl.prototype, 'run')\n      this.unwrap(pl.prototype, 'runStep')\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}