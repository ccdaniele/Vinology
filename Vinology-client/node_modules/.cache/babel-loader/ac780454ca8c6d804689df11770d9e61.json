{"ast":null,"code":"const {\n  sanitizedExec\n} = require('./exec');\n\nconst {\n  GIT_COMMIT_SHA,\n  GIT_BRANCH,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_COMMITTER_DATE,\n  GIT_COMMIT_COMMITTER_EMAIL,\n  GIT_COMMIT_COMMITTER_NAME,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  CI_WORKSPACE_PATH\n} = require('./tags'); // If there is ciMetadata, it takes precedence.\n\n\nfunction getGitMetadata(ciMetadata) {\n  const {\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    commitMessage,\n    authorName: ciAuthorName,\n    authorEmail: ciAuthorEmail,\n    ciWorkspacePath\n  } = ciMetadata; // With stdio: 'pipe', errors in this command will not be output to the parent process,\n  // so if `git` is not present in the env, we won't show a warning to the user.\n\n  const [authorName, authorEmail, authorDate, committerName, committerEmail, committerDate] = sanitizedExec('git show -s --format=%an,%ae,%ad,%cn,%ce,%cd', {\n    stdio: 'pipe'\n  }).split(',');\n  const {\n    DD_GIT_REPOSITORY_URL,\n    DD_GIT_COMMIT_SHA,\n    DD_GIT_BRANCH,\n    DD_GIT_TAG,\n    DD_GIT_COMMIT_MESSAGE,\n    DD_GIT_COMMIT_AUTHOR_NAME,\n    DD_GIT_COMMIT_AUTHOR_EMAIL,\n    DD_GIT_COMMIT_AUTHOR_DATE,\n    DD_GIT_COMMIT_COMMITTER_NAME,\n    DD_GIT_COMMIT_COMMITTER_EMAIL,\n    DD_GIT_COMMIT_COMMITTER_DATE\n  } = process.env;\n  return {\n    [GIT_REPOSITORY_URL]: DD_GIT_REPOSITORY_URL || repositoryUrl || sanitizedExec('git ls-remote --get-url', {\n      stdio: 'pipe'\n    }),\n    [GIT_COMMIT_MESSAGE]: DD_GIT_COMMIT_MESSAGE || commitMessage || sanitizedExec('git show -s --format=%s', {\n      stdio: 'pipe'\n    }),\n    [GIT_COMMIT_AUTHOR_DATE]: DD_GIT_COMMIT_AUTHOR_DATE || authorDate,\n    [GIT_COMMIT_AUTHOR_NAME]: DD_GIT_COMMIT_AUTHOR_NAME || ciAuthorName || authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: DD_GIT_COMMIT_AUTHOR_EMAIL || ciAuthorEmail || authorEmail,\n    [GIT_COMMIT_COMMITTER_DATE]: DD_GIT_COMMIT_COMMITTER_DATE || committerDate,\n    [GIT_COMMIT_COMMITTER_NAME]: DD_GIT_COMMIT_COMMITTER_NAME || committerName,\n    [GIT_COMMIT_COMMITTER_EMAIL]: DD_GIT_COMMIT_COMMITTER_EMAIL || committerEmail,\n    [GIT_BRANCH]: DD_GIT_BRANCH || branch || sanitizedExec('git rev-parse --abbrev-ref HEAD', {\n      stdio: 'pipe'\n    }),\n    [GIT_COMMIT_SHA]: DD_GIT_COMMIT_SHA || commitSHA || sanitizedExec('git rev-parse HEAD', {\n      stdio: 'pipe'\n    }),\n    [GIT_TAG]: DD_GIT_TAG || tag,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath || sanitizedExec('git rev-parse --show-toplevel', {\n      stdio: 'pipe'\n    })\n  };\n}\n\nmodule.exports = {\n  getGitMetadata\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/plugins/util/git.js"],"names":["sanitizedExec","require","GIT_COMMIT_SHA","GIT_BRANCH","GIT_REPOSITORY_URL","GIT_TAG","GIT_COMMIT_MESSAGE","GIT_COMMIT_COMMITTER_DATE","GIT_COMMIT_COMMITTER_EMAIL","GIT_COMMIT_COMMITTER_NAME","GIT_COMMIT_AUTHOR_DATE","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","CI_WORKSPACE_PATH","getGitMetadata","ciMetadata","commitSHA","branch","repositoryUrl","tag","commitMessage","authorName","ciAuthorName","authorEmail","ciAuthorEmail","ciWorkspacePath","authorDate","committerName","committerEmail","committerDate","stdio","split","DD_GIT_REPOSITORY_URL","DD_GIT_COMMIT_SHA","DD_GIT_BRANCH","DD_GIT_TAG","DD_GIT_COMMIT_MESSAGE","DD_GIT_COMMIT_AUTHOR_NAME","DD_GIT_COMMIT_AUTHOR_EMAIL","DD_GIT_COMMIT_AUTHOR_DATE","DD_GIT_COMMIT_COMMITTER_NAME","DD_GIT_COMMIT_COMMITTER_EMAIL","DD_GIT_COMMIT_COMMITTER_DATE","process","env","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,QAAD,CAAjC;;AAEA,MAAM;AACJC,EAAAA,cADI;AAEJC,EAAAA,UAFI;AAGJC,EAAAA,kBAHI;AAIJC,EAAAA,OAJI;AAKJC,EAAAA,kBALI;AAMJC,EAAAA,yBANI;AAOJC,EAAAA,0BAPI;AAQJC,EAAAA,yBARI;AASJC,EAAAA,sBATI;AAUJC,EAAAA,uBAVI;AAWJC,EAAAA,sBAXI;AAYJC,EAAAA;AAZI,IAaFZ,OAAO,CAAC,QAAD,CAbX,C,CAeA;;;AACA,SAASa,cAAT,CAAyBC,UAAzB,EAAqC;AACnC,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,UAAU,EAAEC,YANR;AAOJC,IAAAA,WAAW,EAAEC,aAPT;AAQJC,IAAAA;AARI,MASFV,UATJ,CADmC,CAYnC;AACA;;AACA,QAAM,CACJM,UADI,EAEJE,WAFI,EAGJG,UAHI,EAIJC,aAJI,EAKJC,cALI,EAMJC,aANI,IAOF7B,aAAa,CAAC,8CAAD,EAAiD;AAAE8B,IAAAA,KAAK,EAAE;AAAT,GAAjD,CAAb,CAAiFC,KAAjF,CAAuF,GAAvF,CAPJ;AASA,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,qBALI;AAMJC,IAAAA,yBANI;AAOJC,IAAAA,0BAPI;AAQJC,IAAAA,yBARI;AASJC,IAAAA,4BATI;AAUJC,IAAAA,6BAVI;AAWJC,IAAAA;AAXI,MAYFC,OAAO,CAACC,GAZZ;AAcA,SAAO;AACL,KAACxC,kBAAD,GACE4B,qBAAqB,IAAId,aAAzB,IAA0ClB,aAAa,CAAC,yBAAD,EAA4B;AAAE8B,MAAAA,KAAK,EAAE;AAAT,KAA5B,CAFpD;AAGL,KAACxB,kBAAD,GACE8B,qBAAqB,IAAIhB,aAAzB,IAA0CpB,aAAa,CAAC,yBAAD,EAA4B;AAAE8B,MAAAA,KAAK,EAAE;AAAT,KAA5B,CAJpD;AAKL,KAACpB,sBAAD,GAA0B6B,yBAAyB,IAAIb,UALlD;AAML,KAACd,sBAAD,GAA0ByB,yBAAyB,IAAIf,YAA7B,IAA6CD,UANlE;AAOL,KAACV,uBAAD,GAA2B2B,0BAA0B,IAAId,aAA9B,IAA+CD,WAPrE;AAQL,KAAChB,yBAAD,GAA6BmC,4BAA4B,IAAIb,aARxD;AASL,KAACpB,yBAAD,GAA6B+B,4BAA4B,IAAIb,aATxD;AAUL,KAACnB,0BAAD,GAA8BiC,6BAA6B,IAAIb,cAV1D;AAWL,KAACzB,UAAD,GAAc+B,aAAa,IAAIjB,MAAjB,IAA2BjB,aAAa,CAAC,iCAAD,EAAoC;AAAE8B,MAAAA,KAAK,EAAE;AAAT,KAApC,CAXjD;AAYL,KAAC5B,cAAD,GAAkB+B,iBAAiB,IAAIjB,SAArB,IAAkChB,aAAa,CAAC,oBAAD,EAAuB;AAAE8B,MAAAA,KAAK,EAAE;AAAT,KAAvB,CAZ5D;AAaL,KAACzB,OAAD,GAAW8B,UAAU,IAAIhB,GAbpB;AAcL,KAACN,iBAAD,GAAqBY,eAAe,IAAIzB,aAAa,CAAC,+BAAD,EAAkC;AAAE8B,MAAAA,KAAK,EAAE;AAAT,KAAlC;AAdhD,GAAP;AAgBD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AAAEhC,EAAAA;AAAF,CAAjB","sourcesContent":["const { sanitizedExec } = require('./exec')\n\nconst {\n  GIT_COMMIT_SHA,\n  GIT_BRANCH,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_COMMITTER_DATE,\n  GIT_COMMIT_COMMITTER_EMAIL,\n  GIT_COMMIT_COMMITTER_NAME,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  CI_WORKSPACE_PATH\n} = require('./tags')\n\n// If there is ciMetadata, it takes precedence.\nfunction getGitMetadata (ciMetadata) {\n  const {\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    commitMessage,\n    authorName: ciAuthorName,\n    authorEmail: ciAuthorEmail,\n    ciWorkspacePath\n  } = ciMetadata\n\n  // With stdio: 'pipe', errors in this command will not be output to the parent process,\n  // so if `git` is not present in the env, we won't show a warning to the user.\n  const [\n    authorName,\n    authorEmail,\n    authorDate,\n    committerName,\n    committerEmail,\n    committerDate\n  ] = sanitizedExec('git show -s --format=%an,%ae,%ad,%cn,%ce,%cd', { stdio: 'pipe' }).split(',')\n\n  const {\n    DD_GIT_REPOSITORY_URL,\n    DD_GIT_COMMIT_SHA,\n    DD_GIT_BRANCH,\n    DD_GIT_TAG,\n    DD_GIT_COMMIT_MESSAGE,\n    DD_GIT_COMMIT_AUTHOR_NAME,\n    DD_GIT_COMMIT_AUTHOR_EMAIL,\n    DD_GIT_COMMIT_AUTHOR_DATE,\n    DD_GIT_COMMIT_COMMITTER_NAME,\n    DD_GIT_COMMIT_COMMITTER_EMAIL,\n    DD_GIT_COMMIT_COMMITTER_DATE\n  } = process.env\n\n  return {\n    [GIT_REPOSITORY_URL]:\n      DD_GIT_REPOSITORY_URL || repositoryUrl || sanitizedExec('git ls-remote --get-url', { stdio: 'pipe' }),\n    [GIT_COMMIT_MESSAGE]:\n      DD_GIT_COMMIT_MESSAGE || commitMessage || sanitizedExec('git show -s --format=%s', { stdio: 'pipe' }),\n    [GIT_COMMIT_AUTHOR_DATE]: DD_GIT_COMMIT_AUTHOR_DATE || authorDate,\n    [GIT_COMMIT_AUTHOR_NAME]: DD_GIT_COMMIT_AUTHOR_NAME || ciAuthorName || authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: DD_GIT_COMMIT_AUTHOR_EMAIL || ciAuthorEmail || authorEmail,\n    [GIT_COMMIT_COMMITTER_DATE]: DD_GIT_COMMIT_COMMITTER_DATE || committerDate,\n    [GIT_COMMIT_COMMITTER_NAME]: DD_GIT_COMMIT_COMMITTER_NAME || committerName,\n    [GIT_COMMIT_COMMITTER_EMAIL]: DD_GIT_COMMIT_COMMITTER_EMAIL || committerEmail,\n    [GIT_BRANCH]: DD_GIT_BRANCH || branch || sanitizedExec('git rev-parse --abbrev-ref HEAD', { stdio: 'pipe' }),\n    [GIT_COMMIT_SHA]: DD_GIT_COMMIT_SHA || commitSHA || sanitizedExec('git rev-parse HEAD', { stdio: 'pipe' }),\n    [GIT_TAG]: DD_GIT_TAG || tag,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath || sanitizedExec('git rev-parse --show-toplevel', { stdio: 'pipe' })\n  }\n}\n\nmodule.exports = { getGitMetadata }\n"]},"metadata":{},"sourceType":"script"}