{"ast":null,"code":"'use strict';\n\nconst Span = require('opentracing').Span;\n\nconst NoopSpanContext = require('../noop/span_context');\n\nconst id = require('../id');\n\nclass NoopSpan extends Span {\n  constructor(tracer, parent) {\n    super();\n    this._noopTracer = tracer;\n    this._noopContext = this._createContext(parent);\n  }\n\n  _context() {\n    return this._noopContext;\n  }\n\n  _tracer() {\n    return this._noopTracer;\n  }\n\n  _createContext(parent) {\n    const spanId = id();\n\n    if (parent) {\n      return new NoopSpanContext({\n        noop: this,\n        traceId: parent._traceId,\n        spanId,\n        parentId: parent._spanId,\n        baggageItems: Object.assign({}, parent._baggageItems)\n      });\n    } else {\n      return new NoopSpanContext({\n        noop: this,\n        traceId: spanId,\n        spanId\n      });\n    }\n  }\n\n}\n\nmodule.exports = NoopSpan;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/noop/span.js"],"names":["Span","require","NoopSpanContext","id","NoopSpan","constructor","tracer","parent","_noopTracer","_noopContext","_createContext","_context","_tracer","spanId","noop","traceId","_traceId","parentId","_spanId","baggageItems","Object","assign","_baggageItems","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,IAApC;;AACA,MAAME,eAAe,GAAGD,OAAO,CAAC,sBAAD,CAA/B;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,OAAD,CAAlB;;AAEA,MAAMG,QAAN,SAAuBJ,IAAvB,CAA4B;AAC1BK,EAAAA,WAAW,CAAEC,MAAF,EAAUC,MAAV,EAAkB;AAC3B;AAEA,SAAKC,WAAL,GAAmBF,MAAnB;AACA,SAAKG,YAAL,GAAoB,KAAKC,cAAL,CAAoBH,MAApB,CAApB;AACD;;AAEDI,EAAAA,QAAQ,GAAI;AACV,WAAO,KAAKF,YAAZ;AACD;;AAEDG,EAAAA,OAAO,GAAI;AACT,WAAO,KAAKJ,WAAZ;AACD;;AAEDE,EAAAA,cAAc,CAAEH,MAAF,EAAU;AACtB,UAAMM,MAAM,GAAGV,EAAE,EAAjB;;AAEA,QAAII,MAAJ,EAAY;AACV,aAAO,IAAIL,eAAJ,CAAoB;AACzBY,QAAAA,IAAI,EAAE,IADmB;AAEzBC,QAAAA,OAAO,EAAER,MAAM,CAACS,QAFS;AAGzBH,QAAAA,MAHyB;AAIzBI,QAAAA,QAAQ,EAAEV,MAAM,CAACW,OAJQ;AAKzBC,QAAAA,YAAY,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,MAAM,CAACe,aAAzB;AALW,OAApB,CAAP;AAOD,KARD,MAQO;AACL,aAAO,IAAIpB,eAAJ,CAAoB;AACzBY,QAAAA,IAAI,EAAE,IADmB;AAEzBC,QAAAA,OAAO,EAAEF,MAFgB;AAGzBA,QAAAA;AAHyB,OAApB,CAAP;AAKD;AACF;;AAlCyB;;AAqC5BU,MAAM,CAACC,OAAP,GAAiBpB,QAAjB","sourcesContent":["'use strict'\n\nconst Span = require('opentracing').Span\nconst NoopSpanContext = require('../noop/span_context')\nconst id = require('../id')\n\nclass NoopSpan extends Span {\n  constructor (tracer, parent) {\n    super()\n\n    this._noopTracer = tracer\n    this._noopContext = this._createContext(parent)\n  }\n\n  _context () {\n    return this._noopContext\n  }\n\n  _tracer () {\n    return this._noopTracer\n  }\n\n  _createContext (parent) {\n    const spanId = id()\n\n    if (parent) {\n      return new NoopSpanContext({\n        noop: this,\n        traceId: parent._traceId,\n        spanId,\n        parentId: parent._spanId,\n        baggageItems: Object.assign({}, parent._baggageItems)\n      })\n    } else {\n      return new NoopSpanContext({\n        noop: this,\n        traceId: spanId,\n        spanId\n      })\n    }\n  }\n}\n\nmodule.exports = NoopSpan\n"]},"metadata":{},"sourceType":"script"}