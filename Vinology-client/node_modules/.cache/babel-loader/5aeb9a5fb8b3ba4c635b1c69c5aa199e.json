{"ast":null,"code":"'use strict';\n\nconst log = require('./log');\n\nfunction add(carrier, keyValuePairs) {\n  if (!carrier || !keyValuePairs) return;\n\n  if (typeof keyValuePairs === 'string') {\n    return add(carrier, keyValuePairs.split(',').filter(tag => tag.indexOf(':') !== -1).reduce((prev, next) => {\n      const tag = next.split(':');\n      const key = tag[0].trim();\n      const value = tag.slice(1).join(':').trim();\n      prev[key] = value;\n      return prev;\n    }, {}));\n  }\n\n  if (Array.isArray(keyValuePairs)) {\n    return keyValuePairs.forEach(tags => add(carrier, tags));\n  }\n\n  try {\n    Object.keys(keyValuePairs).forEach(key => {\n      carrier[key] = keyValuePairs[key];\n    });\n  } catch (e) {\n    log.error(e);\n  }\n}\n\nmodule.exports = {\n  add\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/tagger.js"],"names":["log","require","add","carrier","keyValuePairs","split","filter","tag","indexOf","reduce","prev","next","key","trim","value","slice","join","Array","isArray","forEach","tags","Object","keys","e","error","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASC,GAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;AACpC,MAAI,CAACD,OAAD,IAAY,CAACC,aAAjB,EAAgC;;AAEhC,MAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACrC,WAAOF,GAAG,CACRC,OADQ,EAERC,aAAa,CACVC,KADH,CACS,GADT,EAEGC,MAFH,CAEUC,GAAG,IAAIA,GAAG,CAACC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAFvC,EAGGC,MAHH,CAGU,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACtB,YAAMJ,GAAG,GAAGI,IAAI,CAACN,KAAL,CAAW,GAAX,CAAZ;AACA,YAAMO,GAAG,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOM,IAAP,EAAZ;AACA,YAAMC,KAAK,GAAGP,GAAG,CAACQ,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,GAAlB,EAAuBH,IAAvB,EAAd;AAEAH,MAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYE,KAAZ;AAEA,aAAOJ,IAAP;AACD,KAXH,EAWK,EAXL,CAFQ,CAAV;AAeD;;AAED,MAAIO,KAAK,CAACC,OAAN,CAAcd,aAAd,CAAJ,EAAkC;AAChC,WAAOA,aAAa,CAACe,OAAd,CAAsBC,IAAI,IAAIlB,GAAG,CAACC,OAAD,EAAUiB,IAAV,CAAjC,CAAP;AACD;;AAED,MAAI;AACFC,IAAAA,MAAM,CAACC,IAAP,CAAYlB,aAAZ,EAA2Be,OAA3B,CAAmCP,GAAG,IAAI;AACxCT,MAAAA,OAAO,CAACS,GAAD,CAAP,GAAeR,aAAa,CAACQ,GAAD,CAA5B;AACD,KAFD;AAGD,GAJD,CAIE,OAAOW,CAAP,EAAU;AACVvB,IAAAA,GAAG,CAACwB,KAAJ,CAAUD,CAAV;AACD;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AAAExB,EAAAA;AAAF,CAAjB","sourcesContent":["'use strict'\n\nconst log = require('./log')\n\nfunction add (carrier, keyValuePairs) {\n  if (!carrier || !keyValuePairs) return\n\n  if (typeof keyValuePairs === 'string') {\n    return add(\n      carrier,\n      keyValuePairs\n        .split(',')\n        .filter(tag => tag.indexOf(':') !== -1)\n        .reduce((prev, next) => {\n          const tag = next.split(':')\n          const key = tag[0].trim()\n          const value = tag.slice(1).join(':').trim()\n\n          prev[key] = value\n\n          return prev\n        }, {})\n    )\n  }\n\n  if (Array.isArray(keyValuePairs)) {\n    return keyValuePairs.forEach(tags => add(carrier, tags))\n  }\n\n  try {\n    Object.keys(keyValuePairs).forEach(key => {\n      carrier[key] = keyValuePairs[key]\n    })\n  } catch (e) {\n    log.error(e)\n  }\n}\n\nmodule.exports = { add }\n"]},"metadata":{},"sourceType":"script"}