{"ast":null,"code":"\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DDSketch = void 0;\n\nvar store_1 = require(\"./store\");\n\nvar mapping_1 = require(\"./mapping\");\n\nvar compiled_1 = require(\"./proto/compiled\");\n\nvar DEFAULT_RELATIVE_ACCURACY = 0.01;\n/** Base class for DDSketch*/\n\nvar BaseDDSketch =\n/** @class */\nfunction () {\n  function BaseDDSketch(_a) {\n    var mapping = _a.mapping,\n        store = _a.store,\n        negativeStore = _a.negativeStore,\n        zeroCount = _a.zeroCount;\n    this.mapping = mapping;\n    this.store = store;\n    this.negativeStore = negativeStore;\n    this.zeroCount = zeroCount;\n    this.count = this.negativeStore.count + this.zeroCount + this.store.count;\n    this.min = Infinity;\n    this.max = -Infinity;\n    this.sum = 0;\n  }\n  /**\n   * Add a value to the sketch\n   *\n   * @param value The value to be added\n   * @param weight The amount to weight the value (default 1.0)\n   *\n   * @throws Error if `weight` is 0 or negative\n   */\n\n\n  BaseDDSketch.prototype.accept = function (value, weight) {\n    if (weight === void 0) {\n      weight = 1;\n    }\n\n    if (weight <= 0) {\n      throw Error('Weight must be a positive number');\n    }\n\n    if (value > this.mapping.minPossible) {\n      var key = this.mapping.key(value);\n      this.store.add(key, weight);\n    } else if (value < -this.mapping.minPossible) {\n      var key = this.mapping.key(-value);\n      this.negativeStore.add(key, weight);\n    } else {\n      this.zeroCount += weight;\n    }\n    /* Keep track of summary stats */\n\n\n    this.count += weight;\n    this.sum += value * weight;\n\n    if (value < this.min) {\n      this.min = value;\n    }\n\n    if (value > this.max) {\n      this.max = value;\n    }\n  };\n  /**\n   * Retrieve a value from the sketch at the quantile\n   *\n   * @param quantile A number between `0` and `1` (inclusive)\n   */\n\n\n  BaseDDSketch.prototype.getValueAtQuantile = function (quantile) {\n    if (quantile < 0 || quantile > 1 || this.count === 0) {\n      return NaN;\n    }\n\n    var rank = quantile * (this.count - 1);\n    var quantileValue = 0;\n\n    if (rank < this.negativeStore.count) {\n      var reversedRank = this.negativeStore.count - rank - 1;\n      var key = this.negativeStore.keyAtRank(reversedRank, false);\n      quantileValue = -this.mapping.value(key);\n    } else if (rank < this.zeroCount + this.negativeStore.count) {\n      return 0;\n    } else {\n      var key = this.store.keyAtRank(rank - this.zeroCount - this.negativeStore.count);\n      quantileValue = this.mapping.value(key);\n    }\n\n    return quantileValue;\n  };\n  /**\n   * Merge the contents of the parameter `sketch` into this sketch\n   *\n   * @param sketch The sketch to merge into the caller sketch\n   * @throws Error if the sketches were initialized with different `relativeAccuracy` values\n   */\n\n\n  BaseDDSketch.prototype.merge = function (sketch) {\n    if (!this.mergeable(sketch)) {\n      throw new Error('Cannot merge two DDSketches with different `relativeAccuracy` parameters');\n    }\n\n    if (sketch.count === 0) {\n      return;\n    }\n\n    if (this.count === 0) {\n      this._copy(sketch);\n\n      return;\n    }\n\n    this.store.merge(sketch.store);\n    /* Merge summary stats */\n\n    this.count += sketch.count;\n    this.sum += sketch.sum;\n\n    if (sketch.min < this.min) {\n      this.min = sketch.min;\n    }\n\n    if (sketch.max > this.max) {\n      this.max = sketch.max;\n    }\n  };\n  /**\n   * Determine whether two sketches can be merged\n   *\n   * @param sketch The sketch to be merged into the caller sketch\n   */\n\n\n  BaseDDSketch.prototype.mergeable = function (sketch) {\n    return this.mapping.gamma === sketch.mapping.gamma;\n  };\n  /**\n   * Helper method to copy the contents of the parameter `store` into this store\n   * @see DDSketch.merge to merge two sketches safely\n   *\n   * @param store The store to be copied into the caller store\n   */\n\n\n  BaseDDSketch.prototype._copy = function (sketch) {\n    this.store.copy(sketch.store);\n    this.negativeStore.copy(sketch.negativeStore);\n    this.zeroCount = sketch.zeroCount;\n    this.min = sketch.min;\n    this.max = sketch.max;\n    this.count = sketch.count;\n    this.sum = sketch.sum;\n  };\n  /** Serialize a DDSketch to protobuf format */\n\n\n  BaseDDSketch.prototype.toProto = function () {\n    var message = compiled_1.DDSketch.create({\n      mapping: this.mapping.toProto(),\n      positiveValues: this.store.toProto(),\n      negativeValues: this.negativeStore.toProto(),\n      zeroCount: this.zeroCount\n    });\n    return compiled_1.DDSketch.encode(message).finish();\n  };\n  /**\n   * Deserialize a DDSketch from protobuf data\n   *\n   * Note: `fromProto` currently loses summary statistics for the original\n   * sketch (i.e. `min`, `max`)\n   *\n   * @param buffer Byte array containing DDSketch in protobuf format (from DDSketch.toProto)\n   */\n\n\n  BaseDDSketch.fromProto = function (buffer) {\n    var decoded = compiled_1.DDSketch.decode(buffer);\n    var mapping = mapping_1.KeyMapping.fromProto(decoded.mapping);\n    var store = store_1.DenseStore.fromProto(decoded.positiveValues);\n    var negativeStore = store_1.DenseStore.fromProto(decoded.negativeValues);\n    var zeroCount = decoded.zeroCount;\n    return new BaseDDSketch({\n      mapping: mapping,\n      store: store,\n      negativeStore: negativeStore,\n      zeroCount: zeroCount\n    });\n  };\n\n  return BaseDDSketch;\n}();\n\nvar defaultConfig = {\n  relativeAccuracy: DEFAULT_RELATIVE_ACCURACY\n};\n/** A quantile sketch with relative-error guarantees */\n\nvar DDSketch =\n/** @class */\nfunction (_super) {\n  __extends(DDSketch, _super);\n  /**\n   * Initialize a new DDSketch\n   *\n   * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n   */\n\n\n  function DDSketch(_a) {\n    var _b = _a === void 0 ? defaultConfig : _a,\n        _c = _b.relativeAccuracy,\n        relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c;\n\n    var _this = this;\n\n    var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n    var store = new store_1.DenseStore();\n    var negativeStore = new store_1.DenseStore();\n    _this = _super.call(this, {\n      mapping: mapping,\n      store: store,\n      negativeStore: negativeStore,\n      zeroCount: 0\n    }) || this;\n    return _this;\n  }\n\n  return DDSketch;\n}(BaseDDSketch);\n\nexports.DDSketch = DDSketch;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/@datadog/sketches-js/dist/ddsketch/DDSketch.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","DDSketch","store_1","require","mapping_1","compiled_1","DEFAULT_RELATIVE_ACCURACY","BaseDDSketch","_a","mapping","store","negativeStore","zeroCount","count","min","Infinity","max","sum","accept","weight","Error","minPossible","key","add","getValueAtQuantile","quantile","NaN","rank","quantileValue","reversedRank","keyAtRank","merge","sketch","mergeable","_copy","gamma","copy","toProto","message","positiveValues","negativeValues","encode","finish","fromProto","buffer","decoded","decode","KeyMapping","DenseStore","defaultConfig","relativeAccuracy","_super","_b","_c","_this","LogarithmicMapping"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DDSketch = void 0;\nvar store_1 = require(\"./store\");\nvar mapping_1 = require(\"./mapping\");\nvar compiled_1 = require(\"./proto/compiled\");\nvar DEFAULT_RELATIVE_ACCURACY = 0.01;\n/** Base class for DDSketch*/\nvar BaseDDSketch = /** @class */ (function () {\n    function BaseDDSketch(_a) {\n        var mapping = _a.mapping, store = _a.store, negativeStore = _a.negativeStore, zeroCount = _a.zeroCount;\n        this.mapping = mapping;\n        this.store = store;\n        this.negativeStore = negativeStore;\n        this.zeroCount = zeroCount;\n        this.count =\n            this.negativeStore.count + this.zeroCount + this.store.count;\n        this.min = Infinity;\n        this.max = -Infinity;\n        this.sum = 0;\n    }\n    /**\n     * Add a value to the sketch\n     *\n     * @param value The value to be added\n     * @param weight The amount to weight the value (default 1.0)\n     *\n     * @throws Error if `weight` is 0 or negative\n     */\n    BaseDDSketch.prototype.accept = function (value, weight) {\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0) {\n            throw Error('Weight must be a positive number');\n        }\n        if (value > this.mapping.minPossible) {\n            var key = this.mapping.key(value);\n            this.store.add(key, weight);\n        }\n        else if (value < -this.mapping.minPossible) {\n            var key = this.mapping.key(-value);\n            this.negativeStore.add(key, weight);\n        }\n        else {\n            this.zeroCount += weight;\n        }\n        /* Keep track of summary stats */\n        this.count += weight;\n        this.sum += value * weight;\n        if (value < this.min) {\n            this.min = value;\n        }\n        if (value > this.max) {\n            this.max = value;\n        }\n    };\n    /**\n     * Retrieve a value from the sketch at the quantile\n     *\n     * @param quantile A number between `0` and `1` (inclusive)\n     */\n    BaseDDSketch.prototype.getValueAtQuantile = function (quantile) {\n        if (quantile < 0 || quantile > 1 || this.count === 0) {\n            return NaN;\n        }\n        var rank = quantile * (this.count - 1);\n        var quantileValue = 0;\n        if (rank < this.negativeStore.count) {\n            var reversedRank = this.negativeStore.count - rank - 1;\n            var key = this.negativeStore.keyAtRank(reversedRank, false);\n            quantileValue = -this.mapping.value(key);\n        }\n        else if (rank < this.zeroCount + this.negativeStore.count) {\n            return 0;\n        }\n        else {\n            var key = this.store.keyAtRank(rank - this.zeroCount - this.negativeStore.count);\n            quantileValue = this.mapping.value(key);\n        }\n        return quantileValue;\n    };\n    /**\n     * Merge the contents of the parameter `sketch` into this sketch\n     *\n     * @param sketch The sketch to merge into the caller sketch\n     * @throws Error if the sketches were initialized with different `relativeAccuracy` values\n     */\n    BaseDDSketch.prototype.merge = function (sketch) {\n        if (!this.mergeable(sketch)) {\n            throw new Error('Cannot merge two DDSketches with different `relativeAccuracy` parameters');\n        }\n        if (sketch.count === 0) {\n            return;\n        }\n        if (this.count === 0) {\n            this._copy(sketch);\n            return;\n        }\n        this.store.merge(sketch.store);\n        /* Merge summary stats */\n        this.count += sketch.count;\n        this.sum += sketch.sum;\n        if (sketch.min < this.min) {\n            this.min = sketch.min;\n        }\n        if (sketch.max > this.max) {\n            this.max = sketch.max;\n        }\n    };\n    /**\n     * Determine whether two sketches can be merged\n     *\n     * @param sketch The sketch to be merged into the caller sketch\n     */\n    BaseDDSketch.prototype.mergeable = function (sketch) {\n        return this.mapping.gamma === sketch.mapping.gamma;\n    };\n    /**\n     * Helper method to copy the contents of the parameter `store` into this store\n     * @see DDSketch.merge to merge two sketches safely\n     *\n     * @param store The store to be copied into the caller store\n     */\n    BaseDDSketch.prototype._copy = function (sketch) {\n        this.store.copy(sketch.store);\n        this.negativeStore.copy(sketch.negativeStore);\n        this.zeroCount = sketch.zeroCount;\n        this.min = sketch.min;\n        this.max = sketch.max;\n        this.count = sketch.count;\n        this.sum = sketch.sum;\n    };\n    /** Serialize a DDSketch to protobuf format */\n    BaseDDSketch.prototype.toProto = function () {\n        var message = compiled_1.DDSketch.create({\n            mapping: this.mapping.toProto(),\n            positiveValues: this.store.toProto(),\n            negativeValues: this.negativeStore.toProto(),\n            zeroCount: this.zeroCount\n        });\n        return compiled_1.DDSketch.encode(message).finish();\n    };\n    /**\n     * Deserialize a DDSketch from protobuf data\n     *\n     * Note: `fromProto` currently loses summary statistics for the original\n     * sketch (i.e. `min`, `max`)\n     *\n     * @param buffer Byte array containing DDSketch in protobuf format (from DDSketch.toProto)\n     */\n    BaseDDSketch.fromProto = function (buffer) {\n        var decoded = compiled_1.DDSketch.decode(buffer);\n        var mapping = mapping_1.KeyMapping.fromProto(decoded.mapping);\n        var store = store_1.DenseStore.fromProto(decoded.positiveValues);\n        var negativeStore = store_1.DenseStore.fromProto(decoded.negativeValues);\n        var zeroCount = decoded.zeroCount;\n        return new BaseDDSketch({ mapping: mapping, store: store, negativeStore: negativeStore, zeroCount: zeroCount });\n    };\n    return BaseDDSketch;\n}());\nvar defaultConfig = {\n    relativeAccuracy: DEFAULT_RELATIVE_ACCURACY\n};\n/** A quantile sketch with relative-error guarantees */\nvar DDSketch = /** @class */ (function (_super) {\n    __extends(DDSketch, _super);\n    /**\n     * Initialize a new DDSketch\n     *\n     * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n     */\n    function DDSketch(_a) {\n        var _b = _a === void 0 ? defaultConfig : _a, _c = _b.relativeAccuracy, relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c;\n        var _this = this;\n        var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n        var store = new store_1.DenseStore();\n        var negativeStore = new store_1.DenseStore();\n        _this = _super.call(this, { mapping: mapping, store: store, negativeStore: negativeStore, zeroCount: 0 }) || this;\n        return _this;\n    }\n    return DDSketch;\n}(BaseDDSketch));\nexports.DDSketch = DDSketch;\n"]},"metadata":{},"sourceType":"script"}