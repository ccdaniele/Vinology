{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nfunction findRoot() {\n  return require.main && require.main.filename ? path.dirname(require.main.filename) : process.cwd();\n}\n\nfunction findPkg() {\n  const cwd = findRoot();\n  const filePath = findUp('package.json', cwd);\n\n  try {\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'));\n  } catch (e) {\n    return {};\n  }\n}\n\nfunction findUp(name, cwd) {\n  let directory = path.resolve(cwd);\n  const {\n    root\n  } = path.parse(directory);\n\n  while (true) {\n    const current = path.resolve(directory, name);\n    if (fs.existsSync(current)) return current;\n    if (directory === root) return;\n    directory = path.dirname(directory);\n  }\n}\n\nmodule.exports = findPkg();","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/pkg.js"],"names":["fs","require","path","findRoot","main","filename","dirname","process","cwd","findPkg","filePath","findUp","JSON","parse","readFileSync","e","name","directory","resolve","root","current","existsSync","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,SAASE,QAAT,GAAqB;AACnB,SAAOF,OAAO,CAACG,IAAR,IAAgBH,OAAO,CAACG,IAAR,CAAaC,QAA7B,GACHH,IAAI,CAACI,OAAL,CAAaL,OAAO,CAACG,IAAR,CAAaC,QAA1B,CADG,GAEHE,OAAO,CAACC,GAAR,EAFJ;AAGD;;AAED,SAASC,OAAT,GAAoB;AAClB,QAAMD,GAAG,GAAGL,QAAQ,EAApB;AACA,QAAMO,QAAQ,GAAGC,MAAM,CAAC,cAAD,EAAiBH,GAAjB,CAAvB;;AAEA,MAAI;AACF,WAAOI,IAAI,CAACC,KAAL,CAAWb,EAAE,CAACc,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAX,CAAP;AACD,GAFD,CAEE,OAAOK,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF;;AAED,SAASJ,MAAT,CAAiBK,IAAjB,EAAuBR,GAAvB,EAA4B;AAC1B,MAAIS,SAAS,GAAGf,IAAI,CAACgB,OAAL,CAAaV,GAAb,CAAhB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWjB,IAAI,CAACW,KAAL,CAAWI,SAAX,CAAjB;;AAEA,SAAO,IAAP,EAAa;AACX,UAAMG,OAAO,GAAGlB,IAAI,CAACgB,OAAL,CAAaD,SAAb,EAAwBD,IAAxB,CAAhB;AAEA,QAAIhB,EAAE,CAACqB,UAAH,CAAcD,OAAd,CAAJ,EAA4B,OAAOA,OAAP;AAC5B,QAAIH,SAAS,KAAKE,IAAlB,EAAwB;AAExBF,IAAAA,SAAS,GAAGf,IAAI,CAACI,OAAL,CAAaW,SAAb,CAAZ;AACD;AACF;;AAEDK,MAAM,CAACC,OAAP,GAAiBd,OAAO,EAAxB","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction findRoot () {\n  return require.main && require.main.filename\n    ? path.dirname(require.main.filename)\n    : process.cwd()\n}\n\nfunction findPkg () {\n  const cwd = findRoot()\n  const filePath = findUp('package.json', cwd)\n\n  try {\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  } catch (e) {\n    return {}\n  }\n}\n\nfunction findUp (name, cwd) {\n  let directory = path.resolve(cwd)\n  const { root } = path.parse(directory)\n\n  while (true) {\n    const current = path.resolve(directory, name)\n\n    if (fs.existsSync(current)) return current\n    if (directory === root) return\n\n    directory = path.dirname(directory)\n  }\n}\n\nmodule.exports = findPkg()\n"]},"metadata":{},"sourceType":"script"}