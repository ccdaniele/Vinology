{"ast":null,"code":"'use strict';\n\nconst DEFAULT_MIN_SIZE = 2 * 1024 * 1024; // 2MB\n\n/**\n * Represents a chunk of a Msgpack payload. Exposes a subset of Array and Buffer\n * interfaces so that it can be used seamlessly by any encoder code that expects\n * either.\n */\n\nclass Chunk {\n  constructor(minSize = DEFAULT_MIN_SIZE) {\n    this.buffer = Buffer.allocUnsafe(minSize);\n    this.length = 0;\n    this._minSize = minSize;\n  }\n\n  write(value) {\n    const length = Buffer.byteLength(value);\n    const offset = this.length;\n\n    if (length < 0x20) {\n      // fixstr\n      this.reserve(length + 1);\n      this.length += 1;\n      this.buffer[offset] = length | 0xa0;\n    } else if (length < 0x100000000) {\n      // str 32\n      this.reserve(length + 5);\n      this.length += 5;\n      this.buffer[offset] = 0xdb;\n      this.buffer[offset + 1] = length >> 24;\n      this.buffer[offset + 2] = length >> 16;\n      this.buffer[offset + 3] = length >> 8;\n      this.buffer[offset + 4] = length;\n    }\n\n    this.length += this.buffer.utf8Write(value, this.length, length);\n    return this.length - offset;\n  }\n\n  copy(target, sourceStart, sourceEnd) {\n    target.set(new Uint8Array(this.buffer.buffer, sourceStart, sourceEnd - sourceStart));\n  }\n\n  set(array) {\n    this.reserve(array.length);\n    this.buffer.set(array, this.length);\n    this.length += array.length;\n  }\n\n  reserve(size) {\n    if (this.length + size > this.buffer.length) {\n      this._resize(this._minSize * Math.ceil((this.length + size) / this._minSize));\n    }\n  }\n\n  _resize(size) {\n    const oldBuffer = this.buffer;\n    this.buffer = Buffer.allocUnsafe(size);\n    oldBuffer.copy(this.buffer, 0, 0, this.length);\n  }\n\n}\n\nmodule.exports = Chunk;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/encode/chunk.js"],"names":["DEFAULT_MIN_SIZE","Chunk","constructor","minSize","buffer","Buffer","allocUnsafe","length","_minSize","write","value","byteLength","offset","reserve","utf8Write","copy","target","sourceStart","sourceEnd","set","Uint8Array","array","size","_resize","Math","ceil","oldBuffer","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAG,IAAI,IAAJ,GAAW,IAApC,C,CAAyC;;AAEzC;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,CAAY;AACVC,EAAAA,WAAW,CAAEC,OAAO,GAAGH,gBAAZ,EAA8B;AACvC,SAAKI,MAAL,GAAcC,MAAM,CAACC,WAAP,CAAmBH,OAAnB,CAAd;AACA,SAAKI,MAAL,GAAc,CAAd;AACA,SAAKC,QAAL,GAAgBL,OAAhB;AACD;;AAEDM,EAAAA,KAAK,CAAEC,KAAF,EAAS;AACZ,UAAMH,MAAM,GAAGF,MAAM,CAACM,UAAP,CAAkBD,KAAlB,CAAf;AACA,UAAME,MAAM,GAAG,KAAKL,MAApB;;AAEA,QAAIA,MAAM,GAAG,IAAb,EAAmB;AAAE;AACnB,WAAKM,OAAL,CAAaN,MAAM,GAAG,CAAtB;AACA,WAAKA,MAAL,IAAe,CAAf;AACA,WAAKH,MAAL,CAAYQ,MAAZ,IAAsBL,MAAM,GAAG,IAA/B;AACD,KAJD,MAIO,IAAIA,MAAM,GAAG,WAAb,EAA0B;AAAE;AACjC,WAAKM,OAAL,CAAaN,MAAM,GAAG,CAAtB;AACA,WAAKA,MAAL,IAAe,CAAf;AACA,WAAKH,MAAL,CAAYQ,MAAZ,IAAsB,IAAtB;AACA,WAAKR,MAAL,CAAYQ,MAAM,GAAG,CAArB,IAA0BL,MAAM,IAAI,EAApC;AACA,WAAKH,MAAL,CAAYQ,MAAM,GAAG,CAArB,IAA0BL,MAAM,IAAI,EAApC;AACA,WAAKH,MAAL,CAAYQ,MAAM,GAAG,CAArB,IAA0BL,MAAM,IAAI,CAApC;AACA,WAAKH,MAAL,CAAYQ,MAAM,GAAG,CAArB,IAA0BL,MAA1B;AACD;;AAED,SAAKA,MAAL,IAAe,KAAKH,MAAL,CAAYU,SAAZ,CAAsBJ,KAAtB,EAA6B,KAAKH,MAAlC,EAA0CA,MAA1C,CAAf;AAEA,WAAO,KAAKA,MAAL,GAAcK,MAArB;AACD;;AAEDG,EAAAA,IAAI,CAAEC,MAAF,EAAUC,WAAV,EAAuBC,SAAvB,EAAkC;AACpCF,IAAAA,MAAM,CAACG,GAAP,CAAW,IAAIC,UAAJ,CAAe,KAAKhB,MAAL,CAAYA,MAA3B,EAAmCa,WAAnC,EAAgDC,SAAS,GAAGD,WAA5D,CAAX;AACD;;AAEDE,EAAAA,GAAG,CAAEE,KAAF,EAAS;AACV,SAAKR,OAAL,CAAaQ,KAAK,CAACd,MAAnB;AAEA,SAAKH,MAAL,CAAYe,GAAZ,CAAgBE,KAAhB,EAAuB,KAAKd,MAA5B;AACA,SAAKA,MAAL,IAAec,KAAK,CAACd,MAArB;AACD;;AAEDM,EAAAA,OAAO,CAAES,IAAF,EAAQ;AACb,QAAI,KAAKf,MAAL,GAAce,IAAd,GAAqB,KAAKlB,MAAL,CAAYG,MAArC,EAA6C;AAC3C,WAAKgB,OAAL,CAAa,KAAKf,QAAL,GAAgBgB,IAAI,CAACC,IAAL,CAAU,CAAC,KAAKlB,MAAL,GAAce,IAAf,IAAuB,KAAKd,QAAtC,CAA7B;AACD;AACF;;AAEDe,EAAAA,OAAO,CAAED,IAAF,EAAQ;AACb,UAAMI,SAAS,GAAG,KAAKtB,MAAvB;AAEA,SAAKA,MAAL,GAAcC,MAAM,CAACC,WAAP,CAAmBgB,IAAnB,CAAd;AAEAI,IAAAA,SAAS,CAACX,IAAV,CAAe,KAAKX,MAApB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAKG,MAAvC;AACD;;AArDS;;AAwDZoB,MAAM,CAACC,OAAP,GAAiB3B,KAAjB","sourcesContent":["'use strict'\n\nconst DEFAULT_MIN_SIZE = 2 * 1024 * 1024 // 2MB\n\n/**\n * Represents a chunk of a Msgpack payload. Exposes a subset of Array and Buffer\n * interfaces so that it can be used seamlessly by any encoder code that expects\n * either.\n */\nclass Chunk {\n  constructor (minSize = DEFAULT_MIN_SIZE) {\n    this.buffer = Buffer.allocUnsafe(minSize)\n    this.length = 0\n    this._minSize = minSize\n  }\n\n  write (value) {\n    const length = Buffer.byteLength(value)\n    const offset = this.length\n\n    if (length < 0x20) { // fixstr\n      this.reserve(length + 1)\n      this.length += 1\n      this.buffer[offset] = length | 0xa0\n    } else if (length < 0x100000000) { // str 32\n      this.reserve(length + 5)\n      this.length += 5\n      this.buffer[offset] = 0xdb\n      this.buffer[offset + 1] = length >> 24\n      this.buffer[offset + 2] = length >> 16\n      this.buffer[offset + 3] = length >> 8\n      this.buffer[offset + 4] = length\n    }\n\n    this.length += this.buffer.utf8Write(value, this.length, length)\n\n    return this.length - offset\n  }\n\n  copy (target, sourceStart, sourceEnd) {\n    target.set(new Uint8Array(this.buffer.buffer, sourceStart, sourceEnd - sourceStart))\n  }\n\n  set (array) {\n    this.reserve(array.length)\n\n    this.buffer.set(array, this.length)\n    this.length += array.length\n  }\n\n  reserve (size) {\n    if (this.length + size > this.buffer.length) {\n      this._resize(this._minSize * Math.ceil((this.length + size) / this._minSize))\n    }\n  }\n\n  _resize (size) {\n    const oldBuffer = this.buffer\n\n    this.buffer = Buffer.allocUnsafe(size)\n\n    oldBuffer.copy(this.buffer, 0, 0, this.length)\n  }\n}\n\nmodule.exports = Chunk\n"]},"metadata":{},"sourceType":"script"}