{"ast":null,"code":"const os = require('os'),\n      process = require('process');\n\nexports.PROTOCOL = {\n  TCP: 'tcp',\n  UDS: 'uds',\n  UDP: 'udp',\n  STREAM: 'stream'\n};\n/**\n * Determines error codes that signify a connection to a TCP socket\n * has failed in a way that can be retried. This codes are OS-specific.\n * @returns {number[]} An array of the error codes.\n */\n\nfunction tcpErrors() {\n  return [os.constants.errno.WSAENOTCONN, os.constants.errno.WSAECONNREFUSED, os.constants.errno.WSAECONNRESET, os.constants.errno.WSAENOTCONN, os.constants.errno.EDESTADDRREQ, os.constants.errno.ECONNRESET, os.constants.errno.EPIPE, os.constants.errno.ENOTCONN, os.constants.errno.ECONNREFUSED];\n}\n/**\n * Determines error codes that signify a connection to a Unix Domain Socket (UDS)\n * has failed in a way that can be retried. This codes are OS-specific.\n * @returns {number[]} An array of the error codes.\n */\n\n\nfunction udsErrors() {\n  if (process.platform === 'linux') {\n    return [os.constants.errno.ENOTCONN, os.constants.errno.ECONNREFUSED];\n  }\n\n  if (process.platform === 'darwin') {\n    return [os.constants.errno.EDESTADDRREQ, os.constants.errno.ECONNRESET];\n  } // Unknown / not yet implemented\n\n\n  return [];\n}\n\nexports.tcpErrors = tcpErrors;\nexports.udsErrors = udsErrors;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/hot-shots/lib/constants.js"],"names":["os","require","process","exports","PROTOCOL","TCP","UDS","UDP","STREAM","tcpErrors","constants","errno","WSAENOTCONN","WSAECONNREFUSED","WSAECONNRESET","EDESTADDRREQ","ECONNRESET","EPIPE","ENOTCONN","ECONNREFUSED","udsErrors","platform"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;AAAA,MACEC,OAAO,GAAGD,OAAO,CAAC,SAAD,CADnB;;AAGAE,OAAO,CAACC,QAAR,GAAmB;AACjBC,EAAAA,GAAG,EAAE,KADY;AAEjBC,EAAAA,GAAG,EAAE,KAFY;AAGjBC,EAAAA,GAAG,EAAE,KAHY;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAAnB;AAOA;AACA;AACA;AACA;AACA;;AACC,SAASC,SAAT,GAAqB;AACpB,SAAO,CACLT,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBC,WADd,EAELZ,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBE,eAFd,EAGLb,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBG,aAHd,EAILd,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBC,WAJd,EAKLZ,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBI,YALd,EAMLf,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBK,UANd,EAOLhB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBM,KAPd,EAQLjB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBO,QARd,EASLlB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBQ,YATd,CAAP;AAWD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,GAAqB;AACnB,MAAIlB,OAAO,CAACmB,QAAR,KAAqB,OAAzB,EAAkC;AAChC,WAAO,CACLrB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBO,QADd,EAELlB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBQ,YAFd,CAAP;AAID;;AAED,MAAIjB,OAAO,CAACmB,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,CACLrB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBI,YADd,EAELf,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBK,UAFd,CAAP;AAID,GAbkB,CAenB;;;AACA,SAAO,EAAP;AACD;;AAEDb,OAAO,CAACM,SAAR,GAAoBA,SAApB;AACAN,OAAO,CAACiB,SAAR,GAAoBA,SAApB","sourcesContent":["const os = require('os'),\n  process = require('process');\n\nexports.PROTOCOL = {\n  TCP: 'tcp',\n  UDS: 'uds',\n  UDP: 'udp',\n  STREAM: 'stream'\n};\n\n/**\n * Determines error codes that signify a connection to a TCP socket\n * has failed in a way that can be retried. This codes are OS-specific.\n * @returns {number[]} An array of the error codes.\n */\n function tcpErrors() {\n  return [\n    os.constants.errno.WSAENOTCONN,\n    os.constants.errno.WSAECONNREFUSED,\n    os.constants.errno.WSAECONNRESET,\n    os.constants.errno.WSAENOTCONN,\n    os.constants.errno.EDESTADDRREQ,\n    os.constants.errno.ECONNRESET,\n    os.constants.errno.EPIPE,\n    os.constants.errno.ENOTCONN,\n    os.constants.errno.ECONNREFUSED,\n  ];\n}\n\n/**\n * Determines error codes that signify a connection to a Unix Domain Socket (UDS)\n * has failed in a way that can be retried. This codes are OS-specific.\n * @returns {number[]} An array of the error codes.\n */\nfunction udsErrors() {\n  if (process.platform === 'linux') {\n    return [\n      os.constants.errno.ENOTCONN,\n      os.constants.errno.ECONNREFUSED,\n    ];\n  }\n\n  if (process.platform === 'darwin') {\n    return [\n      os.constants.errno.EDESTADDRREQ,\n      os.constants.errno.ECONNRESET,\n    ];\n  }\n\n  // Unknown / not yet implemented\n  return [];\n}\n\nexports.tcpErrors = tcpErrors;\nexports.udsErrors = udsErrors;\n"]},"metadata":{},"sourceType":"script"}