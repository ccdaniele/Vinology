{"ast":null,"code":"\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CubicallyInterpolatedMapping = void 0;\n\nvar KeyMapping_1 = require(\"./KeyMapping\");\n\nvar math_1 = require(\"../math\");\n\nvar compiled_1 = require(\"../proto/compiled\");\n/**\n * A fast KeyMapping that approximates the memory-optimal LogarithmicMapping by\n * extracting the floor value of the logarithm to the base 2 from the binary\n * representations of floating-point values and cubically interpolating the\n * logarithm in-between.\n *\n * More detailed documentation of this method can be found in:\n * <a href=\"https://github.com/DataDog/sketches-java/\">sketches-java</a>\n */\n\n\nvar CubicallyInterpolatedMapping =\n/** @class */\nfunction (_super) {\n  __extends(CubicallyInterpolatedMapping, _super);\n\n  function CubicallyInterpolatedMapping(relativeAccuracy, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var _this = _super.call(this, relativeAccuracy, offset) || this;\n\n    _this.A = 6 / 35;\n    _this.B = -3 / 5;\n    _this.C = 10 / 7;\n    _this._multiplier /= _this.C;\n    return _this;\n  }\n  /** Approximates log2 using a cubic polynomial */\n\n\n  CubicallyInterpolatedMapping.prototype._cubicLog2Approx = function (value) {\n    var _a = math_1.frexp(value),\n        mantissa = _a[0],\n        exponent = _a[1];\n\n    var significand = 2 * mantissa - 1;\n    return ((this.A * significand + this.B) * significand + this.C) * significand + (exponent - 1);\n  };\n  /** Derived from Cardano's formula */\n\n\n  CubicallyInterpolatedMapping.prototype._cubicExp2Approx = function (value) {\n    var exponent = Math.floor(value);\n    var delta0 = this.B * this.B - 3 * this.A * this.C;\n    var delta1 = 2 * this.B * this.B * this.B - 9 * this.A * this.B * this.C - 27 * this.A * this.A * (value - exponent);\n    var cardano = Math.cbrt((delta1 - Math.sqrt(delta1 * delta1 - 4 * delta0 * delta0 * delta0)) / 2);\n    var significandPlusOne = -(this.B + cardano + delta0 / cardano) / (3 * this.A) + 1;\n    var mantissa = significandPlusOne / 2;\n    return math_1.ldexp(mantissa, exponent + 1);\n  };\n\n  CubicallyInterpolatedMapping.prototype._logGamma = function (value) {\n    return this._cubicLog2Approx(value) * this._multiplier;\n  };\n\n  CubicallyInterpolatedMapping.prototype._powGamma = function (value) {\n    return this._cubicExp2Approx(value / this._multiplier);\n  };\n\n  CubicallyInterpolatedMapping.prototype._protoInterpolation = function () {\n    return compiled_1.IndexMapping.Interpolation.CUBIC;\n  };\n\n  return CubicallyInterpolatedMapping;\n}(KeyMapping_1.KeyMapping);\n\nexports.CubicallyInterpolatedMapping = CubicallyInterpolatedMapping;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/@datadog/sketches-js/dist/ddsketch/mapping/CubicallyInterpolatedMapping.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","CubicallyInterpolatedMapping","KeyMapping_1","require","math_1","compiled_1","_super","relativeAccuracy","offset","_this","A","B","C","_multiplier","_cubicLog2Approx","_a","frexp","mantissa","exponent","significand","_cubicExp2Approx","Math","floor","delta0","delta1","cardano","cbrt","sqrt","significandPlusOne","ldexp","_logGamma","_powGamma","_protoInterpolation","IndexMapping","Interpolation","CUBIC","KeyMapping"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CubicallyInterpolatedMapping = void 0;\nvar KeyMapping_1 = require(\"./KeyMapping\");\nvar math_1 = require(\"../math\");\nvar compiled_1 = require(\"../proto/compiled\");\n/**\n * A fast KeyMapping that approximates the memory-optimal LogarithmicMapping by\n * extracting the floor value of the logarithm to the base 2 from the binary\n * representations of floating-point values and cubically interpolating the\n * logarithm in-between.\n *\n * More detailed documentation of this method can be found in:\n * <a href=\"https://github.com/DataDog/sketches-java/\">sketches-java</a>\n */\nvar CubicallyInterpolatedMapping = /** @class */ (function (_super) {\n    __extends(CubicallyInterpolatedMapping, _super);\n    function CubicallyInterpolatedMapping(relativeAccuracy, offset) {\n        if (offset === void 0) { offset = 0; }\n        var _this = _super.call(this, relativeAccuracy, offset) || this;\n        _this.A = 6 / 35;\n        _this.B = -3 / 5;\n        _this.C = 10 / 7;\n        _this._multiplier /= _this.C;\n        return _this;\n    }\n    /** Approximates log2 using a cubic polynomial */\n    CubicallyInterpolatedMapping.prototype._cubicLog2Approx = function (value) {\n        var _a = math_1.frexp(value), mantissa = _a[0], exponent = _a[1];\n        var significand = 2 * mantissa - 1;\n        return (((this.A * significand + this.B) * significand + this.C) *\n            significand +\n            (exponent - 1));\n    };\n    /** Derived from Cardano's formula */\n    CubicallyInterpolatedMapping.prototype._cubicExp2Approx = function (value) {\n        var exponent = Math.floor(value);\n        var delta0 = this.B * this.B - 3 * this.A * this.C;\n        var delta1 = 2 * this.B * this.B * this.B -\n            9 * this.A * this.B * this.C -\n            27 * this.A * this.A * (value - exponent);\n        var cardano = Math.cbrt((delta1 -\n            Math.sqrt(delta1 * delta1 - 4 * delta0 * delta0 * delta0)) /\n            2);\n        var significandPlusOne = -(this.B + cardano + delta0 / cardano) / (3 * this.A) + 1;\n        var mantissa = significandPlusOne / 2;\n        return math_1.ldexp(mantissa, exponent + 1);\n    };\n    CubicallyInterpolatedMapping.prototype._logGamma = function (value) {\n        return this._cubicLog2Approx(value) * this._multiplier;\n    };\n    CubicallyInterpolatedMapping.prototype._powGamma = function (value) {\n        return this._cubicExp2Approx(value / this._multiplier);\n    };\n    CubicallyInterpolatedMapping.prototype._protoInterpolation = function () {\n        return compiled_1.IndexMapping.Interpolation.CUBIC;\n    };\n    return CubicallyInterpolatedMapping;\n}(KeyMapping_1.KeyMapping));\nexports.CubicallyInterpolatedMapping = CubicallyInterpolatedMapping;\n"]},"metadata":{},"sourceType":"script"}