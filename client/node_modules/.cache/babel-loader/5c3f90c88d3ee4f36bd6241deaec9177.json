{"ast":null,"code":"'use strict';\n\nconst RateLimiter = require('./rate_limiter');\n\nconst Sampler = require('./sampler');\n\nconst ext = require('../../../ext');\n\nconst {\n  setSamplingRules\n} = require('./startup-log');\n\nconst {\n  SAMPLING_RULE_DECISION,\n  SAMPLING_LIMIT_DECISION,\n  SAMPLING_AGENT_DECISION\n} = require('./constants');\n\nconst SERVICE_NAME = ext.tags.SERVICE_NAME;\nconst SAMPLING_PRIORITY = ext.tags.SAMPLING_PRIORITY;\nconst MANUAL_KEEP = ext.tags.MANUAL_KEEP;\nconst MANUAL_DROP = ext.tags.MANUAL_DROP;\nconst USER_REJECT = ext.priority.USER_REJECT;\nconst AUTO_REJECT = ext.priority.AUTO_REJECT;\nconst AUTO_KEEP = ext.priority.AUTO_KEEP;\nconst USER_KEEP = ext.priority.USER_KEEP;\nconst DEFAULT_KEY = 'service:,env:';\n\nclass PrioritySampler {\n  constructor(env, {\n    sampleRate,\n    rateLimit = 100,\n    rules = []\n  } = {}) {\n    this._env = env;\n    this._rules = this._normalizeRules(rules, sampleRate);\n    this._limiter = new RateLimiter(rateLimit);\n    setSamplingRules(this._rules);\n    this.update({});\n  }\n\n  isSampled(span) {\n    const context = this._getContext(span);\n\n    const rule = this._findRule(context);\n\n    return rule ? this._isSampledByRule(context, rule) && this._isSampledByRateLimit(context) : this._isSampledByAgent(context);\n  }\n\n  sample(span, auto = true) {\n    if (!span) return;\n\n    const context = this._getContext(span);\n\n    const root = context._trace.started[0];\n    if (context._sampling.priority !== undefined) return;\n    if (!root) return; // noop span\n\n    const tag = this._getPriority(context._tags);\n\n    if (this.validate(tag)) {\n      context._sampling.priority = tag;\n      return;\n    }\n\n    if (auto) {\n      context._sampling.priority = this.isSampled(root) ? AUTO_KEEP : AUTO_REJECT;\n    }\n  }\n\n  update(rates) {\n    const samplers = {};\n\n    for (const key in rates) {\n      const rate = rates[key];\n      const sampler = new Sampler(rate);\n      samplers[key] = sampler;\n    }\n\n    samplers[DEFAULT_KEY] = samplers[DEFAULT_KEY] || new Sampler(AUTO_KEEP);\n    this._samplers = samplers;\n  }\n\n  validate(samplingPriority) {\n    switch (samplingPriority) {\n      case USER_REJECT:\n      case USER_KEEP:\n      case AUTO_REJECT:\n      case AUTO_KEEP:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  _getContext(span) {\n    return typeof span.context === 'function' ? span.context() : span;\n  }\n\n  _getPriority(tags) {\n    if (tags.hasOwnProperty(MANUAL_KEEP) && tags[MANUAL_KEEP] !== false) {\n      return USER_KEEP;\n    } else if (tags.hasOwnProperty(MANUAL_DROP) && tags[MANUAL_DROP] !== false) {\n      return USER_REJECT;\n    } else {\n      const priority = parseInt(tags[SAMPLING_PRIORITY], 10);\n\n      if (priority === 1 || priority === 2) {\n        return USER_KEEP;\n      } else if (priority === 0 || priority === -1) {\n        return USER_REJECT;\n      }\n    }\n  }\n\n  _isSampledByRule(context, rule) {\n    context._trace[SAMPLING_RULE_DECISION] = rule.sampleRate;\n    return rule.sampler.isSampled(context);\n  }\n\n  _isSampledByRateLimit(context) {\n    const allowed = this._limiter.isAllowed();\n\n    context._trace[SAMPLING_LIMIT_DECISION] = this._limiter.effectiveRate();\n    return allowed;\n  }\n\n  _isSampledByAgent(context) {\n    const key = `service:${context._tags[SERVICE_NAME]},env:${this._env}`;\n    const sampler = this._samplers[key] || this._samplers[DEFAULT_KEY];\n    context._trace[SAMPLING_AGENT_DECISION] = sampler.rate();\n    return sampler.isSampled(context);\n  }\n\n  _normalizeRules(rules, sampleRate) {\n    return rules.concat({\n      sampleRate\n    }).map(rule => ({ ...rule,\n      sampleRate: parseFloat(rule.sampleRate)\n    })).filter(rule => !isNaN(rule.sampleRate)).map(rule => ({ ...rule,\n      sampler: new Sampler(rule.sampleRate)\n    }));\n  }\n\n  _findRule(context) {\n    for (let i = 0, l = this._rules.length; i < l; i++) {\n      if (this._matchRule(context, this._rules[i])) return this._rules[i];\n    }\n  }\n\n  _matchRule(context, rule) {\n    const name = context._name;\n    const service = context._tags['service.name'];\n    if (rule.name instanceof RegExp && !rule.name.test(name)) return false;\n    if (rule.name && rule.name !== name) return false;\n    if (rule.service instanceof RegExp && !rule.service.test(service)) return false;\n    if (rule.service && rule.service !== service) return false;\n    return true;\n  }\n\n}\n\nmodule.exports = PrioritySampler;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/priority_sampler.js"],"names":["RateLimiter","require","Sampler","ext","setSamplingRules","SAMPLING_RULE_DECISION","SAMPLING_LIMIT_DECISION","SAMPLING_AGENT_DECISION","SERVICE_NAME","tags","SAMPLING_PRIORITY","MANUAL_KEEP","MANUAL_DROP","USER_REJECT","priority","AUTO_REJECT","AUTO_KEEP","USER_KEEP","DEFAULT_KEY","PrioritySampler","constructor","env","sampleRate","rateLimit","rules","_env","_rules","_normalizeRules","_limiter","update","isSampled","span","context","_getContext","rule","_findRule","_isSampledByRule","_isSampledByRateLimit","_isSampledByAgent","sample","auto","root","_trace","started","_sampling","undefined","tag","_getPriority","_tags","validate","rates","samplers","key","rate","sampler","_samplers","samplingPriority","hasOwnProperty","parseInt","allowed","isAllowed","effectiveRate","concat","map","parseFloat","filter","isNaN","i","l","length","_matchRule","name","_name","service","RegExp","test","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst RateLimiter = require('./rate_limiter')\nconst Sampler = require('./sampler')\nconst ext = require('../../../ext')\nconst { setSamplingRules } = require('./startup-log')\n\nconst {\n  SAMPLING_RULE_DECISION,\n  SAMPLING_LIMIT_DECISION,\n  SAMPLING_AGENT_DECISION\n} = require('./constants')\n\nconst SERVICE_NAME = ext.tags.SERVICE_NAME\nconst SAMPLING_PRIORITY = ext.tags.SAMPLING_PRIORITY\nconst MANUAL_KEEP = ext.tags.MANUAL_KEEP\nconst MANUAL_DROP = ext.tags.MANUAL_DROP\nconst USER_REJECT = ext.priority.USER_REJECT\nconst AUTO_REJECT = ext.priority.AUTO_REJECT\nconst AUTO_KEEP = ext.priority.AUTO_KEEP\nconst USER_KEEP = ext.priority.USER_KEEP\nconst DEFAULT_KEY = 'service:,env:'\n\nclass PrioritySampler {\n  constructor (env, { sampleRate, rateLimit = 100, rules = [] } = {}) {\n    this._env = env\n    this._rules = this._normalizeRules(rules, sampleRate)\n    this._limiter = new RateLimiter(rateLimit)\n\n    setSamplingRules(this._rules)\n\n    this.update({})\n  }\n\n  isSampled (span) {\n    const context = this._getContext(span)\n    const rule = this._findRule(context)\n\n    return rule\n      ? this._isSampledByRule(context, rule) && this._isSampledByRateLimit(context)\n      : this._isSampledByAgent(context)\n  }\n\n  sample (span, auto = true) {\n    if (!span) return\n\n    const context = this._getContext(span)\n    const root = context._trace.started[0]\n\n    if (context._sampling.priority !== undefined) return\n    if (!root) return // noop span\n\n    const tag = this._getPriority(context._tags)\n\n    if (this.validate(tag)) {\n      context._sampling.priority = tag\n      return\n    }\n\n    if (auto) {\n      context._sampling.priority = this.isSampled(root) ? AUTO_KEEP : AUTO_REJECT\n    }\n  }\n\n  update (rates) {\n    const samplers = {}\n\n    for (const key in rates) {\n      const rate = rates[key]\n      const sampler = new Sampler(rate)\n\n      samplers[key] = sampler\n    }\n\n    samplers[DEFAULT_KEY] = samplers[DEFAULT_KEY] || new Sampler(AUTO_KEEP)\n\n    this._samplers = samplers\n  }\n\n  validate (samplingPriority) {\n    switch (samplingPriority) {\n      case USER_REJECT:\n      case USER_KEEP:\n      case AUTO_REJECT:\n      case AUTO_KEEP:\n        return true\n      default:\n        return false\n    }\n  }\n\n  _getContext (span) {\n    return typeof span.context === 'function' ? span.context() : span\n  }\n\n  _getPriority (tags) {\n    if (tags.hasOwnProperty(MANUAL_KEEP) && tags[MANUAL_KEEP] !== false) {\n      return USER_KEEP\n    } else if (tags.hasOwnProperty(MANUAL_DROP) && tags[MANUAL_DROP] !== false) {\n      return USER_REJECT\n    } else {\n      const priority = parseInt(tags[SAMPLING_PRIORITY], 10)\n\n      if (priority === 1 || priority === 2) {\n        return USER_KEEP\n      } else if (priority === 0 || priority === -1) {\n        return USER_REJECT\n      }\n    }\n  }\n\n  _isSampledByRule (context, rule) {\n    context._trace[SAMPLING_RULE_DECISION] = rule.sampleRate\n\n    return rule.sampler.isSampled(context)\n  }\n\n  _isSampledByRateLimit (context) {\n    const allowed = this._limiter.isAllowed()\n\n    context._trace[SAMPLING_LIMIT_DECISION] = this._limiter.effectiveRate()\n\n    return allowed\n  }\n\n  _isSampledByAgent (context) {\n    const key = `service:${context._tags[SERVICE_NAME]},env:${this._env}`\n    const sampler = this._samplers[key] || this._samplers[DEFAULT_KEY]\n\n    context._trace[SAMPLING_AGENT_DECISION] = sampler.rate()\n\n    return sampler.isSampled(context)\n  }\n\n  _normalizeRules (rules, sampleRate) {\n    return rules\n      .concat({ sampleRate })\n      .map(rule => ({ ...rule, sampleRate: parseFloat(rule.sampleRate) }))\n      .filter(rule => !isNaN(rule.sampleRate))\n      .map(rule => ({ ...rule, sampler: new Sampler(rule.sampleRate) }))\n  }\n\n  _findRule (context) {\n    for (let i = 0, l = this._rules.length; i < l; i++) {\n      if (this._matchRule(context, this._rules[i])) return this._rules[i]\n    }\n  }\n\n  _matchRule (context, rule) {\n    const name = context._name\n    const service = context._tags['service.name']\n\n    if (rule.name instanceof RegExp && !rule.name.test(name)) return false\n    if (rule.name && rule.name !== name) return false\n    if (rule.service instanceof RegExp && !rule.service.test(service)) return false\n    if (rule.service && rule.service !== service) return false\n\n    return true\n  }\n}\n\nmodule.exports = PrioritySampler\n"]},"metadata":{},"sourceType":"script"}