{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.start = exports.profile = void 0;\n\nconst delay_1 = require(\"delay\");\n\nconst profile_serializer_1 = require(\"./profile-serializer\");\n\nconst time_profiler_bindings_1 = require(\"./time-profiler-bindings\");\n\nconst DEFAULT_INTERVAL_MICROS = 1000;\nconst majorVersion = process.version.slice(1).split('.').map(Number)[0];\n\nfunction profile(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const stop = start(options.intervalMicros || DEFAULT_INTERVAL_MICROS, options.name, options.sourceMapper, options.lineNumbers);\n    yield delay_1.default(options.durationMillis);\n    return stop();\n  });\n}\n\nexports.profile = profile;\n\nfunction ensureRunName(name) {\n  return name || `pprof-${Date.now()}-${Math.random()}`;\n} // NOTE: refreshing doesn't work if giving a profile name.\n\n\nfunction start(intervalMicros = DEFAULT_INTERVAL_MICROS, name, sourceMapper, lineNumbers = true) {\n  const profiler = new time_profiler_bindings_1.TimeProfiler(intervalMicros);\n  let runName = start();\n  return majorVersion < 16 ? stopOld : stop;\n\n  function start() {\n    const runName = ensureRunName(name);\n    profiler.start(runName, lineNumbers);\n    return runName;\n  } // Node.js versions prior to v16 leak memory if not disposed and recreated\n  // between each profile. As disposing deletes current profile data too,\n  // we must stop then dispose then start.\n\n\n  function stopOld(restart = false) {\n    const result = profiler.stop(runName, lineNumbers);\n    profiler.dispose();\n\n    if (restart) {\n      runName = start();\n    }\n\n    return profile_serializer_1.serializeTimeProfile(result, intervalMicros, sourceMapper);\n  } // For Node.js v16+, we want to start the next profile before we stop the\n  // current one as otherwise the active profile count could reach zero which\n  // means V8 might tear down the symbolizer thread and need to start it again.\n\n\n  function stop(restart = false) {\n    let nextRunName;\n\n    if (restart) {\n      nextRunName = start();\n    }\n\n    const result = profiler.stop(runName, lineNumbers);\n\n    if (nextRunName) {\n      runName = nextRunName;\n    }\n\n    if (!restart) profiler.dispose();\n    return profile_serializer_1.serializeTimeProfile(result, intervalMicros, sourceMapper);\n  }\n}\n\nexports.start = start;","map":{"version":3,"sources":["../../ts/src/time-profiler.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,MAAA,wBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEA,MAAM,uBAAuB,GAAiB,IAA9C;AAEA,MAAM,YAAY,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAsB,CAAtB,EAAyB,KAAzB,CAA+B,GAA/B,EAAoC,GAApC,CAAwC,MAAxC,EAAgD,CAAhD,CAArB;;AAsBA,SAAsB,OAAtB,CAA8B,OAA9B,EAA0D;;AACxD,UAAM,IAAI,GAAG,KAAK,CAChB,OAAO,CAAC,cAAR,IAA0B,uBADV,EAEhB,OAAO,CAAC,IAFQ,EAGhB,OAAO,CAAC,YAHQ,EAIhB,OAAO,CAAC,WAJQ,CAAlB;AAMA,UAAM,OAAA,CAAA,OAAA,CAAM,OAAO,CAAC,cAAd,CAAN;AACA,WAAO,IAAI,EAAX;AACD,G;AAAA;;AATD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAWA,SAAS,aAAT,CAAuB,IAAvB,EAAoC;AAClC,SAAO,IAAI,IAAI,SAAS,IAAI,CAAC,GAAL,EAAU,IAAI,IAAI,CAAC,MAAL,EAAa,EAAnD;AACD,C,CAED;;;AACA,SAAgB,KAAhB,CACE,cAAA,GAA+B,uBADjC,EAEE,IAFF,EAGE,YAHF,EAIE,WAAW,GAAG,IAJhB,EAIoB;AAElB,QAAM,QAAQ,GAAG,IAAI,wBAAA,CAAA,YAAJ,CAAiB,cAAjB,CAAjB;AACA,MAAI,OAAO,GAAG,KAAK,EAAnB;AACA,SAAO,YAAY,GAAG,EAAf,GAAoB,OAApB,GAA8B,IAArC;;AAEA,WAAS,KAAT,GAAc;AACZ,UAAM,OAAO,GAAG,aAAa,CAAC,IAAD,CAA7B;AACA,IAAA,QAAQ,CAAC,KAAT,CAAe,OAAf,EAAwB,WAAxB;AACA,WAAO,OAAP;AACD,GAViB,CAYlB;AACA;AACA;;;AACA,WAAS,OAAT,CAAiB,OAAO,GAAG,KAA3B,EAAgC;AAC9B,UAAM,MAAM,GAAG,QAAQ,CAAC,IAAT,CAAc,OAAd,EAAuB,WAAvB,CAAf;AACA,IAAA,QAAQ,CAAC,OAAT;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,GAAG,KAAK,EAAf;AACD;;AACD,WAAO,oBAAA,CAAA,oBAAA,CAAqB,MAArB,EAA6B,cAA7B,EAA6C,YAA7C,CAAP;AACD,GAtBiB,CAwBlB;AACA;AACA;;;AACA,WAAS,IAAT,CAAc,OAAO,GAAG,KAAxB,EAA6B;AAC3B,QAAI,WAAJ;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,WAAW,GAAG,KAAK,EAAnB;AACD;;AACD,UAAM,MAAM,GAAG,QAAQ,CAAC,IAAT,CAAc,OAAd,EAAuB,WAAvB,CAAf;;AACA,QAAI,WAAJ,EAAiB;AACf,MAAA,OAAO,GAAG,WAAV;AACD;;AACD,QAAI,CAAC,OAAL,EAAc,QAAQ,CAAC,OAAT;AACd,WAAO,oBAAA,CAAA,oBAAA,CAAqB,MAArB,EAA6B,cAA7B,EAA6C,YAA7C,CAAP;AACD;AACF;;AA3CD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.start = exports.profile = void 0;\nconst delay_1 = require(\"delay\");\nconst profile_serializer_1 = require(\"./profile-serializer\");\nconst time_profiler_bindings_1 = require(\"./time-profiler-bindings\");\nconst DEFAULT_INTERVAL_MICROS = 1000;\nconst majorVersion = process.version.slice(1).split('.').map(Number)[0];\nfunction profile(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const stop = start(options.intervalMicros || DEFAULT_INTERVAL_MICROS, options.name, options.sourceMapper, options.lineNumbers);\n        yield delay_1.default(options.durationMillis);\n        return stop();\n    });\n}\nexports.profile = profile;\nfunction ensureRunName(name) {\n    return name || `pprof-${Date.now()}-${Math.random()}`;\n}\n// NOTE: refreshing doesn't work if giving a profile name.\nfunction start(intervalMicros = DEFAULT_INTERVAL_MICROS, name, sourceMapper, lineNumbers = true) {\n    const profiler = new time_profiler_bindings_1.TimeProfiler(intervalMicros);\n    let runName = start();\n    return majorVersion < 16 ? stopOld : stop;\n    function start() {\n        const runName = ensureRunName(name);\n        profiler.start(runName, lineNumbers);\n        return runName;\n    }\n    // Node.js versions prior to v16 leak memory if not disposed and recreated\n    // between each profile. As disposing deletes current profile data too,\n    // we must stop then dispose then start.\n    function stopOld(restart = false) {\n        const result = profiler.stop(runName, lineNumbers);\n        profiler.dispose();\n        if (restart) {\n            runName = start();\n        }\n        return profile_serializer_1.serializeTimeProfile(result, intervalMicros, sourceMapper);\n    }\n    // For Node.js v16+, we want to start the next profile before we stop the\n    // current one as otherwise the active profile count could reach zero which\n    // means V8 might tear down the symbolizer thread and need to start it again.\n    function stop(restart = false) {\n        let nextRunName;\n        if (restart) {\n            nextRunName = start();\n        }\n        const result = profiler.stop(runName, lineNumbers);\n        if (nextRunName) {\n            runName = nextRunName;\n        }\n        if (!restart)\n            profiler.dispose();\n        return profile_serializer_1.serializeTimeProfile(result, intervalMicros, sourceMapper);\n    }\n}\nexports.start = start;\n//# sourceMappingURL=time-profiler.js.map"]},"metadata":{},"sourceType":"script"}