{"ast":null,"code":"'use strict';\n\nconst coalesce = require('koalas');\n\nconst os = require('os');\n\nconst {\n  URL\n} = require('url');\n\nconst {\n  AgentExporter\n} = require('./exporters/agent');\n\nconst {\n  FileExporter\n} = require('./exporters/file');\n\nconst {\n  ConsoleLogger\n} = require('./loggers/console');\n\nconst CpuProfiler = require('./profilers/cpu');\n\nconst HeapProfiler = require('./profilers/heap');\n\nconst {\n  tagger\n} = require('./tagger');\n\nconst {\n  DD_PROFILING_ENABLED,\n  DD_PROFILING_PROFILERS,\n  DD_ENV,\n  DD_TAGS,\n  DD_SERVICE,\n  DD_VERSION,\n  DD_TRACE_AGENT_URL,\n  DD_AGENT_HOST,\n  DD_TRACE_AGENT_PORT,\n  DD_PROFILING_UPLOAD_TIMEOUT\n} = process.env;\n\nclass Config {\n  constructor(options = {}) {\n    const enabled = coalesce(options.enabled, DD_PROFILING_ENABLED, true);\n    const env = coalesce(options.env, DD_ENV);\n    const service = options.service || DD_SERVICE || 'node';\n    const host = os.hostname();\n    const version = coalesce(options.version, DD_VERSION); // Must be longer than one minute so pad with five seconds\n\n    const flushInterval = coalesce(options.interval, 65 * 1000);\n    const uploadTimeout = coalesce(options.uploadTimeout, DD_PROFILING_UPLOAD_TIMEOUT, 60 * 1000);\n    this.enabled = String(enabled) !== 'false';\n    this.service = service;\n    this.env = env;\n    this.host = host;\n    this.version = version;\n    this.tags = Object.assign(tagger.parse(DD_TAGS), tagger.parse(options.tags), tagger.parse({\n      env,\n      host,\n      service,\n      version\n    }));\n    this.logger = ensureLogger(options.logger);\n    this.flushInterval = flushInterval;\n    this.uploadTimeout = uploadTimeout;\n    const hostname = coalesce(options.hostname, DD_AGENT_HOST, 'localhost');\n    const port = coalesce(options.port, DD_TRACE_AGENT_PORT, 8126);\n    this.url = new URL(coalesce(options.url, DD_TRACE_AGENT_URL, `http://${hostname || 'localhost'}:${port || 8126}`));\n    this.exporters = ensureExporters(options.exporters || [new AgentExporter(this)], this);\n    const profilers = coalesce(options.profilers, DD_PROFILING_PROFILERS, [new CpuProfiler(), new HeapProfiler()]);\n    this.profilers = ensureProfilers(profilers, this);\n  }\n\n}\n\nmodule.exports = {\n  Config\n};\n\nfunction getExporter(name, options) {\n  switch (name) {\n    case 'agent':\n      return new AgentExporter(options);\n\n    case 'file':\n      return new FileExporter(options);\n  }\n}\n\nfunction ensureExporters(exporters, options) {\n  if (typeof exporters === 'string') {\n    exporters = exporters.split(',');\n  }\n\n  for (let i = 0; i < exporters.length; i++) {\n    const exporter = exporters[i];\n\n    if (typeof exporter === 'string') {\n      exporters[i] = getExporter(exporter, options);\n    }\n  }\n\n  return exporters;\n}\n\nfunction getProfiler(name, options) {\n  switch (name) {\n    case 'cpu':\n      return new CpuProfiler(options);\n\n    case 'heap':\n      return new HeapProfiler(options);\n\n    default:\n      options.logger.error(`Unknown profiler \"${name}\"`);\n  }\n}\n\nfunction ensureProfilers(profilers, options) {\n  if (typeof profilers === 'string') {\n    profilers = profilers.split(',');\n  }\n\n  for (let i = 0; i < profilers.length; i++) {\n    const profiler = profilers[i];\n\n    if (typeof profiler === 'string') {\n      profilers[i] = getProfiler(profiler, options);\n    }\n  } // Filter out any invalid profilers\n\n\n  return profilers.filter(v => v);\n}\n\nfunction ensureLogger(logger) {\n  if (typeof logger !== 'object' || typeof logger.debug !== 'function' || typeof logger.info !== 'function' || typeof logger.warn !== 'function' || typeof logger.error !== 'function') {\n    return new ConsoleLogger();\n  }\n\n  return logger;\n}","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/profiling/config.js"],"names":["coalesce","require","os","URL","AgentExporter","FileExporter","ConsoleLogger","CpuProfiler","HeapProfiler","tagger","DD_PROFILING_ENABLED","DD_PROFILING_PROFILERS","DD_ENV","DD_TAGS","DD_SERVICE","DD_VERSION","DD_TRACE_AGENT_URL","DD_AGENT_HOST","DD_TRACE_AGENT_PORT","DD_PROFILING_UPLOAD_TIMEOUT","process","env","Config","constructor","options","enabled","service","host","hostname","version","flushInterval","interval","uploadTimeout","String","tags","Object","assign","parse","logger","ensureLogger","port","url","exporters","ensureExporters","profilers","ensureProfilers","module","exports","getExporter","name","split","i","length","exporter","getProfiler","error","profiler","filter","v","debug","info","warn"],"mappings":"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","sourcesContent":["'use strict'\n\nconst coalesce = require('koalas')\nconst os = require('os')\nconst { URL } = require('url')\nconst { AgentExporter } = require('./exporters/agent')\nconst { FileExporter } = require('./exporters/file')\nconst { ConsoleLogger } = require('./loggers/console')\nconst CpuProfiler = require('./profilers/cpu')\nconst HeapProfiler = require('./profilers/heap')\nconst { tagger } = require('./tagger')\n\nconst {\n  DD_PROFILING_ENABLED,\n  DD_PROFILING_PROFILERS,\n  DD_ENV,\n  DD_TAGS,\n  DD_SERVICE,\n  DD_VERSION,\n  DD_TRACE_AGENT_URL,\n  DD_AGENT_HOST,\n  DD_TRACE_AGENT_PORT,\n  DD_PROFILING_UPLOAD_TIMEOUT\n} = process.env\n\nclass Config {\n  constructor (options = {}) {\n    const enabled = coalesce(options.enabled, DD_PROFILING_ENABLED, true)\n    const env = coalesce(options.env, DD_ENV)\n    const service = options.service || DD_SERVICE || 'node'\n    const host = os.hostname()\n    const version = coalesce(options.version, DD_VERSION)\n    // Must be longer than one minute so pad with five seconds\n    const flushInterval = coalesce(options.interval, 65 * 1000)\n    const uploadTimeout = coalesce(options.uploadTimeout,\n      DD_PROFILING_UPLOAD_TIMEOUT, 60 * 1000)\n\n    this.enabled = String(enabled) !== 'false'\n    this.service = service\n    this.env = env\n    this.host = host\n\n    this.version = version\n    this.tags = Object.assign(\n      tagger.parse(DD_TAGS),\n      tagger.parse(options.tags),\n      tagger.parse({ env, host, service, version })\n    )\n    this.logger = ensureLogger(options.logger)\n    this.flushInterval = flushInterval\n    this.uploadTimeout = uploadTimeout\n\n    const hostname = coalesce(options.hostname, DD_AGENT_HOST, 'localhost')\n    const port = coalesce(options.port, DD_TRACE_AGENT_PORT, 8126)\n    this.url = new URL(coalesce(options.url, DD_TRACE_AGENT_URL,\n      `http://${hostname || 'localhost'}:${port || 8126}`))\n\n    this.exporters = ensureExporters(options.exporters || [\n      new AgentExporter(this)\n    ], this)\n\n    const profilers = coalesce(options.profilers, DD_PROFILING_PROFILERS, [\n      new CpuProfiler(),\n      new HeapProfiler()\n    ])\n\n    this.profilers = ensureProfilers(profilers, this)\n  }\n}\n\nmodule.exports = { Config }\n\nfunction getExporter (name, options) {\n  switch (name) {\n    case 'agent':\n      return new AgentExporter(options)\n    case 'file':\n      return new FileExporter(options)\n  }\n}\n\nfunction ensureExporters (exporters, options) {\n  if (typeof exporters === 'string') {\n    exporters = exporters.split(',')\n  }\n\n  for (let i = 0; i < exporters.length; i++) {\n    const exporter = exporters[i]\n    if (typeof exporter === 'string') {\n      exporters[i] = getExporter(exporter, options)\n    }\n  }\n\n  return exporters\n}\n\nfunction getProfiler (name, options) {\n  switch (name) {\n    case 'cpu':\n      return new CpuProfiler(options)\n    case 'heap':\n      return new HeapProfiler(options)\n    default:\n      options.logger.error(`Unknown profiler \"${name}\"`)\n  }\n}\n\nfunction ensureProfilers (profilers, options) {\n  if (typeof profilers === 'string') {\n    profilers = profilers.split(',')\n  }\n\n  for (let i = 0; i < profilers.length; i++) {\n    const profiler = profilers[i]\n    if (typeof profiler === 'string') {\n      profilers[i] = getProfiler(profiler, options)\n    }\n  }\n\n  // Filter out any invalid profilers\n  return profilers.filter(v => v)\n}\n\nfunction ensureLogger (logger) {\n  if (typeof logger !== 'object' ||\n    typeof logger.debug !== 'function' ||\n    typeof logger.info !== 'function' ||\n    typeof logger.warn !== 'function' ||\n    typeof logger.error !== 'function') {\n    return new ConsoleLogger()\n  }\n\n  return logger\n}\n"]},"metadata":{},"sourceType":"script"}