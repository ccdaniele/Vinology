{"ast":null,"code":"'use strict';\n\nconst lookup = require('dns').lookup; // cache to avoid instrumentation\n\n\nconst dgram = require('dgram');\n\nconst isIP = require('net').isIP;\n\nconst log = require('./log');\n\nconst MAX_BUFFER_SIZE = 1024; // limit from the agent\n\nclass Client {\n  constructor(options) {\n    options = options || {};\n    this._host = options.host || 'localhost';\n    this._family = isIP(this._host);\n    this._port = options.port || 8125;\n    this._prefix = options.prefix || '';\n    this._tags = options.tags || [];\n    this._queue = [];\n    this._buffer = '';\n    this._offset = 0;\n    this._udp4 = this._socket('udp4');\n    this._udp6 = this._socket('udp6');\n  }\n\n  gauge(stat, value, tags) {\n    this._add(stat, value, 'g', tags);\n  }\n\n  increment(stat, value, tags) {\n    this._add(stat, value, 'c', tags);\n  }\n\n  flush() {\n    const queue = this._enqueue();\n\n    if (this._queue.length === 0) return;\n    this._queue = [];\n\n    if (this._family !== 0) {\n      this._sendAll(queue, this._host, this._family);\n    } else {\n      lookup(this._host, (err, address, family) => {\n        if (err) return log.error(err);\n\n        this._sendAll(queue, address, family);\n      });\n    }\n  }\n\n  _send(address, family, buffer) {\n    const socket = family === 6 ? this._udp6 : this._udp4;\n    log.debug(`Sending to DogStatsD: ${buffer}`);\n    socket.send(buffer, 0, buffer.length, this._port, address);\n  }\n\n  _sendAll(queue, address, family) {\n    queue.forEach(buffer => this._send(address, family, buffer));\n  }\n\n  _add(stat, value, type, tags) {\n    const message = `${this._prefix + stat}:${value}|${type}`;\n    tags = tags ? this._tags.concat(tags) : this._tags;\n\n    if (tags.length > 0) {\n      this._write(`${message}|#${tags.join(',')}\\n`);\n    } else {\n      this._write(`${message}\\n`);\n    }\n  }\n\n  _write(message) {\n    const offset = Buffer.byteLength(message);\n\n    if (this._offset + offset > MAX_BUFFER_SIZE) {\n      this._enqueue();\n    }\n\n    this._offset += offset;\n    this._buffer += message;\n  }\n\n  _enqueue() {\n    if (this._offset > 0) {\n      this._queue.push(Buffer.from(this._buffer));\n\n      this._buffer = '';\n      this._offset = 0;\n    }\n\n    return this._queue;\n  }\n\n  _socket(type) {\n    const socket = dgram.createSocket(type);\n    socket.on('error', () => {});\n    socket.unref();\n    return socket;\n  }\n\n}\n\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/dogstatsd.js"],"names":["lookup","require","dgram","isIP","log","MAX_BUFFER_SIZE","Client","constructor","options","_host","host","_family","_port","port","_prefix","prefix","_tags","tags","_queue","_buffer","_offset","_udp4","_socket","_udp6","gauge","stat","value","_add","increment","flush","queue","_enqueue","length","_sendAll","err","address","family","error","_send","buffer","socket","debug","send","forEach","type","message","concat","_write","join","offset","Buffer","byteLength","push","from","createSocket","on","unref","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst lookup = require('dns').lookup // cache to avoid instrumentation\nconst dgram = require('dgram')\nconst isIP = require('net').isIP\nconst log = require('./log')\n\nconst MAX_BUFFER_SIZE = 1024 // limit from the agent\n\nclass Client {\n  constructor (options) {\n    options = options || {}\n\n    this._host = options.host || 'localhost'\n    this._family = isIP(this._host)\n    this._port = options.port || 8125\n    this._prefix = options.prefix || ''\n    this._tags = options.tags || []\n    this._queue = []\n    this._buffer = ''\n    this._offset = 0\n    this._udp4 = this._socket('udp4')\n    this._udp6 = this._socket('udp6')\n  }\n\n  gauge (stat, value, tags) {\n    this._add(stat, value, 'g', tags)\n  }\n\n  increment (stat, value, tags) {\n    this._add(stat, value, 'c', tags)\n  }\n\n  flush () {\n    const queue = this._enqueue()\n\n    if (this._queue.length === 0) return\n\n    this._queue = []\n\n    if (this._family !== 0) {\n      this._sendAll(queue, this._host, this._family)\n    } else {\n      lookup(this._host, (err, address, family) => {\n        if (err) return log.error(err)\n        this._sendAll(queue, address, family)\n      })\n    }\n  }\n\n  _send (address, family, buffer) {\n    const socket = family === 6 ? this._udp6 : this._udp4\n\n    log.debug(`Sending to DogStatsD: ${buffer}`)\n\n    socket.send(buffer, 0, buffer.length, this._port, address)\n  }\n\n  _sendAll (queue, address, family) {\n    queue.forEach((buffer) => this._send(address, family, buffer))\n  }\n\n  _add (stat, value, type, tags) {\n    const message = `${this._prefix + stat}:${value}|${type}`\n\n    tags = tags ? this._tags.concat(tags) : this._tags\n\n    if (tags.length > 0) {\n      this._write(`${message}|#${tags.join(',')}\\n`)\n    } else {\n      this._write(`${message}\\n`)\n    }\n  }\n\n  _write (message) {\n    const offset = Buffer.byteLength(message)\n\n    if (this._offset + offset > MAX_BUFFER_SIZE) {\n      this._enqueue()\n    }\n\n    this._offset += offset\n    this._buffer += message\n  }\n\n  _enqueue () {\n    if (this._offset > 0) {\n      this._queue.push(Buffer.from(this._buffer))\n      this._buffer = ''\n      this._offset = 0\n    }\n\n    return this._queue\n  }\n\n  _socket (type) {\n    const socket = dgram.createSocket(type)\n\n    socket.on('error', () => {})\n    socket.unref()\n\n    return socket\n  }\n}\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}