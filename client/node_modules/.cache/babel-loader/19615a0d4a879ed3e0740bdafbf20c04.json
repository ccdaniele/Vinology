{"ast":null,"code":"const URL = require('url').URL;\n\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  GIT_REPOSITORY_URL,\n  CI_PIPELINE_ID,\n  CI_PIPELINE_NAME,\n  CI_PIPELINE_NUMBER,\n  CI_PIPELINE_URL,\n  CI_PROVIDER_NAME,\n  CI_WORKSPACE_PATH,\n  CI_JOB_URL,\n  CI_JOB_NAME,\n  CI_STAGE_NAME\n} = require('./tags');\n\nfunction removeEmptyValues(tags) {\n  return Object.keys(tags).reduce((filteredTags, tag) => {\n    if (!tags[tag]) {\n      return filteredTags;\n    }\n\n    return { ...filteredTags,\n      [tag]: tags[tag]\n    };\n  }, {});\n}\n\nfunction normalizeTag(targetTags, tagKey, normalize) {\n  if (targetTags[tagKey]) {\n    targetTags[tagKey] = normalize(targetTags[tagKey]);\n  }\n}\n\nfunction normalizeRef(ref) {\n  if (!ref) {\n    return ref;\n  }\n\n  return ref.replace(/origin\\/|refs\\/heads\\/|tags\\//gm, '');\n}\n\nfunction filterSensitiveInfoFromRepository(repositoryUrl) {\n  if (repositoryUrl.startsWith('git@')) {\n    return repositoryUrl;\n  }\n\n  try {\n    const {\n      protocol,\n      hostname,\n      pathname\n    } = new URL(repositoryUrl);\n    return `${protocol}//${hostname}${pathname}`;\n  } catch (e) {\n    return repositoryUrl;\n  }\n}\n\nfunction resolveTilde(filePath) {\n  if (!filePath || typeof filePath !== 'string') {\n    return '';\n  } // '~/folder/path' or '~'\n\n\n  if (filePath[0] === '~' && (filePath[1] === '/' || filePath.length === 1)) {\n    return filePath.replace('~', process.env.HOME);\n  }\n\n  return filePath;\n}\n\nmodule.exports = {\n  getCIMetadata() {\n    const {\n      env\n    } = process;\n    let tags = {};\n\n    if (env.JENKINS_URL) {\n      const {\n        WORKSPACE,\n        BUILD_TAG,\n        JOB_NAME,\n        BUILD_NUMBER,\n        BUILD_URL,\n        GIT_BRANCH: JENKINS_GIT_BRANCH,\n        GIT_COMMIT: JENKINS_GIT_COMMIT,\n        GIT_URL: JENKINS_GIT_REPOSITORY_URL,\n        GIT_URL_1: JENKINS_GIT_REPOSITORY_URL_1\n      } = env;\n      tags = {\n        [CI_PIPELINE_ID]: BUILD_TAG,\n        [CI_PIPELINE_NUMBER]: BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILD_URL,\n        [CI_PROVIDER_NAME]: 'jenkins',\n        [GIT_COMMIT_SHA]: JENKINS_GIT_COMMIT,\n        [GIT_REPOSITORY_URL]: JENKINS_GIT_REPOSITORY_URL || JENKINS_GIT_REPOSITORY_URL_1,\n        [CI_WORKSPACE_PATH]: WORKSPACE\n      };\n      const isTag = JENKINS_GIT_BRANCH && JENKINS_GIT_BRANCH.includes('tags');\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH;\n      const ref = normalizeRef(JENKINS_GIT_BRANCH);\n      tags[refKey] = ref;\n      let finalPipelineName = '';\n\n      if (JOB_NAME) {\n        // Job names can contain parameters, e.g. jobName/KEY1=VALUE1,KEY2=VALUE2/branchName\n        const jobNameAndParams = JOB_NAME.split('/');\n\n        if (jobNameAndParams.length > 1 && jobNameAndParams[1].includes('=')) {\n          finalPipelineName = jobNameAndParams[0];\n        } else {\n          finalPipelineName = JOB_NAME.replace(`/${ref}`, '');\n        }\n\n        tags[CI_PIPELINE_NAME] = finalPipelineName;\n      }\n    }\n\n    if (env.GITLAB_CI) {\n      const {\n        CI_PIPELINE_ID: GITLAB_PIPELINE_ID,\n        CI_PROJECT_PATH,\n        CI_PIPELINE_IID,\n        CI_PIPELINE_URL: GITLAB_PIPELINE_URL,\n        CI_PROJECT_DIR,\n        CI_COMMIT_BRANCH,\n        CI_COMMIT_TAG,\n        CI_COMMIT_SHA,\n        CI_REPOSITORY_URL,\n        CI_JOB_URL: GITLAB_CI_JOB_URL,\n        CI_JOB_STAGE,\n        CI_JOB_NAME: GITLAB_CI_JOB_NAME,\n        CI_COMMIT_MESSAGE\n      } = env;\n      tags = {\n        [CI_PIPELINE_ID]: GITLAB_PIPELINE_ID,\n        [CI_PIPELINE_NAME]: CI_PROJECT_PATH,\n        [CI_PIPELINE_NUMBER]: CI_PIPELINE_IID,\n        [CI_PROVIDER_NAME]: 'gitlab',\n        [GIT_COMMIT_SHA]: CI_COMMIT_SHA,\n        [GIT_REPOSITORY_URL]: CI_REPOSITORY_URL,\n        [CI_JOB_URL]: GITLAB_CI_JOB_URL,\n        [GIT_TAG]: CI_COMMIT_TAG,\n        [GIT_BRANCH]: CI_COMMIT_BRANCH,\n        [CI_WORKSPACE_PATH]: CI_PROJECT_DIR,\n        [CI_PIPELINE_URL]: GITLAB_PIPELINE_URL && GITLAB_PIPELINE_URL.replace('/-/pipelines/', '/pipelines/'),\n        [CI_STAGE_NAME]: CI_JOB_STAGE,\n        [CI_JOB_NAME]: GITLAB_CI_JOB_NAME,\n        [GIT_COMMIT_MESSAGE]: CI_COMMIT_MESSAGE\n      };\n    }\n\n    if (env.CIRCLECI) {\n      const {\n        CIRCLE_WORKFLOW_ID,\n        CIRCLE_PROJECT_REPONAME,\n        CIRCLE_BUILD_URL,\n        CIRCLE_WORKING_DIRECTORY,\n        CIRCLE_BRANCH,\n        CIRCLE_TAG,\n        CIRCLE_SHA1,\n        CIRCLE_REPOSITORY_URL,\n        CIRCLE_JOB\n      } = env;\n      const pipelineUrl = `https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}`;\n      tags = {\n        [CI_PIPELINE_ID]: CIRCLE_WORKFLOW_ID,\n        [CI_PIPELINE_NAME]: CIRCLE_PROJECT_REPONAME,\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_JOB_NAME]: CIRCLE_JOB,\n        [CI_PROVIDER_NAME]: 'circleci',\n        [GIT_COMMIT_SHA]: CIRCLE_SHA1,\n        [GIT_REPOSITORY_URL]: CIRCLE_REPOSITORY_URL,\n        [CI_JOB_URL]: CIRCLE_BUILD_URL,\n        [CI_WORKSPACE_PATH]: CIRCLE_WORKING_DIRECTORY,\n        [CIRCLE_TAG ? GIT_TAG : GIT_BRANCH]: CIRCLE_TAG || CIRCLE_BRANCH\n      };\n    }\n\n    if (env.GITHUB_ACTIONS || env.GITHUB_ACTION) {\n      const {\n        GITHUB_RUN_ID,\n        GITHUB_WORKFLOW,\n        GITHUB_RUN_NUMBER,\n        GITHUB_WORKSPACE,\n        GITHUB_HEAD_REF,\n        GITHUB_REF,\n        GITHUB_SHA,\n        GITHUB_REPOSITORY\n      } = env;\n      const repositoryURL = `https://github.com/${GITHUB_REPOSITORY}.git`;\n      const pipelineURL = `https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks`;\n      const ref = GITHUB_HEAD_REF || GITHUB_REF || '';\n      const refKey = ref.includes('tags') ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PIPELINE_ID]: GITHUB_RUN_ID,\n        [CI_PIPELINE_NAME]: GITHUB_WORKFLOW,\n        [CI_PIPELINE_NUMBER]: GITHUB_RUN_NUMBER,\n        [CI_PIPELINE_URL]: pipelineURL,\n        [CI_PROVIDER_NAME]: 'github',\n        [GIT_COMMIT_SHA]: GITHUB_SHA,\n        [GIT_REPOSITORY_URL]: repositoryURL,\n        [CI_JOB_URL]: pipelineURL,\n        [CI_WORKSPACE_PATH]: GITHUB_WORKSPACE,\n        [refKey]: ref\n      };\n    }\n\n    if (env.APPVEYOR) {\n      const {\n        APPVEYOR_REPO_NAME,\n        APPVEYOR_REPO_PROVIDER,\n        APPVEYOR_BUILD_FOLDER,\n        APPVEYOR_BUILD_ID,\n        APPVEYOR_BUILD_NUMBER,\n        APPVEYOR_REPO_COMMIT,\n        APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH,\n        APPVEYOR_REPO_BRANCH,\n        APPVEYOR_REPO_TAG_NAME,\n        APPVEYOR_REPO_COMMIT_AUTHOR,\n        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      } = env;\n      const pipelineUrl = `https://ci.appveyor.com/project/${APPVEYOR_REPO_NAME}/builds/${APPVEYOR_BUILD_ID}`;\n      tags = {\n        [CI_PROVIDER_NAME]: 'appveyor',\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_PIPELINE_ID]: APPVEYOR_BUILD_ID,\n        [CI_PIPELINE_NAME]: APPVEYOR_REPO_NAME,\n        [CI_PIPELINE_NUMBER]: APPVEYOR_BUILD_NUMBER,\n        [CI_JOB_URL]: pipelineUrl,\n        [CI_WORKSPACE_PATH]: APPVEYOR_BUILD_FOLDER,\n        [GIT_COMMIT_AUTHOR_NAME]: APPVEYOR_REPO_COMMIT_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      };\n\n      if (APPVEYOR_REPO_PROVIDER === 'github') {\n        const refKey = APPVEYOR_REPO_TAG_NAME ? GIT_TAG : GIT_BRANCH;\n        const ref = APPVEYOR_REPO_TAG_NAME || APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH || APPVEYOR_REPO_BRANCH;\n        tags = { ...tags,\n          [GIT_REPOSITORY_URL]: `https://github.com/${APPVEYOR_REPO_NAME}.git`,\n          [GIT_COMMIT_SHA]: APPVEYOR_REPO_COMMIT,\n          [refKey]: ref\n        };\n      }\n    }\n\n    if (env.TF_BUILD) {\n      const {\n        BUILD_SOURCESDIRECTORY,\n        BUILD_BUILDID,\n        BUILD_DEFINITIONNAME,\n        SYSTEM_TEAMFOUNDATIONSERVERURI,\n        SYSTEM_TEAMPROJECTID,\n        SYSTEM_JOBID,\n        SYSTEM_TASKINSTANCEID,\n        SYSTEM_PULLREQUEST_SOURCEBRANCH,\n        BUILD_SOURCEBRANCH,\n        BUILD_SOURCEBRANCHNAME,\n        SYSTEM_PULLREQUEST_SOURCECOMMITID,\n        SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI,\n        BUILD_REPOSITORY_URI,\n        BUILD_SOURCEVERSION,\n        BUILD_REQUESTEDFORID,\n        BUILD_REQUESTEDFOREMAIL,\n        BUILD_SOURCEVERSIONMESSAGE\n      } = env;\n      const ref = SYSTEM_PULLREQUEST_SOURCEBRANCH || BUILD_SOURCEBRANCH || BUILD_SOURCEBRANCHNAME;\n      const refKey = ref.includes('tags') ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'azurepipelines',\n        [CI_PIPELINE_ID]: BUILD_BUILDID,\n        [CI_PIPELINE_NAME]: BUILD_DEFINITIONNAME,\n        [CI_PIPELINE_NUMBER]: BUILD_BUILDID,\n        [GIT_COMMIT_SHA]: SYSTEM_PULLREQUEST_SOURCECOMMITID || BUILD_SOURCEVERSION,\n        [CI_WORKSPACE_PATH]: BUILD_SOURCESDIRECTORY,\n        [GIT_REPOSITORY_URL]: SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI || BUILD_REPOSITORY_URI,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILD_REQUESTEDFORID,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILD_REQUESTEDFOREMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILD_SOURCEVERSIONMESSAGE\n      };\n\n      if (SYSTEM_TEAMFOUNDATIONSERVERURI && SYSTEM_TEAMPROJECTID && BUILD_BUILDID) {\n        const baseUrl = `${SYSTEM_TEAMFOUNDATIONSERVERURI}${SYSTEM_TEAMPROJECTID}/_build/results?buildId=${BUILD_BUILDID}`;\n        const pipelineUrl = baseUrl;\n        const jobUrl = `${baseUrl}&view=logs&j=${SYSTEM_JOBID}&t=${SYSTEM_TASKINSTANCEID}`;\n        tags = { ...tags,\n          [CI_PIPELINE_URL]: pipelineUrl,\n          [CI_JOB_URL]: jobUrl\n        };\n      }\n    }\n\n    if (env.BITBUCKET_COMMIT) {\n      const {\n        BITBUCKET_REPO_FULL_NAME,\n        BITBUCKET_BUILD_NUMBER,\n        BITBUCKET_BRANCH,\n        BITBUCKET_COMMIT,\n        BITBUCKET_GIT_SSH_ORIGIN,\n        BITBUCKET_TAG,\n        BITBUCKET_PIPELINE_UUID,\n        BITBUCKET_CLONE_DIR\n      } = env;\n      const url = `https://bitbucket.org/${BITBUCKET_REPO_FULL_NAME}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}`;\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitbucket',\n        [GIT_COMMIT_SHA]: BITBUCKET_COMMIT,\n        [CI_PIPELINE_NUMBER]: BITBUCKET_BUILD_NUMBER,\n        [CI_PIPELINE_NAME]: BITBUCKET_REPO_FULL_NAME,\n        [CI_JOB_URL]: url,\n        [CI_PIPELINE_URL]: url,\n        [GIT_BRANCH]: BITBUCKET_BRANCH,\n        [GIT_TAG]: BITBUCKET_TAG,\n        [GIT_REPOSITORY_URL]: BITBUCKET_GIT_SSH_ORIGIN,\n        [CI_WORKSPACE_PATH]: BITBUCKET_CLONE_DIR,\n        [CI_PIPELINE_ID]: BITBUCKET_PIPELINE_UUID && BITBUCKET_PIPELINE_UUID.replace(/{|}/gm, '')\n      };\n    }\n\n    if (env.BITRISE_BUILD_SLUG) {\n      const {\n        BITRISE_GIT_COMMIT,\n        GIT_CLONE_COMMIT_HASH,\n        BITRISEIO_GIT_BRANCH_DEST,\n        BITRISE_GIT_BRANCH,\n        BITRISE_BUILD_SLUG,\n        BITRISE_TRIGGERED_WORKFLOW_ID,\n        BITRISE_BUILD_NUMBER,\n        BITRISE_BUILD_URL,\n        BITRISE_SOURCE_DIR,\n        GIT_REPOSITORY_URL: BITRISE_GIT_REPOSITORY_URL,\n        BITRISE_GIT_TAG,\n        BITRISE_GIT_MESSAGE\n      } = env;\n      const isTag = !!BITRISE_GIT_TAG;\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH;\n      const ref = BITRISE_GIT_TAG || BITRISEIO_GIT_BRANCH_DEST || BITRISE_GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitrise',\n        [CI_PIPELINE_ID]: BITRISE_BUILD_SLUG,\n        [CI_PIPELINE_NAME]: BITRISE_TRIGGERED_WORKFLOW_ID,\n        [CI_PIPELINE_NUMBER]: BITRISE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BITRISE_BUILD_URL,\n        [GIT_COMMIT_SHA]: BITRISE_GIT_COMMIT || GIT_CLONE_COMMIT_HASH,\n        [GIT_REPOSITORY_URL]: BITRISE_GIT_REPOSITORY_URL,\n        [CI_WORKSPACE_PATH]: BITRISE_SOURCE_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: BITRISE_GIT_MESSAGE\n      };\n    }\n\n    if (env.BUILDKITE) {\n      const {\n        BUILDKITE_BRANCH,\n        BUILDKITE_COMMIT,\n        BUILDKITE_REPO,\n        BUILDKITE_TAG,\n        BUILDKITE_BUILD_ID,\n        BUILDKITE_PIPELINE_SLUG,\n        BUILDKITE_BUILD_NUMBER,\n        BUILDKITE_BUILD_URL,\n        BUILDKITE_JOB_ID,\n        BUILDKITE_BUILD_CHECKOUT_PATH,\n        BUILDKITE_BUILD_AUTHOR,\n        BUILDKITE_BUILD_AUTHOR_EMAIL,\n        BUILDKITE_MESSAGE\n      } = env;\n      const ref = BUILDKITE_TAG || BUILDKITE_BRANCH;\n      const refKey = BUILDKITE_TAG ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'buildkite',\n        [CI_PIPELINE_ID]: BUILDKITE_BUILD_ID,\n        [CI_PIPELINE_NAME]: BUILDKITE_PIPELINE_SLUG,\n        [CI_PIPELINE_NUMBER]: BUILDKITE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILDKITE_BUILD_URL,\n        [CI_JOB_URL]: `${BUILDKITE_BUILD_URL}#${BUILDKITE_JOB_ID}`,\n        [GIT_COMMIT_SHA]: BUILDKITE_COMMIT,\n        [CI_WORKSPACE_PATH]: BUILDKITE_BUILD_CHECKOUT_PATH,\n        [GIT_REPOSITORY_URL]: BUILDKITE_REPO,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILDKITE_BUILD_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILDKITE_BUILD_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILDKITE_MESSAGE\n      };\n    }\n\n    if (env.TRAVIS) {\n      const {\n        TRAVIS_PULL_REQUEST_BRANCH,\n        TRAVIS_BRANCH,\n        TRAVIS_COMMIT,\n        TRAVIS_REPO_SLUG,\n        TRAVIS_TAG,\n        TRAVIS_JOB_WEB_URL,\n        TRAVIS_BUILD_ID,\n        TRAVIS_BUILD_NUMBER,\n        TRAVIS_BUILD_WEB_URL,\n        TRAVIS_BUILD_DIR,\n        TRAVIS_COMMIT_MESSAGE\n      } = env;\n      const isTag = !!TRAVIS_TAG;\n      const ref = TRAVIS_TAG || TRAVIS_PULL_REQUEST_BRANCH || TRAVIS_BRANCH;\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'travisci',\n        [CI_JOB_URL]: TRAVIS_JOB_WEB_URL,\n        [CI_PIPELINE_ID]: TRAVIS_BUILD_ID,\n        [CI_PIPELINE_NAME]: TRAVIS_REPO_SLUG,\n        [CI_PIPELINE_NUMBER]: TRAVIS_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: TRAVIS_BUILD_WEB_URL,\n        [GIT_COMMIT_SHA]: TRAVIS_COMMIT,\n        [GIT_REPOSITORY_URL]: `https://github.com/${TRAVIS_REPO_SLUG}.git`,\n        [CI_WORKSPACE_PATH]: TRAVIS_BUILD_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: TRAVIS_COMMIT_MESSAGE\n      };\n    }\n\n    normalizeTag(tags, CI_WORKSPACE_PATH, resolveTilde);\n    normalizeTag(tags, GIT_REPOSITORY_URL, filterSensitiveInfoFromRepository);\n    normalizeTag(tags, GIT_BRANCH, normalizeRef);\n    normalizeTag(tags, GIT_TAG, normalizeRef);\n    return removeEmptyValues(tags);\n  }\n\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/plugins/util/ci.js"],"names":["URL","require","GIT_BRANCH","GIT_COMMIT_SHA","GIT_TAG","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","GIT_COMMIT_MESSAGE","GIT_REPOSITORY_URL","CI_PIPELINE_ID","CI_PIPELINE_NAME","CI_PIPELINE_NUMBER","CI_PIPELINE_URL","CI_PROVIDER_NAME","CI_WORKSPACE_PATH","CI_JOB_URL","CI_JOB_NAME","CI_STAGE_NAME","removeEmptyValues","tags","Object","keys","reduce","filteredTags","tag","normalizeTag","targetTags","tagKey","normalize","normalizeRef","ref","replace","filterSensitiveInfoFromRepository","repositoryUrl","startsWith","protocol","hostname","pathname","e","resolveTilde","filePath","length","process","env","HOME","module","exports","getCIMetadata","JENKINS_URL","WORKSPACE","BUILD_TAG","JOB_NAME","BUILD_NUMBER","BUILD_URL","JENKINS_GIT_BRANCH","GIT_COMMIT","JENKINS_GIT_COMMIT","GIT_URL","JENKINS_GIT_REPOSITORY_URL","GIT_URL_1","JENKINS_GIT_REPOSITORY_URL_1","isTag","includes","refKey","finalPipelineName","jobNameAndParams","split","GITLAB_CI","GITLAB_PIPELINE_ID","CI_PROJECT_PATH","CI_PIPELINE_IID","GITLAB_PIPELINE_URL","CI_PROJECT_DIR","CI_COMMIT_BRANCH","CI_COMMIT_TAG","CI_COMMIT_SHA","CI_REPOSITORY_URL","GITLAB_CI_JOB_URL","CI_JOB_STAGE","GITLAB_CI_JOB_NAME","CI_COMMIT_MESSAGE","CIRCLECI","CIRCLE_WORKFLOW_ID","CIRCLE_PROJECT_REPONAME","CIRCLE_BUILD_URL","CIRCLE_WORKING_DIRECTORY","CIRCLE_BRANCH","CIRCLE_TAG","CIRCLE_SHA1","CIRCLE_REPOSITORY_URL","CIRCLE_JOB","pipelineUrl","GITHUB_ACTIONS","GITHUB_ACTION","GITHUB_RUN_ID","GITHUB_WORKFLOW","GITHUB_RUN_NUMBER","GITHUB_WORKSPACE","GITHUB_HEAD_REF","GITHUB_REF","GITHUB_SHA","GITHUB_REPOSITORY","repositoryURL","pipelineURL","APPVEYOR","APPVEYOR_REPO_NAME","APPVEYOR_REPO_PROVIDER","APPVEYOR_BUILD_FOLDER","APPVEYOR_BUILD_ID","APPVEYOR_BUILD_NUMBER","APPVEYOR_REPO_COMMIT","APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH","APPVEYOR_REPO_BRANCH","APPVEYOR_REPO_TAG_NAME","APPVEYOR_REPO_COMMIT_AUTHOR","APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL","APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED","TF_BUILD","BUILD_SOURCESDIRECTORY","BUILD_BUILDID","BUILD_DEFINITIONNAME","SYSTEM_TEAMFOUNDATIONSERVERURI","SYSTEM_TEAMPROJECTID","SYSTEM_JOBID","SYSTEM_TASKINSTANCEID","SYSTEM_PULLREQUEST_SOURCEBRANCH","BUILD_SOURCEBRANCH","BUILD_SOURCEBRANCHNAME","SYSTEM_PULLREQUEST_SOURCECOMMITID","SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI","BUILD_REPOSITORY_URI","BUILD_SOURCEVERSION","BUILD_REQUESTEDFORID","BUILD_REQUESTEDFOREMAIL","BUILD_SOURCEVERSIONMESSAGE","baseUrl","jobUrl","BITBUCKET_COMMIT","BITBUCKET_REPO_FULL_NAME","BITBUCKET_BUILD_NUMBER","BITBUCKET_BRANCH","BITBUCKET_GIT_SSH_ORIGIN","BITBUCKET_TAG","BITBUCKET_PIPELINE_UUID","BITBUCKET_CLONE_DIR","url","BITRISE_BUILD_SLUG","BITRISE_GIT_COMMIT","GIT_CLONE_COMMIT_HASH","BITRISEIO_GIT_BRANCH_DEST","BITRISE_GIT_BRANCH","BITRISE_TRIGGERED_WORKFLOW_ID","BITRISE_BUILD_NUMBER","BITRISE_BUILD_URL","BITRISE_SOURCE_DIR","BITRISE_GIT_REPOSITORY_URL","BITRISE_GIT_TAG","BITRISE_GIT_MESSAGE","BUILDKITE","BUILDKITE_BRANCH","BUILDKITE_COMMIT","BUILDKITE_REPO","BUILDKITE_TAG","BUILDKITE_BUILD_ID","BUILDKITE_PIPELINE_SLUG","BUILDKITE_BUILD_NUMBER","BUILDKITE_BUILD_URL","BUILDKITE_JOB_ID","BUILDKITE_BUILD_CHECKOUT_PATH","BUILDKITE_BUILD_AUTHOR","BUILDKITE_BUILD_AUTHOR_EMAIL","BUILDKITE_MESSAGE","TRAVIS","TRAVIS_PULL_REQUEST_BRANCH","TRAVIS_BRANCH","TRAVIS_COMMIT","TRAVIS_REPO_SLUG","TRAVIS_TAG","TRAVIS_JOB_WEB_URL","TRAVIS_BUILD_ID","TRAVIS_BUILD_NUMBER","TRAVIS_BUILD_WEB_URL","TRAVIS_BUILD_DIR","TRAVIS_COMMIT_MESSAGE"],"mappings":"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","sourcesContent":["const URL = require('url').URL\n\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  GIT_REPOSITORY_URL,\n  CI_PIPELINE_ID,\n  CI_PIPELINE_NAME,\n  CI_PIPELINE_NUMBER,\n  CI_PIPELINE_URL,\n  CI_PROVIDER_NAME,\n  CI_WORKSPACE_PATH,\n  CI_JOB_URL,\n  CI_JOB_NAME,\n  CI_STAGE_NAME\n} = require('./tags')\n\nfunction removeEmptyValues (tags) {\n  return Object.keys(tags).reduce((filteredTags, tag) => {\n    if (!tags[tag]) {\n      return filteredTags\n    }\n    return {\n      ...filteredTags,\n      [tag]: tags[tag]\n    }\n  }, {})\n}\n\nfunction normalizeTag (targetTags, tagKey, normalize) {\n  if (targetTags[tagKey]) {\n    targetTags[tagKey] = normalize(targetTags[tagKey])\n  }\n}\n\nfunction normalizeRef (ref) {\n  if (!ref) {\n    return ref\n  }\n  return ref.replace(/origin\\/|refs\\/heads\\/|tags\\//gm, '')\n}\n\nfunction filterSensitiveInfoFromRepository (repositoryUrl) {\n  if (repositoryUrl.startsWith('git@')) {\n    return repositoryUrl\n  }\n\n  try {\n    const { protocol, hostname, pathname } = new URL(repositoryUrl)\n\n    return `${protocol}//${hostname}${pathname}`\n  } catch (e) {\n    return repositoryUrl\n  }\n}\n\nfunction resolveTilde (filePath) {\n  if (!filePath || typeof filePath !== 'string') {\n    return ''\n  }\n  // '~/folder/path' or '~'\n  if (filePath[0] === '~' && (filePath[1] === '/' || filePath.length === 1)) {\n    return filePath.replace('~', process.env.HOME)\n  }\n  return filePath\n}\n\nmodule.exports = {\n  getCIMetadata () {\n    const { env } = process\n\n    let tags = {}\n\n    if (env.JENKINS_URL) {\n      const {\n        WORKSPACE,\n        BUILD_TAG,\n        JOB_NAME,\n        BUILD_NUMBER,\n        BUILD_URL,\n        GIT_BRANCH: JENKINS_GIT_BRANCH,\n        GIT_COMMIT: JENKINS_GIT_COMMIT,\n        GIT_URL: JENKINS_GIT_REPOSITORY_URL,\n        GIT_URL_1: JENKINS_GIT_REPOSITORY_URL_1\n      } = env\n\n      tags = {\n        [CI_PIPELINE_ID]: BUILD_TAG,\n        [CI_PIPELINE_NUMBER]: BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILD_URL,\n        [CI_PROVIDER_NAME]: 'jenkins',\n        [GIT_COMMIT_SHA]: JENKINS_GIT_COMMIT,\n        [GIT_REPOSITORY_URL]: JENKINS_GIT_REPOSITORY_URL || JENKINS_GIT_REPOSITORY_URL_1,\n        [CI_WORKSPACE_PATH]: WORKSPACE\n      }\n\n      const isTag = JENKINS_GIT_BRANCH && JENKINS_GIT_BRANCH.includes('tags')\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH\n      const ref = normalizeRef(JENKINS_GIT_BRANCH)\n\n      tags[refKey] = ref\n\n      let finalPipelineName = ''\n      if (JOB_NAME) {\n        // Job names can contain parameters, e.g. jobName/KEY1=VALUE1,KEY2=VALUE2/branchName\n        const jobNameAndParams = JOB_NAME.split('/')\n        if (jobNameAndParams.length > 1 && jobNameAndParams[1].includes('=')) {\n          finalPipelineName = jobNameAndParams[0]\n        } else {\n          finalPipelineName = JOB_NAME.replace(`/${ref}`, '')\n        }\n        tags[CI_PIPELINE_NAME] = finalPipelineName\n      }\n    }\n\n    if (env.GITLAB_CI) {\n      const {\n        CI_PIPELINE_ID: GITLAB_PIPELINE_ID,\n        CI_PROJECT_PATH,\n        CI_PIPELINE_IID,\n        CI_PIPELINE_URL: GITLAB_PIPELINE_URL,\n        CI_PROJECT_DIR,\n        CI_COMMIT_BRANCH,\n        CI_COMMIT_TAG,\n        CI_COMMIT_SHA,\n        CI_REPOSITORY_URL,\n        CI_JOB_URL: GITLAB_CI_JOB_URL,\n        CI_JOB_STAGE,\n        CI_JOB_NAME: GITLAB_CI_JOB_NAME,\n        CI_COMMIT_MESSAGE\n      } = env\n\n      tags = {\n        [CI_PIPELINE_ID]: GITLAB_PIPELINE_ID,\n        [CI_PIPELINE_NAME]: CI_PROJECT_PATH,\n        [CI_PIPELINE_NUMBER]: CI_PIPELINE_IID,\n        [CI_PROVIDER_NAME]: 'gitlab',\n        [GIT_COMMIT_SHA]: CI_COMMIT_SHA,\n        [GIT_REPOSITORY_URL]: CI_REPOSITORY_URL,\n        [CI_JOB_URL]: GITLAB_CI_JOB_URL,\n        [GIT_TAG]: CI_COMMIT_TAG,\n        [GIT_BRANCH]: CI_COMMIT_BRANCH,\n        [CI_WORKSPACE_PATH]: CI_PROJECT_DIR,\n        [CI_PIPELINE_URL]: GITLAB_PIPELINE_URL && GITLAB_PIPELINE_URL.replace('/-/pipelines/', '/pipelines/'),\n        [CI_STAGE_NAME]: CI_JOB_STAGE,\n        [CI_JOB_NAME]: GITLAB_CI_JOB_NAME,\n        [GIT_COMMIT_MESSAGE]: CI_COMMIT_MESSAGE\n      }\n    }\n\n    if (env.CIRCLECI) {\n      const {\n        CIRCLE_WORKFLOW_ID,\n        CIRCLE_PROJECT_REPONAME,\n        CIRCLE_BUILD_URL,\n        CIRCLE_WORKING_DIRECTORY,\n        CIRCLE_BRANCH,\n        CIRCLE_TAG,\n        CIRCLE_SHA1,\n        CIRCLE_REPOSITORY_URL,\n        CIRCLE_JOB\n      } = env\n\n      const pipelineUrl = `https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}`\n\n      tags = {\n        [CI_PIPELINE_ID]: CIRCLE_WORKFLOW_ID,\n        [CI_PIPELINE_NAME]: CIRCLE_PROJECT_REPONAME,\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_JOB_NAME]: CIRCLE_JOB,\n        [CI_PROVIDER_NAME]: 'circleci',\n        [GIT_COMMIT_SHA]: CIRCLE_SHA1,\n        [GIT_REPOSITORY_URL]: CIRCLE_REPOSITORY_URL,\n        [CI_JOB_URL]: CIRCLE_BUILD_URL,\n        [CI_WORKSPACE_PATH]: CIRCLE_WORKING_DIRECTORY,\n        [CIRCLE_TAG ? GIT_TAG : GIT_BRANCH]: CIRCLE_TAG || CIRCLE_BRANCH\n      }\n    }\n\n    if (env.GITHUB_ACTIONS || env.GITHUB_ACTION) {\n      const {\n        GITHUB_RUN_ID,\n        GITHUB_WORKFLOW,\n        GITHUB_RUN_NUMBER,\n        GITHUB_WORKSPACE,\n        GITHUB_HEAD_REF,\n        GITHUB_REF,\n        GITHUB_SHA,\n        GITHUB_REPOSITORY\n      } = env\n\n      const repositoryURL = `https://github.com/${GITHUB_REPOSITORY}.git`\n      const pipelineURL = `https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks`\n\n      const ref = GITHUB_HEAD_REF || GITHUB_REF || ''\n      const refKey = ref.includes('tags') ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PIPELINE_ID]: GITHUB_RUN_ID,\n        [CI_PIPELINE_NAME]: GITHUB_WORKFLOW,\n        [CI_PIPELINE_NUMBER]: GITHUB_RUN_NUMBER,\n        [CI_PIPELINE_URL]: pipelineURL,\n        [CI_PROVIDER_NAME]: 'github',\n        [GIT_COMMIT_SHA]: GITHUB_SHA,\n        [GIT_REPOSITORY_URL]: repositoryURL,\n        [CI_JOB_URL]: pipelineURL,\n        [CI_WORKSPACE_PATH]: GITHUB_WORKSPACE,\n        [refKey]: ref\n      }\n    }\n\n    if (env.APPVEYOR) {\n      const {\n        APPVEYOR_REPO_NAME,\n        APPVEYOR_REPO_PROVIDER,\n        APPVEYOR_BUILD_FOLDER,\n        APPVEYOR_BUILD_ID,\n        APPVEYOR_BUILD_NUMBER,\n        APPVEYOR_REPO_COMMIT,\n        APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH,\n        APPVEYOR_REPO_BRANCH,\n        APPVEYOR_REPO_TAG_NAME,\n        APPVEYOR_REPO_COMMIT_AUTHOR,\n        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      } = env\n\n      const pipelineUrl = `https://ci.appveyor.com/project/${APPVEYOR_REPO_NAME}/builds/${APPVEYOR_BUILD_ID}`\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'appveyor',\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_PIPELINE_ID]: APPVEYOR_BUILD_ID,\n        [CI_PIPELINE_NAME]: APPVEYOR_REPO_NAME,\n        [CI_PIPELINE_NUMBER]: APPVEYOR_BUILD_NUMBER,\n        [CI_JOB_URL]: pipelineUrl,\n        [CI_WORKSPACE_PATH]: APPVEYOR_BUILD_FOLDER,\n        [GIT_COMMIT_AUTHOR_NAME]: APPVEYOR_REPO_COMMIT_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      }\n\n      if (APPVEYOR_REPO_PROVIDER === 'github') {\n        const refKey = APPVEYOR_REPO_TAG_NAME ? GIT_TAG : GIT_BRANCH\n        const ref = APPVEYOR_REPO_TAG_NAME || APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH || APPVEYOR_REPO_BRANCH\n        tags = {\n          ...tags,\n          [GIT_REPOSITORY_URL]: `https://github.com/${APPVEYOR_REPO_NAME}.git`,\n          [GIT_COMMIT_SHA]: APPVEYOR_REPO_COMMIT,\n          [refKey]: ref\n        }\n      }\n    }\n\n    if (env.TF_BUILD) {\n      const {\n        BUILD_SOURCESDIRECTORY,\n        BUILD_BUILDID,\n        BUILD_DEFINITIONNAME,\n        SYSTEM_TEAMFOUNDATIONSERVERURI,\n        SYSTEM_TEAMPROJECTID,\n        SYSTEM_JOBID,\n        SYSTEM_TASKINSTANCEID,\n        SYSTEM_PULLREQUEST_SOURCEBRANCH,\n        BUILD_SOURCEBRANCH,\n        BUILD_SOURCEBRANCHNAME,\n        SYSTEM_PULLREQUEST_SOURCECOMMITID,\n        SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI,\n        BUILD_REPOSITORY_URI,\n        BUILD_SOURCEVERSION,\n        BUILD_REQUESTEDFORID,\n        BUILD_REQUESTEDFOREMAIL,\n        BUILD_SOURCEVERSIONMESSAGE\n      } = env\n\n      const ref = SYSTEM_PULLREQUEST_SOURCEBRANCH || BUILD_SOURCEBRANCH || BUILD_SOURCEBRANCHNAME\n      const refKey = ref.includes('tags') ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'azurepipelines',\n        [CI_PIPELINE_ID]: BUILD_BUILDID,\n        [CI_PIPELINE_NAME]: BUILD_DEFINITIONNAME,\n        [CI_PIPELINE_NUMBER]: BUILD_BUILDID,\n        [GIT_COMMIT_SHA]: SYSTEM_PULLREQUEST_SOURCECOMMITID || BUILD_SOURCEVERSION,\n        [CI_WORKSPACE_PATH]: BUILD_SOURCESDIRECTORY,\n        [GIT_REPOSITORY_URL]: SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI || BUILD_REPOSITORY_URI,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILD_REQUESTEDFORID,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILD_REQUESTEDFOREMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILD_SOURCEVERSIONMESSAGE\n      }\n\n      if (SYSTEM_TEAMFOUNDATIONSERVERURI && SYSTEM_TEAMPROJECTID && BUILD_BUILDID) {\n        const baseUrl =\n          `${SYSTEM_TEAMFOUNDATIONSERVERURI}${SYSTEM_TEAMPROJECTID}/_build/results?buildId=${BUILD_BUILDID}`\n        const pipelineUrl = baseUrl\n        const jobUrl = `${baseUrl}&view=logs&j=${SYSTEM_JOBID}&t=${SYSTEM_TASKINSTANCEID}`\n\n        tags = {\n          ...tags,\n          [CI_PIPELINE_URL]: pipelineUrl,\n          [CI_JOB_URL]: jobUrl\n        }\n      }\n    }\n\n    if (env.BITBUCKET_COMMIT) {\n      const {\n        BITBUCKET_REPO_FULL_NAME,\n        BITBUCKET_BUILD_NUMBER,\n        BITBUCKET_BRANCH,\n        BITBUCKET_COMMIT,\n        BITBUCKET_GIT_SSH_ORIGIN,\n        BITBUCKET_TAG,\n        BITBUCKET_PIPELINE_UUID,\n        BITBUCKET_CLONE_DIR\n      } = env\n\n      const url =\n        `https://bitbucket.org/${BITBUCKET_REPO_FULL_NAME}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}`\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitbucket',\n        [GIT_COMMIT_SHA]: BITBUCKET_COMMIT,\n        [CI_PIPELINE_NUMBER]: BITBUCKET_BUILD_NUMBER,\n        [CI_PIPELINE_NAME]: BITBUCKET_REPO_FULL_NAME,\n        [CI_JOB_URL]: url,\n        [CI_PIPELINE_URL]: url,\n        [GIT_BRANCH]: BITBUCKET_BRANCH,\n        [GIT_TAG]: BITBUCKET_TAG,\n        [GIT_REPOSITORY_URL]: BITBUCKET_GIT_SSH_ORIGIN,\n        [CI_WORKSPACE_PATH]: BITBUCKET_CLONE_DIR,\n        [CI_PIPELINE_ID]: BITBUCKET_PIPELINE_UUID && BITBUCKET_PIPELINE_UUID.replace(/{|}/gm, '')\n      }\n    }\n\n    if (env.BITRISE_BUILD_SLUG) {\n      const {\n        BITRISE_GIT_COMMIT,\n        GIT_CLONE_COMMIT_HASH,\n        BITRISEIO_GIT_BRANCH_DEST,\n        BITRISE_GIT_BRANCH,\n        BITRISE_BUILD_SLUG,\n        BITRISE_TRIGGERED_WORKFLOW_ID,\n        BITRISE_BUILD_NUMBER,\n        BITRISE_BUILD_URL,\n        BITRISE_SOURCE_DIR,\n        GIT_REPOSITORY_URL: BITRISE_GIT_REPOSITORY_URL,\n        BITRISE_GIT_TAG,\n        BITRISE_GIT_MESSAGE\n      } = env\n\n      const isTag = !!BITRISE_GIT_TAG\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH\n      const ref = BITRISE_GIT_TAG || BITRISEIO_GIT_BRANCH_DEST || BITRISE_GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitrise',\n        [CI_PIPELINE_ID]: BITRISE_BUILD_SLUG,\n        [CI_PIPELINE_NAME]: BITRISE_TRIGGERED_WORKFLOW_ID,\n        [CI_PIPELINE_NUMBER]: BITRISE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BITRISE_BUILD_URL,\n        [GIT_COMMIT_SHA]: BITRISE_GIT_COMMIT || GIT_CLONE_COMMIT_HASH,\n        [GIT_REPOSITORY_URL]: BITRISE_GIT_REPOSITORY_URL,\n        [CI_WORKSPACE_PATH]: BITRISE_SOURCE_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: BITRISE_GIT_MESSAGE\n      }\n    }\n\n    if (env.BUILDKITE) {\n      const {\n        BUILDKITE_BRANCH,\n        BUILDKITE_COMMIT,\n        BUILDKITE_REPO,\n        BUILDKITE_TAG,\n        BUILDKITE_BUILD_ID,\n        BUILDKITE_PIPELINE_SLUG,\n        BUILDKITE_BUILD_NUMBER,\n        BUILDKITE_BUILD_URL,\n        BUILDKITE_JOB_ID,\n        BUILDKITE_BUILD_CHECKOUT_PATH,\n        BUILDKITE_BUILD_AUTHOR,\n        BUILDKITE_BUILD_AUTHOR_EMAIL,\n        BUILDKITE_MESSAGE\n      } = env\n\n      const ref = BUILDKITE_TAG || BUILDKITE_BRANCH\n      const refKey = BUILDKITE_TAG ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'buildkite',\n        [CI_PIPELINE_ID]: BUILDKITE_BUILD_ID,\n        [CI_PIPELINE_NAME]: BUILDKITE_PIPELINE_SLUG,\n        [CI_PIPELINE_NUMBER]: BUILDKITE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILDKITE_BUILD_URL,\n        [CI_JOB_URL]: `${BUILDKITE_BUILD_URL}#${BUILDKITE_JOB_ID}`,\n        [GIT_COMMIT_SHA]: BUILDKITE_COMMIT,\n        [CI_WORKSPACE_PATH]: BUILDKITE_BUILD_CHECKOUT_PATH,\n        [GIT_REPOSITORY_URL]: BUILDKITE_REPO,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILDKITE_BUILD_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILDKITE_BUILD_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILDKITE_MESSAGE\n      }\n    }\n\n    if (env.TRAVIS) {\n      const {\n        TRAVIS_PULL_REQUEST_BRANCH,\n        TRAVIS_BRANCH,\n        TRAVIS_COMMIT,\n        TRAVIS_REPO_SLUG,\n        TRAVIS_TAG,\n        TRAVIS_JOB_WEB_URL,\n        TRAVIS_BUILD_ID,\n        TRAVIS_BUILD_NUMBER,\n        TRAVIS_BUILD_WEB_URL,\n        TRAVIS_BUILD_DIR,\n        TRAVIS_COMMIT_MESSAGE\n      } = env\n\n      const isTag = !!TRAVIS_TAG\n      const ref = TRAVIS_TAG || TRAVIS_PULL_REQUEST_BRANCH || TRAVIS_BRANCH\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'travisci',\n        [CI_JOB_URL]: TRAVIS_JOB_WEB_URL,\n        [CI_PIPELINE_ID]: TRAVIS_BUILD_ID,\n        [CI_PIPELINE_NAME]: TRAVIS_REPO_SLUG,\n        [CI_PIPELINE_NUMBER]: TRAVIS_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: TRAVIS_BUILD_WEB_URL,\n        [GIT_COMMIT_SHA]: TRAVIS_COMMIT,\n        [GIT_REPOSITORY_URL]: `https://github.com/${TRAVIS_REPO_SLUG}.git`,\n        [CI_WORKSPACE_PATH]: TRAVIS_BUILD_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: TRAVIS_COMMIT_MESSAGE\n      }\n    }\n\n    normalizeTag(tags, CI_WORKSPACE_PATH, resolveTilde)\n    normalizeTag(tags, GIT_REPOSITORY_URL, filterSensitiveInfoFromRepository)\n    normalizeTag(tags, GIT_BRANCH, normalizeRef)\n    normalizeTag(tags, GIT_TAG, normalizeRef)\n\n    return removeEmptyValues(tags)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}