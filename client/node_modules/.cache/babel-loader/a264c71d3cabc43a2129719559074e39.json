{"ast":null,"code":"const {\n  promisify\n} = require('util');\n\nconst {\n  RESOURCE_NAME\n} = require('../../../ext/tags');\n\nconst {\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  ERROR_MESSAGE,\n  ERROR_TYPE,\n  TEST_PARAMETERS,\n  CI_APP_ORIGIN,\n  getTestEnvironmentMetadata,\n  getTestParametersString,\n  finishAllTraceSpans,\n  getTestSuitePath\n} = require('../../dd-trace/src/plugins/util/test');\n\nconst {\n  getFormattedJestTestParameters,\n  getTestSpanTags,\n  setSuppressedErrors\n} = require('./util');\n\nfunction getVmContext(environment) {\n  if (typeof environment.getVmContext === 'function') {\n    return environment.getVmContext();\n  }\n\n  return null;\n}\n\nfunction wrapEnvironment(BaseEnvironment) {\n  return class DatadogJestEnvironment extends BaseEnvironment {\n    constructor(config, context) {\n      super(config, context);\n      this.testSuite = getTestSuitePath(context.testPath, config.rootDir);\n      this.testSpansByTestName = {};\n      this.originalTestFnByTestName = {};\n    }\n\n  };\n}\n\nfunction createWrapTeardown(tracer, instrumenter) {\n  return function wrapTeardown(teardown) {\n    return async function teardownWithTrace() {\n      instrumenter.unwrap(this.global.test, 'each');\n      nameToParams = {}; // for jest-jasmine2\n\n      if (this.global.jasmine) {\n        instrumenter.unwrap(this.global.jasmine.Spec.prototype, 'onException');\n        instrumenter.unwrap(this.global, 'it');\n        instrumenter.unwrap(this.global, 'fit');\n        instrumenter.unwrap(this.global, 'xit');\n      }\n\n      instrumenter.unwrap(this.global.test, 'each');\n      await new Promise(resolve => {\n        tracer._exporter._writer.flush(resolve);\n      });\n      return teardown.apply(this, arguments);\n    };\n  };\n}\n\nlet nameToParams = {};\n\nconst isTimeout = event => {\n  return event.error && typeof event.error === 'string' && event.error.startsWith('Exceeded timeout');\n};\n\nfunction createHandleTestEvent(tracer, testEnvironmentMetadata, instrumenter) {\n  return async function handleTestEventWithTrace(event) {\n    if (event.name === 'test_retry') {\n      let testName = event.test && event.test.name;\n      const context = getVmContext(this);\n\n      if (context) {\n        const {\n          currentTestName\n        } = context.expect.getState();\n        testName = currentTestName;\n      } // If it's a retry, we restore the original test function so that it is not wrapped again\n\n\n      if (this.originalTestFnByTestName[testName]) {\n        event.test.fn = this.originalTestFnByTestName[testName];\n      }\n\n      return;\n    }\n\n    if (event.name === 'test_fn_failure') {\n      if (!isTimeout(event)) {\n        return;\n      }\n\n      const context = getVmContext(this);\n\n      if (context) {\n        const {\n          currentTestName\n        } = context.expect.getState();\n        const testSpan = this.testSpansByTestName[`${currentTestName}_${event.test.invocations}`];\n\n        if (testSpan) {\n          testSpan.setTag(ERROR_TYPE, 'Timeout');\n          testSpan.setTag(ERROR_MESSAGE, event.error);\n          testSpan.setTag(TEST_STATUS, 'fail');\n        }\n      }\n\n      return;\n    }\n\n    if (event.name === 'setup') {\n      instrumenter.wrap(this.global.test, 'each', function (original) {\n        return function () {\n          const testParameters = getFormattedJestTestParameters(arguments);\n          const eachBind = original.apply(this, arguments);\n          return function () {\n            const [testName] = arguments;\n            nameToParams[testName] = testParameters;\n            return eachBind.apply(this, arguments);\n          };\n        };\n      });\n      return;\n    }\n\n    if (event.name !== 'test_skip' && event.name !== 'test_todo' && event.name !== 'test_start' && event.name !== 'hook_failure') {\n      return;\n    } // for hook_failure events the test entry might not be defined, because the hook\n    // is not necessarily associated to a test:\n\n\n    if (!event.test) {\n      return;\n    }\n\n    const {\n      childOf,\n      commonSpanTags\n    } = getTestSpanTags(tracer, testEnvironmentMetadata);\n    let testName = event.test.name;\n    const context = getVmContext(this);\n\n    if (context) {\n      const {\n        currentTestName\n      } = context.expect.getState();\n      testName = currentTestName;\n    }\n\n    const spanTags = { ...commonSpanTags,\n      [TEST_NAME]: testName,\n      [TEST_SUITE]: this.testSuite\n    };\n    const testParametersString = getTestParametersString(nameToParams, event.test.name);\n\n    if (testParametersString) {\n      spanTags[TEST_PARAMETERS] = testParametersString;\n    }\n\n    const resource = `${this.testSuite}.${testName}`;\n\n    if (event.name === 'test_skip' || event.name === 'test_todo') {\n      const testSpan = tracer.startSpan('jest.test', {\n        childOf,\n        tags: { ...spanTags,\n          [RESOURCE_NAME]: resource,\n          [TEST_STATUS]: 'skip'\n        }\n      });\n      testSpan.context()._trace.origin = CI_APP_ORIGIN;\n      testSpan.finish();\n      return;\n    }\n\n    if (event.name === 'hook_failure') {\n      const testSpan = tracer.startSpan('jest.test', {\n        childOf,\n        tags: { ...spanTags,\n          [RESOURCE_NAME]: resource,\n          [TEST_STATUS]: 'fail'\n        }\n      });\n      testSpan.context()._trace.origin = CI_APP_ORIGIN;\n\n      if (event.test.errors && event.test.errors.length) {\n        const error = new Error(event.test.errors[0][0]);\n        error.stack = event.test.errors[0][1].stack;\n        testSpan.setTag('error', error);\n      }\n\n      testSpan.finish();\n      return;\n    } // event.name === test_start at this point\n\n\n    const environment = this;\n    environment.originalTestFnByTestName[testName] = event.test.fn;\n    let specFunction = event.test.fn;\n\n    if (specFunction.length) {\n      specFunction = promisify(specFunction);\n    }\n\n    event.test.fn = tracer.wrap('jest.test', {\n      type: 'test',\n      childOf,\n      resource,\n      tags: spanTags\n    }, async () => {\n      let result;\n      const testSpan = tracer.scope().active();\n      environment.testSpansByTestName[`${testName}_${event.test.invocations}`] = testSpan;\n      testSpan.context()._trace.origin = CI_APP_ORIGIN;\n\n      try {\n        result = await specFunction(); // it may have been set already if the test timed out\n\n        let suppressedErrors = [];\n        const context = getVmContext(environment);\n\n        if (context) {\n          suppressedErrors = context.expect.getState().suppressedErrors;\n        }\n\n        setSuppressedErrors(suppressedErrors, testSpan);\n\n        if (!testSpan._spanContext._tags[TEST_STATUS]) {\n          testSpan.setTag(TEST_STATUS, 'pass');\n        }\n      } catch (error) {\n        testSpan.setTag(TEST_STATUS, 'fail');\n        testSpan.setTag('error', error);\n        throw error;\n      } finally {\n        finishAllTraceSpans(testSpan);\n      }\n\n      return result;\n    });\n  };\n}\n\nmodule.exports = [{\n  name: 'jest-environment-node',\n  versions: ['>=24.8.0'],\n  patch: function (NodeEnvironment, tracer) {\n    const testEnvironmentMetadata = getTestEnvironmentMetadata('jest');\n    this.wrap(NodeEnvironment.prototype, 'teardown', createWrapTeardown(tracer, this));\n    const newHandleTestEvent = createHandleTestEvent(tracer, testEnvironmentMetadata, this);\n    newHandleTestEvent._dd_original = NodeEnvironment.prototype.handleTestEvent;\n    NodeEnvironment.prototype.handleTestEvent = newHandleTestEvent;\n    return wrapEnvironment(NodeEnvironment);\n  },\n  unpatch: function (NodeEnvironment) {\n    this.unwrap(NodeEnvironment.prototype, 'teardown');\n    NodeEnvironment.prototype.handleTestEvent = NodeEnvironment.prototype.handleTestEvent._dd_original;\n  }\n}, {\n  name: 'jest-environment-jsdom',\n  versions: ['>=24.8.0'],\n  patch: function (JsdomEnvironment, tracer) {\n    const testEnvironmentMetadata = getTestEnvironmentMetadata('jest');\n    this.wrap(JsdomEnvironment.prototype, 'teardown', createWrapTeardown(tracer, this));\n    const newHandleTestEvent = createHandleTestEvent(tracer, testEnvironmentMetadata, this);\n    newHandleTestEvent._dd_original = JsdomEnvironment.prototype.handleTestEvent;\n    JsdomEnvironment.prototype.handleTestEvent = newHandleTestEvent;\n    return wrapEnvironment(JsdomEnvironment);\n  },\n  unpatch: function (JsdomEnvironment) {\n    this.unwrap(JsdomEnvironment.prototype, 'teardown');\n    JsdomEnvironment.prototype.handleTestEvent = JsdomEnvironment.prototype.handleTestEvent._dd_original;\n  }\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-jest/src/jest-environment.js"],"names":["promisify","require","RESOURCE_NAME","TEST_NAME","TEST_SUITE","TEST_STATUS","ERROR_MESSAGE","ERROR_TYPE","TEST_PARAMETERS","CI_APP_ORIGIN","getTestEnvironmentMetadata","getTestParametersString","finishAllTraceSpans","getTestSuitePath","getFormattedJestTestParameters","getTestSpanTags","setSuppressedErrors","getVmContext","environment","wrapEnvironment","BaseEnvironment","DatadogJestEnvironment","constructor","config","context","testSuite","testPath","rootDir","testSpansByTestName","originalTestFnByTestName","createWrapTeardown","tracer","instrumenter","wrapTeardown","teardown","teardownWithTrace","unwrap","global","test","nameToParams","jasmine","Spec","prototype","Promise","resolve","_exporter","_writer","flush","apply","arguments","isTimeout","event","error","startsWith","createHandleTestEvent","testEnvironmentMetadata","handleTestEventWithTrace","name","testName","currentTestName","expect","getState","fn","testSpan","invocations","setTag","wrap","original","testParameters","eachBind","childOf","commonSpanTags","spanTags","testParametersString","resource","startSpan","tags","_trace","origin","finish","errors","length","Error","stack","specFunction","type","result","scope","active","suppressedErrors","_spanContext","_tags","module","exports","versions","patch","NodeEnvironment","newHandleTestEvent","_dd_original","handleTestEvent","unpatch","JsdomEnvironment"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,MAAD,CAA7B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAM;AACJE,EAAAA,SADI;AAEJC,EAAAA,UAFI;AAGJC,EAAAA,WAHI;AAIJC,EAAAA,aAJI;AAKJC,EAAAA,UALI;AAMJC,EAAAA,eANI;AAOJC,EAAAA,aAPI;AAQJC,EAAAA,0BARI;AASJC,EAAAA,uBATI;AAUJC,EAAAA,mBAVI;AAWJC,EAAAA;AAXI,IAYFZ,OAAO,CAAC,sCAAD,CAZX;;AAaA,MAAM;AACJa,EAAAA,8BADI;AAEJC,EAAAA,eAFI;AAGJC,EAAAA;AAHI,IAIFf,OAAO,CAAC,QAAD,CAJX;;AAMA,SAASgB,YAAT,CAAuBC,WAAvB,EAAoC;AAClC,MAAI,OAAOA,WAAW,CAACD,YAAnB,KAAoC,UAAxC,EAAoD;AAClD,WAAOC,WAAW,CAACD,YAAZ,EAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASE,eAAT,CAA0BC,eAA1B,EAA2C;AACzC,SAAO,MAAMC,sBAAN,SAAqCD,eAArC,CAAqD;AAC1DE,IAAAA,WAAW,CAAEC,MAAF,EAAUC,OAAV,EAAmB;AAC5B,YAAMD,MAAN,EAAcC,OAAd;AACA,WAAKC,SAAL,GAAiBZ,gBAAgB,CAACW,OAAO,CAACE,QAAT,EAAmBH,MAAM,CAACI,OAA1B,CAAjC;AACA,WAAKC,mBAAL,GAA2B,EAA3B;AACA,WAAKC,wBAAL,GAAgC,EAAhC;AACD;;AANyD,GAA5D;AAQD;;AAED,SAASC,kBAAT,CAA6BC,MAA7B,EAAqCC,YAArC,EAAmD;AACjD,SAAO,SAASC,YAAT,CAAuBC,QAAvB,EAAiC;AACtC,WAAO,eAAeC,iBAAf,GAAoC;AACzCH,MAAAA,YAAY,CAACI,MAAb,CAAoB,KAAKC,MAAL,CAAYC,IAAhC,EAAsC,MAAtC;AACAC,MAAAA,YAAY,GAAG,EAAf,CAFyC,CAGzC;;AACA,UAAI,KAAKF,MAAL,CAAYG,OAAhB,EAAyB;AACvBR,QAAAA,YAAY,CAACI,MAAb,CAAoB,KAAKC,MAAL,CAAYG,OAAZ,CAAoBC,IAApB,CAAyBC,SAA7C,EAAwD,aAAxD;AACAV,QAAAA,YAAY,CAACI,MAAb,CAAoB,KAAKC,MAAzB,EAAiC,IAAjC;AACAL,QAAAA,YAAY,CAACI,MAAb,CAAoB,KAAKC,MAAzB,EAAiC,KAAjC;AACAL,QAAAA,YAAY,CAACI,MAAb,CAAoB,KAAKC,MAAzB,EAAiC,KAAjC;AACD;;AAEDL,MAAAA,YAAY,CAACI,MAAb,CAAoB,KAAKC,MAAL,CAAYC,IAAhC,EAAsC,MAAtC;AACA,YAAM,IAAIK,OAAJ,CAAaC,OAAD,IAAa;AAC7Bb,QAAAA,MAAM,CAACc,SAAP,CAAiBC,OAAjB,CAAyBC,KAAzB,CAA+BH,OAA/B;AACD,OAFK,CAAN;AAGA,aAAOV,QAAQ,CAACc,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,KAhBD;AAiBD,GAlBD;AAmBD;;AAED,IAAIV,YAAY,GAAG,EAAnB;;AAEA,MAAMW,SAAS,GAAIC,KAAD,IAAW;AAC3B,SAAOA,KAAK,CAACC,KAAN,IACP,OAAOD,KAAK,CAACC,KAAb,KAAuB,QADhB,IAEPD,KAAK,CAACC,KAAN,CAAYC,UAAZ,CAAuB,kBAAvB,CAFA;AAGD,CAJD;;AAMA,SAASC,qBAAT,CAAgCvB,MAAhC,EAAwCwB,uBAAxC,EAAiEvB,YAAjE,EAA+E;AAC7E,SAAO,eAAewB,wBAAf,CAAyCL,KAAzC,EAAgD;AACrD,QAAIA,KAAK,CAACM,IAAN,KAAe,YAAnB,EAAiC;AAC/B,UAAIC,QAAQ,GAAGP,KAAK,CAACb,IAAN,IAAca,KAAK,CAACb,IAAN,CAAWmB,IAAxC;AACA,YAAMjC,OAAO,GAAGP,YAAY,CAAC,IAAD,CAA5B;;AACA,UAAIO,OAAJ,EAAa;AACX,cAAM;AAAEmC,UAAAA;AAAF,YAAsBnC,OAAO,CAACoC,MAAR,CAAeC,QAAf,EAA5B;AACAH,QAAAA,QAAQ,GAAGC,eAAX;AACD,OAN8B,CAO/B;;;AACA,UAAI,KAAK9B,wBAAL,CAA8B6B,QAA9B,CAAJ,EAA6C;AAC3CP,QAAAA,KAAK,CAACb,IAAN,CAAWwB,EAAX,GAAgB,KAAKjC,wBAAL,CAA8B6B,QAA9B,CAAhB;AACD;;AACD;AACD;;AACD,QAAIP,KAAK,CAACM,IAAN,KAAe,iBAAnB,EAAsC;AACpC,UAAI,CAACP,SAAS,CAACC,KAAD,CAAd,EAAuB;AACrB;AACD;;AACD,YAAM3B,OAAO,GAAGP,YAAY,CAAC,IAAD,CAA5B;;AACA,UAAIO,OAAJ,EAAa;AACX,cAAM;AAAEmC,UAAAA;AAAF,YAAsBnC,OAAO,CAACoC,MAAR,CAAeC,QAAf,EAA5B;AACA,cAAME,QAAQ,GAAG,KAAKnC,mBAAL,CAA0B,GAAE+B,eAAgB,IAAGR,KAAK,CAACb,IAAN,CAAW0B,WAAY,EAAtE,CAAjB;;AACA,YAAID,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACE,MAAT,CAAgB1D,UAAhB,EAA4B,SAA5B;AACAwD,UAAAA,QAAQ,CAACE,MAAT,CAAgB3D,aAAhB,EAA+B6C,KAAK,CAACC,KAArC;AACAW,UAAAA,QAAQ,CAACE,MAAT,CAAgB5D,WAAhB,EAA6B,MAA7B;AACD;AACF;;AACD;AACD;;AACD,QAAI8C,KAAK,CAACM,IAAN,KAAe,OAAnB,EAA4B;AAC1BzB,MAAAA,YAAY,CAACkC,IAAb,CAAkB,KAAK7B,MAAL,CAAYC,IAA9B,EAAoC,MAApC,EAA4C,UAAU6B,QAAV,EAAoB;AAC9D,eAAO,YAAY;AACjB,gBAAMC,cAAc,GAAGtD,8BAA8B,CAACmC,SAAD,CAArD;AACA,gBAAMoB,QAAQ,GAAGF,QAAQ,CAACnB,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAjB;AACA,iBAAO,YAAY;AACjB,kBAAM,CAACS,QAAD,IAAaT,SAAnB;AACAV,YAAAA,YAAY,CAACmB,QAAD,CAAZ,GAAyBU,cAAzB;AACA,mBAAOC,QAAQ,CAACrB,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,WAJD;AAKD,SARD;AASD,OAVD;AAWA;AACD;;AAED,QAAIE,KAAK,CAACM,IAAN,KAAe,WAAf,IACFN,KAAK,CAACM,IAAN,KAAe,WADb,IAEFN,KAAK,CAACM,IAAN,KAAe,YAFb,IAGFN,KAAK,CAACM,IAAN,KAAe,cAHjB,EAGiC;AAC/B;AACD,KAlDoD,CAmDrD;AACA;;;AACA,QAAI,CAACN,KAAK,CAACb,IAAX,EAAiB;AACf;AACD;;AAED,UAAM;AAAEgC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA8BxD,eAAe,CAACgB,MAAD,EAASwB,uBAAT,CAAnD;AAEA,QAAIG,QAAQ,GAAGP,KAAK,CAACb,IAAN,CAAWmB,IAA1B;AACA,UAAMjC,OAAO,GAAGP,YAAY,CAAC,IAAD,CAA5B;;AAEA,QAAIO,OAAJ,EAAa;AACX,YAAM;AAAEmC,QAAAA;AAAF,UAAsBnC,OAAO,CAACoC,MAAR,CAAeC,QAAf,EAA5B;AACAH,MAAAA,QAAQ,GAAGC,eAAX;AACD;;AACD,UAAMa,QAAQ,GAAG,EACf,GAAGD,cADY;AAEf,OAACpE,SAAD,GAAauD,QAFE;AAGf,OAACtD,UAAD,GAAc,KAAKqB;AAHJ,KAAjB;AAMA,UAAMgD,oBAAoB,GAAG9D,uBAAuB,CAAC4B,YAAD,EAAeY,KAAK,CAACb,IAAN,CAAWmB,IAA1B,CAApD;;AACA,QAAIgB,oBAAJ,EAA0B;AACxBD,MAAAA,QAAQ,CAAChE,eAAD,CAAR,GAA4BiE,oBAA5B;AACD;;AAED,UAAMC,QAAQ,GAAI,GAAE,KAAKjD,SAAU,IAAGiC,QAAS,EAA/C;;AACA,QAAIP,KAAK,CAACM,IAAN,KAAe,WAAf,IAA8BN,KAAK,CAACM,IAAN,KAAe,WAAjD,EAA8D;AAC5D,YAAMM,QAAQ,GAAGhC,MAAM,CAAC4C,SAAP,CACf,WADe,EAEf;AACEL,QAAAA,OADF;AAEEM,QAAAA,IAAI,EAAE,EACJ,GAAGJ,QADC;AAEJ,WAACtE,aAAD,GAAiBwE,QAFb;AAGJ,WAACrE,WAAD,GAAe;AAHX;AAFR,OAFe,CAAjB;AAWA0D,MAAAA,QAAQ,CAACvC,OAAT,GAAmBqD,MAAnB,CAA0BC,MAA1B,GAAmCrE,aAAnC;AACAsD,MAAAA,QAAQ,CAACgB,MAAT;AACA;AACD;;AACD,QAAI5B,KAAK,CAACM,IAAN,KAAe,cAAnB,EAAmC;AACjC,YAAMM,QAAQ,GAAGhC,MAAM,CAAC4C,SAAP,CACf,WADe,EAEf;AACEL,QAAAA,OADF;AAEEM,QAAAA,IAAI,EAAE,EACJ,GAAGJ,QADC;AAEJ,WAACtE,aAAD,GAAiBwE,QAFb;AAGJ,WAACrE,WAAD,GAAe;AAHX;AAFR,OAFe,CAAjB;AAWA0D,MAAAA,QAAQ,CAACvC,OAAT,GAAmBqD,MAAnB,CAA0BC,MAA1B,GAAmCrE,aAAnC;;AACA,UAAI0C,KAAK,CAACb,IAAN,CAAW0C,MAAX,IAAqB7B,KAAK,CAACb,IAAN,CAAW0C,MAAX,CAAkBC,MAA3C,EAAmD;AACjD,cAAM7B,KAAK,GAAG,IAAI8B,KAAJ,CAAU/B,KAAK,CAACb,IAAN,CAAW0C,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAV,CAAd;AACA5B,QAAAA,KAAK,CAAC+B,KAAN,GAAchC,KAAK,CAACb,IAAN,CAAW0C,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwBG,KAAtC;AACApB,QAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBb,KAAzB;AACD;;AACDW,MAAAA,QAAQ,CAACgB,MAAT;AACA;AACD,KAlHoD,CAmHrD;;;AACA,UAAM7D,WAAW,GAAG,IAApB;AACAA,IAAAA,WAAW,CAACW,wBAAZ,CAAqC6B,QAArC,IAAiDP,KAAK,CAACb,IAAN,CAAWwB,EAA5D;AAEA,QAAIsB,YAAY,GAAGjC,KAAK,CAACb,IAAN,CAAWwB,EAA9B;;AACA,QAAIsB,YAAY,CAACH,MAAjB,EAAyB;AACvBG,MAAAA,YAAY,GAAGpF,SAAS,CAACoF,YAAD,CAAxB;AACD;;AACDjC,IAAAA,KAAK,CAACb,IAAN,CAAWwB,EAAX,GAAgB/B,MAAM,CAACmC,IAAP,CACd,WADc,EAEd;AACEmB,MAAAA,IAAI,EAAE,MADR;AAEEf,MAAAA,OAFF;AAGEI,MAAAA,QAHF;AAIEE,MAAAA,IAAI,EAAEJ;AAJR,KAFc,EAQd,YAAY;AACV,UAAIc,MAAJ;AACA,YAAMvB,QAAQ,GAAGhC,MAAM,CAACwD,KAAP,GAAeC,MAAf,EAAjB;AACAtE,MAAAA,WAAW,CAACU,mBAAZ,CAAiC,GAAE8B,QAAS,IAAGP,KAAK,CAACb,IAAN,CAAW0B,WAAY,EAAtE,IAA2ED,QAA3E;AACAA,MAAAA,QAAQ,CAACvC,OAAT,GAAmBqD,MAAnB,CAA0BC,MAA1B,GAAmCrE,aAAnC;;AACA,UAAI;AACF6E,QAAAA,MAAM,GAAG,MAAMF,YAAY,EAA3B,CADE,CAEF;;AACA,YAAIK,gBAAgB,GAAG,EAAvB;AACA,cAAMjE,OAAO,GAAGP,YAAY,CAACC,WAAD,CAA5B;;AACA,YAAIM,OAAJ,EAAa;AACXiE,UAAAA,gBAAgB,GAAGjE,OAAO,CAACoC,MAAR,CAAeC,QAAf,GAA0B4B,gBAA7C;AACD;;AACDzE,QAAAA,mBAAmB,CAACyE,gBAAD,EAAmB1B,QAAnB,CAAnB;;AACA,YAAI,CAACA,QAAQ,CAAC2B,YAAT,CAAsBC,KAAtB,CAA4BtF,WAA5B,CAAL,EAA+C;AAC7C0D,UAAAA,QAAQ,CAACE,MAAT,CAAgB5D,WAAhB,EAA6B,MAA7B;AACD;AACF,OAZD,CAYE,OAAO+C,KAAP,EAAc;AACdW,QAAAA,QAAQ,CAACE,MAAT,CAAgB5D,WAAhB,EAA6B,MAA7B;AACA0D,QAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBb,KAAzB;AACA,cAAMA,KAAN;AACD,OAhBD,SAgBU;AACRxC,QAAAA,mBAAmB,CAACmD,QAAD,CAAnB;AACD;;AACD,aAAOuB,MAAP;AACD,KAjCa,CAAhB;AAmCD,GA9JD;AA+JD;;AAEDM,MAAM,CAACC,OAAP,GAAiB,CACf;AACEpC,EAAAA,IAAI,EAAE,uBADR;AAEEqC,EAAAA,QAAQ,EAAE,CAAC,UAAD,CAFZ;AAGEC,EAAAA,KAAK,EAAE,UAAUC,eAAV,EAA2BjE,MAA3B,EAAmC;AACxC,UAAMwB,uBAAuB,GAAG7C,0BAA0B,CAAC,MAAD,CAA1D;AAEA,SAAKwD,IAAL,CAAU8B,eAAe,CAACtD,SAA1B,EAAqC,UAArC,EAAiDZ,kBAAkB,CAACC,MAAD,EAAS,IAAT,CAAnE;AAEA,UAAMkE,kBAAkB,GAAG3C,qBAAqB,CAACvB,MAAD,EAASwB,uBAAT,EAAkC,IAAlC,CAAhD;AACA0C,IAAAA,kBAAkB,CAACC,YAAnB,GAAkCF,eAAe,CAACtD,SAAhB,CAA0ByD,eAA5D;AACAH,IAAAA,eAAe,CAACtD,SAAhB,CAA0ByD,eAA1B,GAA4CF,kBAA5C;AAEA,WAAO9E,eAAe,CAAC6E,eAAD,CAAtB;AACD,GAbH;AAcEI,EAAAA,OAAO,EAAE,UAAUJ,eAAV,EAA2B;AAClC,SAAK5D,MAAL,CAAY4D,eAAe,CAACtD,SAA5B,EAAuC,UAAvC;AACAsD,IAAAA,eAAe,CAACtD,SAAhB,CAA0ByD,eAA1B,GAA4CH,eAAe,CAACtD,SAAhB,CAA0ByD,eAA1B,CAA0CD,YAAtF;AACD;AAjBH,CADe,EAoBf;AACEzC,EAAAA,IAAI,EAAE,wBADR;AAEEqC,EAAAA,QAAQ,EAAE,CAAC,UAAD,CAFZ;AAGEC,EAAAA,KAAK,EAAE,UAAUM,gBAAV,EAA4BtE,MAA5B,EAAoC;AACzC,UAAMwB,uBAAuB,GAAG7C,0BAA0B,CAAC,MAAD,CAA1D;AAEA,SAAKwD,IAAL,CAAUmC,gBAAgB,CAAC3D,SAA3B,EAAsC,UAAtC,EAAkDZ,kBAAkB,CAACC,MAAD,EAAS,IAAT,CAApE;AAEA,UAAMkE,kBAAkB,GAAG3C,qBAAqB,CAACvB,MAAD,EAASwB,uBAAT,EAAkC,IAAlC,CAAhD;AACA0C,IAAAA,kBAAkB,CAACC,YAAnB,GAAkCG,gBAAgB,CAAC3D,SAAjB,CAA2ByD,eAA7D;AACAE,IAAAA,gBAAgB,CAAC3D,SAAjB,CAA2ByD,eAA3B,GAA6CF,kBAA7C;AAEA,WAAO9E,eAAe,CAACkF,gBAAD,CAAtB;AACD,GAbH;AAcED,EAAAA,OAAO,EAAE,UAAUC,gBAAV,EAA4B;AACnC,SAAKjE,MAAL,CAAYiE,gBAAgB,CAAC3D,SAA7B,EAAwC,UAAxC;AACA2D,IAAAA,gBAAgB,CAAC3D,SAAjB,CAA2ByD,eAA3B,GAA6CE,gBAAgB,CAAC3D,SAAjB,CAA2ByD,eAA3B,CAA2CD,YAAxF;AACD;AAjBH,CApBe,CAAjB","sourcesContent":["const { promisify } = require('util')\n\nconst { RESOURCE_NAME } = require('../../../ext/tags')\nconst {\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  ERROR_MESSAGE,\n  ERROR_TYPE,\n  TEST_PARAMETERS,\n  CI_APP_ORIGIN,\n  getTestEnvironmentMetadata,\n  getTestParametersString,\n  finishAllTraceSpans,\n  getTestSuitePath\n} = require('../../dd-trace/src/plugins/util/test')\nconst {\n  getFormattedJestTestParameters,\n  getTestSpanTags,\n  setSuppressedErrors\n} = require('./util')\n\nfunction getVmContext (environment) {\n  if (typeof environment.getVmContext === 'function') {\n    return environment.getVmContext()\n  }\n  return null\n}\n\nfunction wrapEnvironment (BaseEnvironment) {\n  return class DatadogJestEnvironment extends BaseEnvironment {\n    constructor (config, context) {\n      super(config, context)\n      this.testSuite = getTestSuitePath(context.testPath, config.rootDir)\n      this.testSpansByTestName = {}\n      this.originalTestFnByTestName = {}\n    }\n  }\n}\n\nfunction createWrapTeardown (tracer, instrumenter) {\n  return function wrapTeardown (teardown) {\n    return async function teardownWithTrace () {\n      instrumenter.unwrap(this.global.test, 'each')\n      nameToParams = {}\n      // for jest-jasmine2\n      if (this.global.jasmine) {\n        instrumenter.unwrap(this.global.jasmine.Spec.prototype, 'onException')\n        instrumenter.unwrap(this.global, 'it')\n        instrumenter.unwrap(this.global, 'fit')\n        instrumenter.unwrap(this.global, 'xit')\n      }\n\n      instrumenter.unwrap(this.global.test, 'each')\n      await new Promise((resolve) => {\n        tracer._exporter._writer.flush(resolve)\n      })\n      return teardown.apply(this, arguments)\n    }\n  }\n}\n\nlet nameToParams = {}\n\nconst isTimeout = (event) => {\n  return event.error &&\n  typeof event.error === 'string' &&\n  event.error.startsWith('Exceeded timeout')\n}\n\nfunction createHandleTestEvent (tracer, testEnvironmentMetadata, instrumenter) {\n  return async function handleTestEventWithTrace (event) {\n    if (event.name === 'test_retry') {\n      let testName = event.test && event.test.name\n      const context = getVmContext(this)\n      if (context) {\n        const { currentTestName } = context.expect.getState()\n        testName = currentTestName\n      }\n      // If it's a retry, we restore the original test function so that it is not wrapped again\n      if (this.originalTestFnByTestName[testName]) {\n        event.test.fn = this.originalTestFnByTestName[testName]\n      }\n      return\n    }\n    if (event.name === 'test_fn_failure') {\n      if (!isTimeout(event)) {\n        return\n      }\n      const context = getVmContext(this)\n      if (context) {\n        const { currentTestName } = context.expect.getState()\n        const testSpan = this.testSpansByTestName[`${currentTestName}_${event.test.invocations}`]\n        if (testSpan) {\n          testSpan.setTag(ERROR_TYPE, 'Timeout')\n          testSpan.setTag(ERROR_MESSAGE, event.error)\n          testSpan.setTag(TEST_STATUS, 'fail')\n        }\n      }\n      return\n    }\n    if (event.name === 'setup') {\n      instrumenter.wrap(this.global.test, 'each', function (original) {\n        return function () {\n          const testParameters = getFormattedJestTestParameters(arguments)\n          const eachBind = original.apply(this, arguments)\n          return function () {\n            const [testName] = arguments\n            nameToParams[testName] = testParameters\n            return eachBind.apply(this, arguments)\n          }\n        }\n      })\n      return\n    }\n\n    if (event.name !== 'test_skip' &&\n      event.name !== 'test_todo' &&\n      event.name !== 'test_start' &&\n      event.name !== 'hook_failure') {\n      return\n    }\n    // for hook_failure events the test entry might not be defined, because the hook\n    // is not necessarily associated to a test:\n    if (!event.test) {\n      return\n    }\n\n    const { childOf, commonSpanTags } = getTestSpanTags(tracer, testEnvironmentMetadata)\n\n    let testName = event.test.name\n    const context = getVmContext(this)\n\n    if (context) {\n      const { currentTestName } = context.expect.getState()\n      testName = currentTestName\n    }\n    const spanTags = {\n      ...commonSpanTags,\n      [TEST_NAME]: testName,\n      [TEST_SUITE]: this.testSuite\n    }\n\n    const testParametersString = getTestParametersString(nameToParams, event.test.name)\n    if (testParametersString) {\n      spanTags[TEST_PARAMETERS] = testParametersString\n    }\n\n    const resource = `${this.testSuite}.${testName}`\n    if (event.name === 'test_skip' || event.name === 'test_todo') {\n      const testSpan = tracer.startSpan(\n        'jest.test',\n        {\n          childOf,\n          tags: {\n            ...spanTags,\n            [RESOURCE_NAME]: resource,\n            [TEST_STATUS]: 'skip'\n          }\n        }\n      )\n      testSpan.context()._trace.origin = CI_APP_ORIGIN\n      testSpan.finish()\n      return\n    }\n    if (event.name === 'hook_failure') {\n      const testSpan = tracer.startSpan(\n        'jest.test',\n        {\n          childOf,\n          tags: {\n            ...spanTags,\n            [RESOURCE_NAME]: resource,\n            [TEST_STATUS]: 'fail'\n          }\n        }\n      )\n      testSpan.context()._trace.origin = CI_APP_ORIGIN\n      if (event.test.errors && event.test.errors.length) {\n        const error = new Error(event.test.errors[0][0])\n        error.stack = event.test.errors[0][1].stack\n        testSpan.setTag('error', error)\n      }\n      testSpan.finish()\n      return\n    }\n    // event.name === test_start at this point\n    const environment = this\n    environment.originalTestFnByTestName[testName] = event.test.fn\n\n    let specFunction = event.test.fn\n    if (specFunction.length) {\n      specFunction = promisify(specFunction)\n    }\n    event.test.fn = tracer.wrap(\n      'jest.test',\n      {\n        type: 'test',\n        childOf,\n        resource,\n        tags: spanTags\n      },\n      async () => {\n        let result\n        const testSpan = tracer.scope().active()\n        environment.testSpansByTestName[`${testName}_${event.test.invocations}`] = testSpan\n        testSpan.context()._trace.origin = CI_APP_ORIGIN\n        try {\n          result = await specFunction()\n          // it may have been set already if the test timed out\n          let suppressedErrors = []\n          const context = getVmContext(environment)\n          if (context) {\n            suppressedErrors = context.expect.getState().suppressedErrors\n          }\n          setSuppressedErrors(suppressedErrors, testSpan)\n          if (!testSpan._spanContext._tags[TEST_STATUS]) {\n            testSpan.setTag(TEST_STATUS, 'pass')\n          }\n        } catch (error) {\n          testSpan.setTag(TEST_STATUS, 'fail')\n          testSpan.setTag('error', error)\n          throw error\n        } finally {\n          finishAllTraceSpans(testSpan)\n        }\n        return result\n      }\n    )\n  }\n}\n\nmodule.exports = [\n  {\n    name: 'jest-environment-node',\n    versions: ['>=24.8.0'],\n    patch: function (NodeEnvironment, tracer) {\n      const testEnvironmentMetadata = getTestEnvironmentMetadata('jest')\n\n      this.wrap(NodeEnvironment.prototype, 'teardown', createWrapTeardown(tracer, this))\n\n      const newHandleTestEvent = createHandleTestEvent(tracer, testEnvironmentMetadata, this)\n      newHandleTestEvent._dd_original = NodeEnvironment.prototype.handleTestEvent\n      NodeEnvironment.prototype.handleTestEvent = newHandleTestEvent\n\n      return wrapEnvironment(NodeEnvironment)\n    },\n    unpatch: function (NodeEnvironment) {\n      this.unwrap(NodeEnvironment.prototype, 'teardown')\n      NodeEnvironment.prototype.handleTestEvent = NodeEnvironment.prototype.handleTestEvent._dd_original\n    }\n  },\n  {\n    name: 'jest-environment-jsdom',\n    versions: ['>=24.8.0'],\n    patch: function (JsdomEnvironment, tracer) {\n      const testEnvironmentMetadata = getTestEnvironmentMetadata('jest')\n\n      this.wrap(JsdomEnvironment.prototype, 'teardown', createWrapTeardown(tracer, this))\n\n      const newHandleTestEvent = createHandleTestEvent(tracer, testEnvironmentMetadata, this)\n      newHandleTestEvent._dd_original = JsdomEnvironment.prototype.handleTestEvent\n      JsdomEnvironment.prototype.handleTestEvent = newHandleTestEvent\n\n      return wrapEnvironment(JsdomEnvironment)\n    },\n    unpatch: function (JsdomEnvironment) {\n      this.unwrap(JsdomEnvironment.prototype, 'teardown')\n      JsdomEnvironment.prototype.handleTestEvent = JsdomEnvironment.prototype.handleTestEvent._dd_original\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}