{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst uuidSource = '[0-9a-f]{8}[-_][0-9a-f]{4}[-_][0-9a-f]{4}[-_][0-9a-f]{4}[-_][0-9a-f]{12}';\nconst containerSource = '[0-9a-f]{64}';\nconst taskSource = '[0-9a-f]{32}-\\\\d+';\nconst entityReg = new RegExp(`.*(${uuidSource}|${containerSource}|${taskSource})(?:\\\\.scope)?$`, 'm');\nconst entityId = getEntityId();\n\nfunction getEntityId() {\n  const cgroup = readControlGroup() || '';\n  const match = cgroup.trim().match(entityReg) || [];\n  return match[1];\n}\n\nfunction readControlGroup() {\n  try {\n    return fs.readFileSync('/proc/self/cgroup').toString();\n  } catch (err) {// ignore\n  }\n}\n\nmodule.exports = {\n  // can be the container ID but not always depending on the orchestrator\n  id() {\n    return entityId;\n  }\n\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/exporters/agent/docker.js"],"names":["fs","require","uuidSource","containerSource","taskSource","entityReg","RegExp","entityId","getEntityId","cgroup","readControlGroup","match","trim","readFileSync","toString","err","module","exports","id"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,UAAU,GAAG,0EAAnB;AACA,MAAMC,eAAe,GAAG,cAAxB;AACA,MAAMC,UAAU,GAAG,mBAAnB;AACA,MAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAY,MAAKJ,UAAW,IAAGC,eAAgB,IAAGC,UAAW,iBAA7D,EAA+E,GAA/E,CAAlB;AAEA,MAAMG,QAAQ,GAAGC,WAAW,EAA5B;;AAEA,SAASA,WAAT,GAAwB;AACtB,QAAMC,MAAM,GAAGC,gBAAgB,MAAM,EAArC;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,IAAP,GAAcD,KAAd,CAAoBN,SAApB,KAAkC,EAAhD;AAEA,SAAOM,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED,SAASD,gBAAT,GAA6B;AAC3B,MAAI;AACF,WAAOV,EAAE,CAACa,YAAH,CAAgB,mBAAhB,EAAqCC,QAArC,EAAP;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY,CACZ;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf;AACAC,EAAAA,EAAE,GAAI;AACJ,WAAOX,QAAP;AACD;;AAJc,CAAjB","sourcesContent":["'use strict'\n\nconst fs = require('fs')\n\nconst uuidSource = '[0-9a-f]{8}[-_][0-9a-f]{4}[-_][0-9a-f]{4}[-_][0-9a-f]{4}[-_][0-9a-f]{12}'\nconst containerSource = '[0-9a-f]{64}'\nconst taskSource = '[0-9a-f]{32}-\\\\d+'\nconst entityReg = new RegExp(`.*(${uuidSource}|${containerSource}|${taskSource})(?:\\\\.scope)?$`, 'm')\n\nconst entityId = getEntityId()\n\nfunction getEntityId () {\n  const cgroup = readControlGroup() || ''\n  const match = cgroup.trim().match(entityReg) || []\n\n  return match[1]\n}\n\nfunction readControlGroup () {\n  try {\n    return fs.readFileSync('/proc/self/cgroup').toString()\n  } catch (err) {\n    // ignore\n  }\n}\n\nmodule.exports = {\n  // can be the container ID but not always depending on the orchestrator\n  id () {\n    return entityId\n  }\n}\n"]},"metadata":{},"sourceType":"script"}