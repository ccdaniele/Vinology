{"ast":null,"code":"'use strict';\n\nconst opentracing = require('opentracing');\n\nconst os = require('os');\n\nconst Tracer = opentracing.Tracer;\nconst Reference = opentracing.Reference;\n\nconst Span = require('./span');\n\nconst SpanContext = require('./span_context');\n\nconst SpanProcessor = require('../span_processor');\n\nconst Sampler = require('../sampler');\n\nconst PrioritySampler = require('../priority_sampler');\n\nconst TextMapPropagator = require('./propagation/text_map');\n\nconst HttpPropagator = require('./propagation/http');\n\nconst BinaryPropagator = require('./propagation/binary');\n\nconst LogPropagator = require('./propagation/log');\n\nconst NoopSpan = require('../noop/span');\n\nconst formats = require('../../../../ext/formats');\n\nconst log = require('../log');\n\nconst constants = require('../constants');\n\nconst metrics = require('../metrics');\n\nconst getExporter = require('../exporter');\n\nconst REFERENCE_NOOP = constants.REFERENCE_NOOP;\nconst REFERENCE_CHILD_OF = opentracing.REFERENCE_CHILD_OF;\nconst REFERENCE_FOLLOWS_FROM = opentracing.REFERENCE_FOLLOWS_FROM;\n\nclass DatadogTracer extends Tracer {\n  constructor(config) {\n    super();\n    const Exporter = getExporter(config.experimental.exporter);\n    this._service = config.service;\n    this._version = config.version;\n    this._env = config.env;\n    this._tags = config.tags;\n    this._logInjection = config.logInjection;\n    this._debug = config.debug;\n    this._internalErrors = config.experimental.internalErrors;\n    this._prioritySampler = new PrioritySampler(config.env, config.experimental.sampler);\n    this._exporter = new Exporter(config, this._prioritySampler);\n    this._processor = new SpanProcessor(this._exporter, this._prioritySampler);\n    this._url = this._exporter._url;\n    this._sampler = new Sampler(config.sampleRate);\n    this._enableGetRumData = config.experimental.enableGetRumData;\n    this._propagators = {\n      [formats.TEXT_MAP]: new TextMapPropagator(config),\n      [formats.HTTP_HEADERS]: new HttpPropagator(config),\n      [formats.BINARY]: new BinaryPropagator(config),\n      [formats.LOG]: new LogPropagator(config)\n    };\n\n    if (config.reportHostname) {\n      this._hostname = os.hostname();\n    }\n  }\n\n  _startSpan(name, fields) {\n    const reference = getParent(fields.references);\n    const type = reference && reference.type();\n    const parent = reference && reference.referencedContext();\n    return this._startSpanInternal(name, fields, parent, type);\n  }\n\n  _startSpanInternal(name, fields = {}, parent, type) {\n    if (parent && parent._noop) return parent._noop;\n    if (!isSampled(this._sampler, parent, type)) return new NoopSpan(this, parent);\n    const tags = {\n      'service.name': this._service\n    };\n    const span = new Span(this, this._processor, this._sampler, this._prioritySampler, {\n      operationName: fields.operationName || name,\n      parent,\n      tags,\n      startTime: fields.startTime,\n      hostname: this._hostname\n    }, this._debug);\n    span.addTags(this._tags);\n    span.addTags(fields.tags);\n    return span;\n  }\n\n  _inject(spanContext, format, carrier) {\n    try {\n      this._prioritySampler.sample(spanContext);\n\n      this._propagators[format].inject(spanContext, carrier);\n    } catch (e) {\n      log.error(e);\n      metrics.increment('datadog.tracer.node.inject.errors', true);\n    }\n\n    return this;\n  }\n\n  _extract(format, carrier) {\n    try {\n      return this._propagators[format].extract(carrier);\n    } catch (e) {\n      log.error(e);\n      metrics.increment('datadog.tracer.node.extract.errors', true);\n      return null;\n    }\n  }\n\n}\n\nfunction getParent(references = []) {\n  let parent = null;\n\n  for (let i = 0; i < references.length; i++) {\n    const ref = references[i];\n\n    if (!(ref instanceof Reference)) {\n      log.error(() => `Expected ${ref} to be an instance of opentracing.Reference`);\n      continue;\n    }\n\n    const spanContext = ref.referencedContext();\n    const type = ref.type();\n\n    if (type !== REFERENCE_NOOP && spanContext && !(spanContext instanceof SpanContext)) {\n      log.error(() => `Expected ${spanContext} to be an instance of SpanContext`);\n      continue;\n    }\n\n    if (type === REFERENCE_CHILD_OF || type === REFERENCE_NOOP) {\n      parent = ref;\n      break;\n    } else if (type === REFERENCE_FOLLOWS_FROM) {\n      if (!parent) {\n        parent = ref;\n      }\n    }\n  }\n\n  return parent;\n}\n\nfunction isSampled(sampler, parent, type) {\n  if (type === REFERENCE_NOOP) return false;\n  if (parent && !parent._traceFlags.sampled) return false;\n  if (!parent && !sampler.isSampled()) return false;\n  return true;\n}\n\nmodule.exports = DatadogTracer;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/opentracing/tracer.js"],"names":["opentracing","require","os","Tracer","Reference","Span","SpanContext","SpanProcessor","Sampler","PrioritySampler","TextMapPropagator","HttpPropagator","BinaryPropagator","LogPropagator","NoopSpan","formats","log","constants","metrics","getExporter","REFERENCE_NOOP","REFERENCE_CHILD_OF","REFERENCE_FOLLOWS_FROM","DatadogTracer","constructor","config","Exporter","experimental","exporter","_service","service","_version","version","_env","env","_tags","tags","_logInjection","logInjection","_debug","debug","_internalErrors","internalErrors","_prioritySampler","sampler","_exporter","_processor","_url","_sampler","sampleRate","_enableGetRumData","enableGetRumData","_propagators","TEXT_MAP","HTTP_HEADERS","BINARY","LOG","reportHostname","_hostname","hostname","_startSpan","name","fields","reference","getParent","references","type","parent","referencedContext","_startSpanInternal","_noop","isSampled","span","operationName","startTime","addTags","_inject","spanContext","format","carrier","sample","inject","e","error","increment","_extract","extract","i","length","ref","_traceFlags","sampled","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst opentracing = require('opentracing')\nconst os = require('os')\nconst Tracer = opentracing.Tracer\nconst Reference = opentracing.Reference\nconst Span = require('./span')\nconst SpanContext = require('./span_context')\nconst SpanProcessor = require('../span_processor')\nconst Sampler = require('../sampler')\nconst PrioritySampler = require('../priority_sampler')\nconst TextMapPropagator = require('./propagation/text_map')\nconst HttpPropagator = require('./propagation/http')\nconst BinaryPropagator = require('./propagation/binary')\nconst LogPropagator = require('./propagation/log')\nconst NoopSpan = require('../noop/span')\nconst formats = require('../../../../ext/formats')\n\nconst log = require('../log')\nconst constants = require('../constants')\nconst metrics = require('../metrics')\nconst getExporter = require('../exporter')\n\nconst REFERENCE_NOOP = constants.REFERENCE_NOOP\nconst REFERENCE_CHILD_OF = opentracing.REFERENCE_CHILD_OF\nconst REFERENCE_FOLLOWS_FROM = opentracing.REFERENCE_FOLLOWS_FROM\n\nclass DatadogTracer extends Tracer {\n  constructor (config) {\n    super()\n\n    const Exporter = getExporter(config.experimental.exporter)\n\n    this._service = config.service\n    this._version = config.version\n    this._env = config.env\n    this._tags = config.tags\n    this._logInjection = config.logInjection\n    this._debug = config.debug\n    this._internalErrors = config.experimental.internalErrors\n    this._prioritySampler = new PrioritySampler(config.env, config.experimental.sampler)\n    this._exporter = new Exporter(config, this._prioritySampler)\n    this._processor = new SpanProcessor(this._exporter, this._prioritySampler)\n    this._url = this._exporter._url\n    this._sampler = new Sampler(config.sampleRate)\n    this._enableGetRumData = config.experimental.enableGetRumData\n    this._propagators = {\n      [formats.TEXT_MAP]: new TextMapPropagator(config),\n      [formats.HTTP_HEADERS]: new HttpPropagator(config),\n      [formats.BINARY]: new BinaryPropagator(config),\n      [formats.LOG]: new LogPropagator(config)\n    }\n    if (config.reportHostname) {\n      this._hostname = os.hostname()\n    }\n  }\n\n  _startSpan (name, fields) {\n    const reference = getParent(fields.references)\n    const type = reference && reference.type()\n    const parent = reference && reference.referencedContext()\n    return this._startSpanInternal(name, fields, parent, type)\n  }\n\n  _startSpanInternal (name, fields = {}, parent, type) {\n    if (parent && parent._noop) return parent._noop\n    if (!isSampled(this._sampler, parent, type)) return new NoopSpan(this, parent)\n\n    const tags = {\n      'service.name': this._service\n    }\n\n    const span = new Span(this, this._processor, this._sampler, this._prioritySampler, {\n      operationName: fields.operationName || name,\n      parent,\n      tags,\n      startTime: fields.startTime,\n      hostname: this._hostname\n    }, this._debug)\n\n    span.addTags(this._tags)\n    span.addTags(fields.tags)\n\n    return span\n  }\n\n  _inject (spanContext, format, carrier) {\n    try {\n      this._prioritySampler.sample(spanContext)\n      this._propagators[format].inject(spanContext, carrier)\n    } catch (e) {\n      log.error(e)\n      metrics.increment('datadog.tracer.node.inject.errors', true)\n    }\n\n    return this\n  }\n\n  _extract (format, carrier) {\n    try {\n      return this._propagators[format].extract(carrier)\n    } catch (e) {\n      log.error(e)\n      metrics.increment('datadog.tracer.node.extract.errors', true)\n      return null\n    }\n  }\n}\n\nfunction getParent (references = []) {\n  let parent = null\n\n  for (let i = 0; i < references.length; i++) {\n    const ref = references[i]\n\n    if (!(ref instanceof Reference)) {\n      log.error(() => `Expected ${ref} to be an instance of opentracing.Reference`)\n      continue\n    }\n\n    const spanContext = ref.referencedContext()\n    const type = ref.type()\n\n    if (type !== REFERENCE_NOOP && spanContext && !(spanContext instanceof SpanContext)) {\n      log.error(() => `Expected ${spanContext} to be an instance of SpanContext`)\n      continue\n    }\n\n    if (type === REFERENCE_CHILD_OF || type === REFERENCE_NOOP) {\n      parent = ref\n      break\n    } else if (type === REFERENCE_FOLLOWS_FROM) {\n      if (!parent) {\n        parent = ref\n      }\n    }\n  }\n\n  return parent\n}\n\nfunction isSampled (sampler, parent, type) {\n  if (type === REFERENCE_NOOP) return false\n  if (parent && !parent._traceFlags.sampled) return false\n  if (!parent && !sampler.isSampled()) return false\n\n  return true\n}\n\nmodule.exports = DatadogTracer\n"]},"metadata":{},"sourceType":"script"}