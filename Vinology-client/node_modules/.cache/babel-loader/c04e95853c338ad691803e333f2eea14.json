{"ast":null,"code":"'use strict';\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nfunction createWrapExecute(tracer, config) {\n  return function wrapExecute(execute) {\n    return function executeWithTrace(dbQuery, ...args) {\n      const connAttrs = this._dd_connAttrs;\n      const service = getServiceName(tracer, config, connAttrs);\n      const connectStringObj = new URL('http://' + connAttrs.connectString);\n      const tags = {\n        'span.kind': 'client',\n        'span.type': 'sql',\n        'sql.query': dbQuery,\n        'db.instance': connectStringObj.pathname.substring(1),\n        'db.hostname': connectStringObj.hostname,\n        'db.user': config.user,\n        'db.port': connectStringObj.port,\n        'resource.name': dbQuery,\n        'service.name': service\n      };\n      return tracer.wrap('oracle.query', {\n        tags\n      }, function (...args) {\n        const span = tracer.scope().active();\n        analyticsSampler.sample(span, config.measured);\n        return execute.apply(this, args);\n      }).apply(this, arguments);\n    };\n  };\n}\n\nfunction createWrapGetConnection(tracer, config) {\n  return function wrapGetConnection(getConnection) {\n    return function getConnectionWithTrace(connAttrs, callback) {\n      if (callback) {\n        arguments[1] = (err, connection) => {\n          if (connection) {\n            connection._dd_connAttrs = connAttrs;\n          }\n\n          callback(err, connection);\n        };\n\n        getConnection.apply(this, arguments);\n      } else {\n        return getConnection.apply(this, arguments).then(connection => {\n          connection._dd_connAttrs = connAttrs;\n          return connection;\n        });\n      }\n    };\n  };\n}\n\nfunction createWrapCreatePool(tracer, config) {\n  return function wrapCreatePool(createPool) {\n    return function createPoolWithTrace(poolAttrs, callback) {\n      if (callback) {\n        arguments[1] = (err, pool) => {\n          if (pool) {\n            pool._dd_poolAttrs = poolAttrs;\n          }\n\n          callback(err, pool);\n        };\n\n        createPool.apply(this, arguments);\n      } else {\n        return createPool.apply(this, arguments).then(pool => {\n          pool._dd_poolAttrs = poolAttrs;\n          return pool;\n        });\n      }\n    };\n  };\n}\n\nfunction createWrapPoolGetConnection(tracer, config) {\n  return function wrapPoolGetConnection(getConnection) {\n    return function poolGetConnectionWithTrace() {\n      let callback;\n\n      if (typeof arguments[arguments.length - 1] === 'function') {\n        callback = arguments[arguments.length - 1];\n      }\n\n      if (callback) {\n        arguments[arguments.length - 1] = (err, connection) => {\n          if (connection) {\n            connection._dd_connAttrs = this._dd_poolAttrs;\n          }\n\n          callback(err, connection);\n        };\n\n        getConnection.apply(this, arguments);\n      } else {\n        return getConnection.apply(this, arguments).then(connection => {\n          connection._dd_connAttrs = this._dd_poolAttrs;\n          return connection;\n        });\n      }\n    };\n  };\n}\n\nfunction getServiceName(tracer, config, connAttrs) {\n  if (typeof config.service === 'function') {\n    return config.service(connAttrs);\n  } else if (config.service) {\n    return config.service;\n  } else {\n    return `${tracer._service}-oracle`;\n  }\n}\n\nmodule.exports = {\n  name: 'oracledb',\n  versions: ['5'],\n\n  patch(oracledb, tracer, config) {\n    this.wrap(oracledb.Connection.prototype, 'execute', createWrapExecute(tracer, config));\n    this.wrap(oracledb, 'getConnection', createWrapGetConnection(tracer, config));\n    this.wrap(oracledb, 'createPool', createWrapCreatePool(tracer, config));\n    this.wrap(oracledb.Pool.prototype, 'getConnection', createWrapPoolGetConnection(tracer, config));\n  },\n\n  unpatch(oracledb) {\n    this.unwrap(oracledb.Connection.prototype, 'execute');\n    this.unwrap(oracledb, 'getConnection');\n    this.unwrap(oracledb, 'createPool');\n    this.unwrap(oracledb.Pool.prototype, 'getConnection');\n  }\n\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-oracledb/src/index.js"],"names":["analyticsSampler","require","createWrapExecute","tracer","config","wrapExecute","execute","executeWithTrace","dbQuery","args","connAttrs","_dd_connAttrs","service","getServiceName","connectStringObj","URL","connectString","tags","pathname","substring","hostname","user","port","wrap","span","scope","active","sample","measured","apply","arguments","createWrapGetConnection","wrapGetConnection","getConnection","getConnectionWithTrace","callback","err","connection","then","createWrapCreatePool","wrapCreatePool","createPool","createPoolWithTrace","poolAttrs","pool","_dd_poolAttrs","createWrapPoolGetConnection","wrapPoolGetConnection","poolGetConnectionWithTrace","length","_service","module","exports","name","versions","patch","oracledb","Connection","prototype","Pool","unpatch","unwrap"],"mappings":"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","sourcesContent":["'use strict'\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\n\nfunction createWrapExecute (tracer, config) {\n  return function wrapExecute (execute) {\n    return function executeWithTrace (dbQuery, ...args) {\n      const connAttrs = this._dd_connAttrs\n      const service = getServiceName(tracer, config, connAttrs)\n      const connectStringObj = new URL('http://' + connAttrs.connectString)\n      const tags = {\n        'span.kind': 'client',\n        'span.type': 'sql',\n        'sql.query': dbQuery,\n        'db.instance': connectStringObj.pathname.substring(1),\n        'db.hostname': connectStringObj.hostname,\n        'db.user': config.user,\n        'db.port': connectStringObj.port,\n        'resource.name': dbQuery,\n        'service.name': service\n      }\n\n      return tracer.wrap('oracle.query', { tags }, function (...args) {\n        const span = tracer.scope().active()\n\n        analyticsSampler.sample(span, config.measured)\n\n        return execute.apply(this, args)\n      }).apply(this, arguments)\n    }\n  }\n}\n\nfunction createWrapGetConnection (tracer, config) {\n  return function wrapGetConnection (getConnection) {\n    return function getConnectionWithTrace (connAttrs, callback) {\n      if (callback) {\n        arguments[1] = (err, connection) => {\n          if (connection) {\n            connection._dd_connAttrs = connAttrs\n          }\n          callback(err, connection)\n        }\n\n        getConnection.apply(this, arguments)\n      } else {\n        return getConnection.apply(this, arguments).then((connection) => {\n          connection._dd_connAttrs = connAttrs\n          return connection\n        })\n      }\n    }\n  }\n}\n\nfunction createWrapCreatePool (tracer, config) {\n  return function wrapCreatePool (createPool) {\n    return function createPoolWithTrace (poolAttrs, callback) {\n      if (callback) {\n        arguments[1] = (err, pool) => {\n          if (pool) {\n            pool._dd_poolAttrs = poolAttrs\n          }\n          callback(err, pool)\n        }\n\n        createPool.apply(this, arguments)\n      } else {\n        return createPool.apply(this, arguments).then((pool) => {\n          pool._dd_poolAttrs = poolAttrs\n          return pool\n        })\n      }\n    }\n  }\n}\n\nfunction createWrapPoolGetConnection (tracer, config) {\n  return function wrapPoolGetConnection (getConnection) {\n    return function poolGetConnectionWithTrace () {\n      let callback\n      if (typeof arguments[arguments.length - 1] === 'function') {\n        callback = arguments[arguments.length - 1]\n      }\n      if (callback) {\n        arguments[arguments.length - 1] = (err, connection) => {\n          if (connection) {\n            connection._dd_connAttrs = this._dd_poolAttrs\n          }\n          callback(err, connection)\n        }\n        getConnection.apply(this, arguments)\n      } else {\n        return getConnection.apply(this, arguments).then((connection) => {\n          connection._dd_connAttrs = this._dd_poolAttrs\n          return connection\n        })\n      }\n    }\n  }\n}\n\nfunction getServiceName (tracer, config, connAttrs) {\n  if (typeof config.service === 'function') {\n    return config.service(connAttrs)\n  } else if (config.service) {\n    return config.service\n  } else {\n    return `${tracer._service}-oracle`\n  }\n}\n\nmodule.exports = {\n  name: 'oracledb',\n  versions: ['5'],\n  patch (oracledb, tracer, config) {\n    this.wrap(oracledb.Connection.prototype, 'execute', createWrapExecute(tracer, config))\n    this.wrap(oracledb, 'getConnection', createWrapGetConnection(tracer, config))\n    this.wrap(oracledb, 'createPool', createWrapCreatePool(tracer, config))\n    this.wrap(oracledb.Pool.prototype, 'getConnection', createWrapPoolGetConnection(tracer, config))\n  },\n  unpatch (oracledb) {\n    this.unwrap(oracledb.Connection.prototype, 'execute')\n    this.unwrap(oracledb, 'getConnection')\n    this.unwrap(oracledb, 'createPool')\n    this.unwrap(oracledb.Pool.prototype, 'getConnection')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}