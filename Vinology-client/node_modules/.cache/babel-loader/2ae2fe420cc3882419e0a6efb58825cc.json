{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst URL = require('url').URL;\n\nconst pkg = require('./pkg');\n\nconst coalesce = require('koalas');\n\nconst scopes = require('../../../ext/scopes');\n\nconst tagger = require('./tagger');\n\nconst {\n  isTrue,\n  isFalse\n} = require('./util');\n\nconst uuid = require('crypto-randomuuid');\n\nconst fromEntries = Object.fromEntries || (entries => entries.reduce((obj, [k, v]) => Object.assign(obj, {\n  [k]: v\n}), {}));\n\nclass Config {\n  constructor(options) {\n    options = options || {};\n    this.tags = {};\n    tagger.add(this.tags, process.env.DD_TAGS);\n    tagger.add(this.tags, process.env.DD_TRACE_TAGS);\n    tagger.add(this.tags, process.env.DD_TRACE_GLOBAL_TAGS);\n    tagger.add(this.tags, options.tags); // Temporary disabled\n\n    const DD_PROFILING_ENABLED = coalesce(options.profiling, process.env.DD_EXPERIMENTAL_PROFILING_ENABLED, process.env.DD_PROFILING_ENABLED, false);\n    const DD_PROFILING_EXPORTERS = coalesce(process.env.DD_PROFILING_EXPORTERS, 'agent');\n    const DD_PROFILING_SOURCE_MAP = process.env.DD_PROFILING_SOURCE_MAP;\n    const DD_LOGS_INJECTION = coalesce(options.logInjection, process.env.DD_LOGS_INJECTION, false);\n    const DD_RUNTIME_METRICS_ENABLED = coalesce(options.runtimeMetrics, process.env.DD_RUNTIME_METRICS_ENABLED, false);\n    const DD_AGENT_HOST = coalesce(options.hostname, process.env.DD_AGENT_HOST, process.env.DD_TRACE_AGENT_HOSTNAME, '127.0.0.1');\n    const DD_TRACE_AGENT_PORT = coalesce(options.port, process.env.DD_TRACE_AGENT_PORT, '8126');\n    const DD_TRACE_AGENT_URL = coalesce(options.url, process.env.DD_TRACE_AGENT_URL, process.env.DD_TRACE_URL, null);\n    const DD_SERVICE = options.service || process.env.DD_SERVICE || process.env.DD_SERVICE_NAME || this.tags.service || process.env.AWS_LAMBDA_FUNCTION_NAME || pkg.name || 'node';\n    const DD_SERVICE_MAPPING = process.env.DD_SERVICE_MAPPING || '';\n    const DD_ENV = coalesce(options.env, process.env.DD_ENV, this.tags.env);\n    const DD_VERSION = coalesce(options.version, process.env.DD_VERSION, this.tags.version, pkg.version);\n    const DD_TRACE_STARTUP_LOGS = coalesce(options.startupLogs, process.env.DD_TRACE_STARTUP_LOGS, true);\n    const DD_TRACE_ENABLED = coalesce(options.enabled, process.env.DD_TRACE_ENABLED, true);\n    const DD_TRACE_DEBUG = coalesce(options.debug, process.env.DD_TRACE_DEBUG, false);\n    const DD_TRACE_AGENT_PROTOCOL_VERSION = coalesce(options.protocolVersion, process.env.DD_TRACE_AGENT_PROTOCOL_VERSION, '0.4');\n    const DD_TRACE_B3_ENABLED = coalesce(options.experimental && options.experimental.b3, process.env.DD_TRACE_EXPERIMENTAL_B3_ENABLED, false);\n    const DD_TRACE_RUNTIME_ID_ENABLED = coalesce(options.experimental && options.experimental.runtimeId, process.env.DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED, false);\n    const DD_TRACE_EXPORTER = coalesce(options.experimental && options.experimental.exporter, process.env.DD_TRACE_EXPERIMENTAL_EXPORTER);\n    const DD_TRACE_GET_RUM_DATA_ENABLED = coalesce(options.experimental && options.experimental.enableGetRumData, process.env.DD_TRACE_EXPERIMENTAL_GET_RUM_DATA_ENABLED, false);\n    const DD_TRACE_INTERNAL_ERRORS_ENABLED = coalesce(options.experimental && options.experimental.internalErrors, process.env.DD_TRACE_EXPERIMENTAL_INTERNAL_ERRORS_ENABLED, false); // TODO(simon-id): add documentation for appsec config when we release it in public beta\n\n    const DD_APPSEC_ENABLED = coalesce(options.experimental && options.experimental.appsec, process.env.DD_EXPERIMENTAL_APPSEC_ENABLED, process.env.DD_APPSEC_ENABLED, false);\n    const sampler = options.experimental && options.experimental.sampler || {};\n    const ingestion = options.ingestion || {};\n    const dogstatsd = coalesce(options.dogstatsd, {});\n    Object.assign(sampler, {\n      sampleRate: coalesce(ingestion.sampleRate, sampler.sampleRate, process.env.DD_TRACE_SAMPLE_RATE),\n      rateLimit: coalesce(ingestion.rateLimit, sampler.rateLimit, process.env.DD_TRACE_RATE_LIMIT)\n    });\n    const inAWSLambda = process.env.AWS_LAMBDA_FUNCTION_NAME !== undefined;\n    const defaultFlushInterval = inAWSLambda ? 0 : 2000;\n    this.enabled = isTrue(DD_TRACE_ENABLED);\n    this.debug = isTrue(DD_TRACE_DEBUG);\n    this.logInjection = isTrue(DD_LOGS_INJECTION);\n    this.env = DD_ENV;\n    this.url = getAgentUrl(DD_TRACE_AGENT_URL, options);\n    this.site = coalesce(options.site, process.env.DD_SITE, 'datadoghq.com');\n    this.hostname = DD_AGENT_HOST || this.url && this.url.hostname;\n    this.port = String(DD_TRACE_AGENT_PORT || this.url && this.url.port);\n    this.flushInterval = coalesce(parseInt(options.flushInterval, 10), defaultFlushInterval);\n    this.sampleRate = coalesce(Math.min(Math.max(options.sampleRate, 0), 1), 1);\n    this.logger = options.logger;\n    this.plugins = !!coalesce(options.plugins, true);\n    this.service = DD_SERVICE;\n    this.serviceMapping = DD_SERVICE_MAPPING.length ? fromEntries(DD_SERVICE_MAPPING.split(',').map(x => x.trim().split(':'))) : {};\n    this.version = DD_VERSION;\n    this.dogstatsd = {\n      hostname: coalesce(dogstatsd.hostname, process.env.DD_DOGSTATSD_HOSTNAME, this.hostname),\n      port: String(coalesce(dogstatsd.port, process.env.DD_DOGSTATSD_PORT, 8125))\n    };\n    this.runtimeMetrics = isTrue(DD_RUNTIME_METRICS_ENABLED);\n    this.trackAsyncScope = options.trackAsyncScope !== false;\n    this.experimental = {\n      b3: isTrue(DD_TRACE_B3_ENABLED),\n      runtimeId: isTrue(DD_TRACE_RUNTIME_ID_ENABLED),\n      exporter: DD_TRACE_EXPORTER,\n      enableGetRumData: isTrue(DD_TRACE_GET_RUM_DATA_ENABLED),\n      sampler,\n      internalErrors: isTrue(DD_TRACE_INTERNAL_ERRORS_ENABLED)\n    };\n    this.reportHostname = isTrue(coalesce(options.reportHostname, process.env.DD_TRACE_REPORT_HOSTNAME, false));\n    this.scope = isFalse(process.env.DD_CONTEXT_PROPAGATION) ? scopes.NOOP : coalesce(options.scope, process.env.DD_TRACE_SCOPE);\n    this.logLevel = coalesce(options.logLevel, process.env.DD_TRACE_LOG_LEVEL, 'debug');\n    this.profiling = {\n      enabled: isTrue(DD_PROFILING_ENABLED),\n      sourceMap: !isFalse(DD_PROFILING_SOURCE_MAP),\n      exporters: DD_PROFILING_EXPORTERS\n    };\n    this.lookup = options.lookup;\n    this.startupLogs = isTrue(DD_TRACE_STARTUP_LOGS);\n    this.protocolVersion = DD_TRACE_AGENT_PROTOCOL_VERSION;\n    this.appsec = {\n      enabled: isTrue(DD_APPSEC_ENABLED)\n    };\n    tagger.add(this.tags, {\n      service: this.service,\n      env: this.env,\n      version: this.version,\n      'runtime-id': uuid()\n    });\n  }\n\n}\n\nfunction getAgentUrl(url, options) {\n  if (url) return new URL(url);\n  if (os.type() === 'Windows_NT') return;\n\n  if (!options.hostname && !options.port && !process.env.DD_AGENT_HOST && !process.env.DD_TRACE_AGENT_HOSTNAME && !process.env.DD_TRACE_AGENT_PORT && fs.existsSync('/var/run/datadog/apm.socket')) {\n    return new URL('file:///var/run/datadog/apm.socket');\n  }\n}\n\nmodule.exports = Config;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/config.js"],"names":["fs","require","os","URL","pkg","coalesce","scopes","tagger","isTrue","isFalse","uuid","fromEntries","Object","entries","reduce","obj","k","v","assign","Config","constructor","options","tags","add","process","env","DD_TAGS","DD_TRACE_TAGS","DD_TRACE_GLOBAL_TAGS","DD_PROFILING_ENABLED","profiling","DD_EXPERIMENTAL_PROFILING_ENABLED","DD_PROFILING_EXPORTERS","DD_PROFILING_SOURCE_MAP","DD_LOGS_INJECTION","logInjection","DD_RUNTIME_METRICS_ENABLED","runtimeMetrics","DD_AGENT_HOST","hostname","DD_TRACE_AGENT_HOSTNAME","DD_TRACE_AGENT_PORT","port","DD_TRACE_AGENT_URL","url","DD_TRACE_URL","DD_SERVICE","service","DD_SERVICE_NAME","AWS_LAMBDA_FUNCTION_NAME","name","DD_SERVICE_MAPPING","DD_ENV","DD_VERSION","version","DD_TRACE_STARTUP_LOGS","startupLogs","DD_TRACE_ENABLED","enabled","DD_TRACE_DEBUG","debug","DD_TRACE_AGENT_PROTOCOL_VERSION","protocolVersion","DD_TRACE_B3_ENABLED","experimental","b3","DD_TRACE_EXPERIMENTAL_B3_ENABLED","DD_TRACE_RUNTIME_ID_ENABLED","runtimeId","DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED","DD_TRACE_EXPORTER","exporter","DD_TRACE_EXPERIMENTAL_EXPORTER","DD_TRACE_GET_RUM_DATA_ENABLED","enableGetRumData","DD_TRACE_EXPERIMENTAL_GET_RUM_DATA_ENABLED","DD_TRACE_INTERNAL_ERRORS_ENABLED","internalErrors","DD_TRACE_EXPERIMENTAL_INTERNAL_ERRORS_ENABLED","DD_APPSEC_ENABLED","appsec","DD_EXPERIMENTAL_APPSEC_ENABLED","sampler","ingestion","dogstatsd","sampleRate","DD_TRACE_SAMPLE_RATE","rateLimit","DD_TRACE_RATE_LIMIT","inAWSLambda","undefined","defaultFlushInterval","getAgentUrl","site","DD_SITE","String","flushInterval","parseInt","Math","min","max","logger","plugins","serviceMapping","length","split","map","x","trim","DD_DOGSTATSD_HOSTNAME","DD_DOGSTATSD_PORT","trackAsyncScope","reportHostname","DD_TRACE_REPORT_HOSTNAME","scope","DD_CONTEXT_PROPAGATION","NOOP","DD_TRACE_SCOPE","logLevel","DD_TRACE_LOG_LEVEL","sourceMap","exporters","lookup","type","existsSync","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAP,CAAeE,GAA3B;;AACA,MAAMC,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEO,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAsBR,OAAO,CAAC,QAAD,CAAnC;;AACA,MAAMS,IAAI,GAAGT,OAAO,CAAC,mBAAD,CAApB;;AAEA,MAAMU,WAAW,GAAGC,MAAM,CAACD,WAAP,KAAuBE,OAAO,IAChDA,OAAO,CAACC,MAAR,CAAe,CAACC,GAAD,EAAM,CAACC,CAAD,EAAIC,CAAJ,CAAN,KAAiBL,MAAM,CAACM,MAAP,CAAcH,GAAd,EAAmB;AAAE,GAACC,CAAD,GAAKC;AAAP,CAAnB,CAAhC,EAAgE,EAAhE,CADkB,CAApB;;AAGA,MAAME,MAAN,CAAa;AACXC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKC,IAAL,GAAY,EAAZ;AAEAf,IAAAA,MAAM,CAACgB,GAAP,CAAW,KAAKD,IAAhB,EAAsBE,OAAO,CAACC,GAAR,CAAYC,OAAlC;AACAnB,IAAAA,MAAM,CAACgB,GAAP,CAAW,KAAKD,IAAhB,EAAsBE,OAAO,CAACC,GAAR,CAAYE,aAAlC;AACApB,IAAAA,MAAM,CAACgB,GAAP,CAAW,KAAKD,IAAhB,EAAsBE,OAAO,CAACC,GAAR,CAAYG,oBAAlC;AACArB,IAAAA,MAAM,CAACgB,GAAP,CAAW,KAAKD,IAAhB,EAAsBD,OAAO,CAACC,IAA9B,EARoB,CAUpB;;AACA,UAAMO,oBAAoB,GAAGxB,QAAQ,CACnCgB,OAAO,CAACS,SAD2B,EAEnCN,OAAO,CAACC,GAAR,CAAYM,iCAFuB,EAGnCP,OAAO,CAACC,GAAR,CAAYI,oBAHuB,EAInC,KAJmC,CAArC;AAMA,UAAMG,sBAAsB,GAAG3B,QAAQ,CACrCmB,OAAO,CAACC,GAAR,CAAYO,sBADyB,EAErC,OAFqC,CAAvC;AAIA,UAAMC,uBAAuB,GAAGT,OAAO,CAACC,GAAR,CAAYQ,uBAA5C;AACA,UAAMC,iBAAiB,GAAG7B,QAAQ,CAChCgB,OAAO,CAACc,YADwB,EAEhCX,OAAO,CAACC,GAAR,CAAYS,iBAFoB,EAGhC,KAHgC,CAAlC;AAKA,UAAME,0BAA0B,GAAG/B,QAAQ,CACzCgB,OAAO,CAACgB,cADiC,EAEzCb,OAAO,CAACC,GAAR,CAAYW,0BAF6B,EAGzC,KAHyC,CAA3C;AAKA,UAAME,aAAa,GAAGjC,QAAQ,CAC5BgB,OAAO,CAACkB,QADoB,EAE5Bf,OAAO,CAACC,GAAR,CAAYa,aAFgB,EAG5Bd,OAAO,CAACC,GAAR,CAAYe,uBAHgB,EAI5B,WAJ4B,CAA9B;AAMA,UAAMC,mBAAmB,GAAGpC,QAAQ,CAClCgB,OAAO,CAACqB,IAD0B,EAElClB,OAAO,CAACC,GAAR,CAAYgB,mBAFsB,EAGlC,MAHkC,CAApC;AAKA,UAAME,kBAAkB,GAAGtC,QAAQ,CACjCgB,OAAO,CAACuB,GADyB,EAEjCpB,OAAO,CAACC,GAAR,CAAYkB,kBAFqB,EAGjCnB,OAAO,CAACC,GAAR,CAAYoB,YAHqB,EAIjC,IAJiC,CAAnC;AAMA,UAAMC,UAAU,GAAGzB,OAAO,CAAC0B,OAAR,IACjBvB,OAAO,CAACC,GAAR,CAAYqB,UADK,IAEjBtB,OAAO,CAACC,GAAR,CAAYuB,eAFK,IAGjB,KAAK1B,IAAL,CAAUyB,OAHO,IAIjBvB,OAAO,CAACC,GAAR,CAAYwB,wBAJK,IAKjB7C,GAAG,CAAC8C,IALa,IAMjB,MANF;AAOA,UAAMC,kBAAkB,GAAG3B,OAAO,CAACC,GAAR,CAAY0B,kBAAZ,IAAkC,EAA7D;AACA,UAAMC,MAAM,GAAG/C,QAAQ,CACrBgB,OAAO,CAACI,GADa,EAErBD,OAAO,CAACC,GAAR,CAAY2B,MAFS,EAGrB,KAAK9B,IAAL,CAAUG,GAHW,CAAvB;AAKA,UAAM4B,UAAU,GAAGhD,QAAQ,CACzBgB,OAAO,CAACiC,OADiB,EAEzB9B,OAAO,CAACC,GAAR,CAAY4B,UAFa,EAGzB,KAAK/B,IAAL,CAAUgC,OAHe,EAIzBlD,GAAG,CAACkD,OAJqB,CAA3B;AAMA,UAAMC,qBAAqB,GAAGlD,QAAQ,CACpCgB,OAAO,CAACmC,WAD4B,EAEpChC,OAAO,CAACC,GAAR,CAAY8B,qBAFwB,EAGpC,IAHoC,CAAtC;AAKA,UAAME,gBAAgB,GAAGpD,QAAQ,CAC/BgB,OAAO,CAACqC,OADuB,EAE/BlC,OAAO,CAACC,GAAR,CAAYgC,gBAFmB,EAG/B,IAH+B,CAAjC;AAKA,UAAME,cAAc,GAAGtD,QAAQ,CAC7BgB,OAAO,CAACuC,KADqB,EAE7BpC,OAAO,CAACC,GAAR,CAAYkC,cAFiB,EAG7B,KAH6B,CAA/B;AAKA,UAAME,+BAA+B,GAAGxD,QAAQ,CAC9CgB,OAAO,CAACyC,eADsC,EAE9CtC,OAAO,CAACC,GAAR,CAAYoC,+BAFkC,EAG9C,KAH8C,CAAhD;AAKA,UAAME,mBAAmB,GAAG1D,QAAQ,CAClCgB,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBC,EADX,EAElCzC,OAAO,CAACC,GAAR,CAAYyC,gCAFsB,EAGlC,KAHkC,CAApC;AAKA,UAAMC,2BAA2B,GAAG9D,QAAQ,CAC1CgB,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBI,SADH,EAE1C5C,OAAO,CAACC,GAAR,CAAY4C,wCAF8B,EAG1C,KAH0C,CAA5C;AAKA,UAAMC,iBAAiB,GAAGjE,QAAQ,CAChCgB,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBO,QADb,EAEhC/C,OAAO,CAACC,GAAR,CAAY+C,8BAFoB,CAAlC;AAIA,UAAMC,6BAA6B,GAAGpE,QAAQ,CAC5CgB,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBU,gBADD,EAE5ClD,OAAO,CAACC,GAAR,CAAYkD,0CAFgC,EAG5C,KAH4C,CAA9C;AAKA,UAAMC,gCAAgC,GAAGvE,QAAQ,CAC/CgB,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBa,cADE,EAE/CrD,OAAO,CAACC,GAAR,CAAYqD,6CAFmC,EAG/C,KAH+C,CAAjD,CA3GoB,CAgHpB;;AACA,UAAMC,iBAAiB,GAAG1E,QAAQ,CAChCgB,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBgB,MADb,EAEhCxD,OAAO,CAACC,GAAR,CAAYwD,8BAFoB,EAGhCzD,OAAO,CAACC,GAAR,CAAYsD,iBAHoB,EAIhC,KAJgC,CAAlC;AAOA,UAAMG,OAAO,GAAI7D,OAAO,CAAC2C,YAAR,IAAwB3C,OAAO,CAAC2C,YAAR,CAAqBkB,OAA9C,IAA0D,EAA1E;AACA,UAAMC,SAAS,GAAG9D,OAAO,CAAC8D,SAAR,IAAqB,EAAvC;AACA,UAAMC,SAAS,GAAG/E,QAAQ,CAACgB,OAAO,CAAC+D,SAAT,EAAoB,EAApB,CAA1B;AAEAxE,IAAAA,MAAM,CAACM,MAAP,CAAcgE,OAAd,EAAuB;AACrBG,MAAAA,UAAU,EAAEhF,QAAQ,CAAC8E,SAAS,CAACE,UAAX,EAAuBH,OAAO,CAACG,UAA/B,EAA2C7D,OAAO,CAACC,GAAR,CAAY6D,oBAAvD,CADC;AAErBC,MAAAA,SAAS,EAAElF,QAAQ,CAAC8E,SAAS,CAACI,SAAX,EAAsBL,OAAO,CAACK,SAA9B,EAAyC/D,OAAO,CAACC,GAAR,CAAY+D,mBAArD;AAFE,KAAvB;AAKA,UAAMC,WAAW,GAAGjE,OAAO,CAACC,GAAR,CAAYwB,wBAAZ,KAAyCyC,SAA7D;AACA,UAAMC,oBAAoB,GAAGF,WAAW,GAAG,CAAH,GAAO,IAA/C;AAEA,SAAK/B,OAAL,GAAelD,MAAM,CAACiD,gBAAD,CAArB;AACA,SAAKG,KAAL,GAAapD,MAAM,CAACmD,cAAD,CAAnB;AACA,SAAKxB,YAAL,GAAoB3B,MAAM,CAAC0B,iBAAD,CAA1B;AACA,SAAKT,GAAL,GAAW2B,MAAX;AACA,SAAKR,GAAL,GAAWgD,WAAW,CAACjD,kBAAD,EAAqBtB,OAArB,CAAtB;AACA,SAAKwE,IAAL,GAAYxF,QAAQ,CAACgB,OAAO,CAACwE,IAAT,EAAerE,OAAO,CAACC,GAAR,CAAYqE,OAA3B,EAAoC,eAApC,CAApB;AACA,SAAKvD,QAAL,GAAgBD,aAAa,IAAK,KAAKM,GAAL,IAAY,KAAKA,GAAL,CAASL,QAAvD;AACA,SAAKG,IAAL,GAAYqD,MAAM,CAACtD,mBAAmB,IAAK,KAAKG,GAAL,IAAY,KAAKA,GAAL,CAASF,IAA9C,CAAlB;AACA,SAAKsD,aAAL,GAAqB3F,QAAQ,CAAC4F,QAAQ,CAAC5E,OAAO,CAAC2E,aAAT,EAAwB,EAAxB,CAAT,EAAsCL,oBAAtC,CAA7B;AACA,SAAKN,UAAL,GAAkBhF,QAAQ,CAAC6F,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS/E,OAAO,CAACgE,UAAjB,EAA6B,CAA7B,CAAT,EAA0C,CAA1C,CAAD,EAA+C,CAA/C,CAA1B;AACA,SAAKgB,MAAL,GAAchF,OAAO,CAACgF,MAAtB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACjG,QAAQ,CAACgB,OAAO,CAACiF,OAAT,EAAkB,IAAlB,CAAzB;AACA,SAAKvD,OAAL,GAAeD,UAAf;AACA,SAAKyD,cAAL,GAAsBpD,kBAAkB,CAACqD,MAAnB,GAA4B7F,WAAW,CAC3DwC,kBAAkB,CAACsD,KAAnB,CAAyB,GAAzB,EAA8BC,GAA9B,CAAkCC,CAAC,IAAIA,CAAC,CAACC,IAAF,GAASH,KAAT,CAAe,GAAf,CAAvC,CAD2D,CAAvC,GAElB,EAFJ;AAGA,SAAKnD,OAAL,GAAeD,UAAf;AACA,SAAK+B,SAAL,GAAiB;AACf7C,MAAAA,QAAQ,EAAElC,QAAQ,CAAC+E,SAAS,CAAC7C,QAAX,EAAqBf,OAAO,CAACC,GAAR,CAAYoF,qBAAjC,EAAwD,KAAKtE,QAA7D,CADH;AAEfG,MAAAA,IAAI,EAAEqD,MAAM,CAAC1F,QAAQ,CAAC+E,SAAS,CAAC1C,IAAX,EAAiBlB,OAAO,CAACC,GAAR,CAAYqF,iBAA7B,EAAgD,IAAhD,CAAT;AAFG,KAAjB;AAIA,SAAKzE,cAAL,GAAsB7B,MAAM,CAAC4B,0BAAD,CAA5B;AACA,SAAK2E,eAAL,GAAuB1F,OAAO,CAAC0F,eAAR,KAA4B,KAAnD;AACA,SAAK/C,YAAL,GAAoB;AAClBC,MAAAA,EAAE,EAAEzD,MAAM,CAACuD,mBAAD,CADQ;AAElBK,MAAAA,SAAS,EAAE5D,MAAM,CAAC2D,2BAAD,CAFC;AAGlBI,MAAAA,QAAQ,EAAED,iBAHQ;AAIlBI,MAAAA,gBAAgB,EAAElE,MAAM,CAACiE,6BAAD,CAJN;AAKlBS,MAAAA,OALkB;AAMlBL,MAAAA,cAAc,EAAErE,MAAM,CAACoE,gCAAD;AANJ,KAApB;AAQA,SAAKoC,cAAL,GAAsBxG,MAAM,CAACH,QAAQ,CAACgB,OAAO,CAAC2F,cAAT,EAAyBxF,OAAO,CAACC,GAAR,CAAYwF,wBAArC,EAA+D,KAA/D,CAAT,CAA5B;AACA,SAAKC,KAAL,GAAazG,OAAO,CAACe,OAAO,CAACC,GAAR,CAAY0F,sBAAb,CAAP,GACT7G,MAAM,CAAC8G,IADE,GAET/G,QAAQ,CAACgB,OAAO,CAAC6F,KAAT,EAAgB1F,OAAO,CAACC,GAAR,CAAY4F,cAA5B,CAFZ;AAGA,SAAKC,QAAL,GAAgBjH,QAAQ,CACtBgB,OAAO,CAACiG,QADc,EAEtB9F,OAAO,CAACC,GAAR,CAAY8F,kBAFU,EAGtB,OAHsB,CAAxB;AAKA,SAAKzF,SAAL,GAAiB;AACf4B,MAAAA,OAAO,EAAElD,MAAM,CAACqB,oBAAD,CADA;AAEf2F,MAAAA,SAAS,EAAE,CAAC/G,OAAO,CAACwB,uBAAD,CAFJ;AAGfwF,MAAAA,SAAS,EAAEzF;AAHI,KAAjB;AAKA,SAAK0F,MAAL,GAAcrG,OAAO,CAACqG,MAAtB;AACA,SAAKlE,WAAL,GAAmBhD,MAAM,CAAC+C,qBAAD,CAAzB;AACA,SAAKO,eAAL,GAAuBD,+BAAvB;AACA,SAAKmB,MAAL,GAAc;AACZtB,MAAAA,OAAO,EAAElD,MAAM,CAACuE,iBAAD;AADH,KAAd;AAIAxE,IAAAA,MAAM,CAACgB,GAAP,CAAW,KAAKD,IAAhB,EAAsB;AACpByB,MAAAA,OAAO,EAAE,KAAKA,OADM;AAEpBtB,MAAAA,GAAG,EAAE,KAAKA,GAFU;AAGpB6B,MAAAA,OAAO,EAAE,KAAKA,OAHM;AAIpB,oBAAc5C,IAAI;AAJE,KAAtB;AAMD;;AA/LU;;AAkMb,SAASkF,WAAT,CAAsBhD,GAAtB,EAA2BvB,OAA3B,EAAoC;AAClC,MAAIuB,GAAJ,EAAS,OAAO,IAAIzC,GAAJ,CAAQyC,GAAR,CAAP;AAET,MAAI1C,EAAE,CAACyH,IAAH,OAAc,YAAlB,EAAgC;;AAEhC,MACE,CAACtG,OAAO,CAACkB,QAAT,IACA,CAAClB,OAAO,CAACqB,IADT,IAEA,CAAClB,OAAO,CAACC,GAAR,CAAYa,aAFb,IAGA,CAACd,OAAO,CAACC,GAAR,CAAYe,uBAHb,IAIA,CAAChB,OAAO,CAACC,GAAR,CAAYgB,mBAJb,IAKAzC,EAAE,CAAC4H,UAAH,CAAc,6BAAd,CANF,EAOE;AACA,WAAO,IAAIzH,GAAJ,CAAQ,oCAAR,CAAP;AACD;AACF;;AAED0H,MAAM,CAACC,OAAP,GAAiB3G,MAAjB","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst os = require('os')\nconst URL = require('url').URL\nconst pkg = require('./pkg')\nconst coalesce = require('koalas')\nconst scopes = require('../../../ext/scopes')\nconst tagger = require('./tagger')\nconst { isTrue, isFalse } = require('./util')\nconst uuid = require('crypto-randomuuid')\n\nconst fromEntries = Object.fromEntries || (entries =>\n  entries.reduce((obj, [k, v]) => Object.assign(obj, { [k]: v }), {}))\n\nclass Config {\n  constructor (options) {\n    options = options || {}\n\n    this.tags = {}\n\n    tagger.add(this.tags, process.env.DD_TAGS)\n    tagger.add(this.tags, process.env.DD_TRACE_TAGS)\n    tagger.add(this.tags, process.env.DD_TRACE_GLOBAL_TAGS)\n    tagger.add(this.tags, options.tags)\n\n    // Temporary disabled\n    const DD_PROFILING_ENABLED = coalesce(\n      options.profiling,\n      process.env.DD_EXPERIMENTAL_PROFILING_ENABLED,\n      process.env.DD_PROFILING_ENABLED,\n      false\n    )\n    const DD_PROFILING_EXPORTERS = coalesce(\n      process.env.DD_PROFILING_EXPORTERS,\n      'agent'\n    )\n    const DD_PROFILING_SOURCE_MAP = process.env.DD_PROFILING_SOURCE_MAP\n    const DD_LOGS_INJECTION = coalesce(\n      options.logInjection,\n      process.env.DD_LOGS_INJECTION,\n      false\n    )\n    const DD_RUNTIME_METRICS_ENABLED = coalesce(\n      options.runtimeMetrics,\n      process.env.DD_RUNTIME_METRICS_ENABLED,\n      false\n    )\n    const DD_AGENT_HOST = coalesce(\n      options.hostname,\n      process.env.DD_AGENT_HOST,\n      process.env.DD_TRACE_AGENT_HOSTNAME,\n      '127.0.0.1'\n    )\n    const DD_TRACE_AGENT_PORT = coalesce(\n      options.port,\n      process.env.DD_TRACE_AGENT_PORT,\n      '8126'\n    )\n    const DD_TRACE_AGENT_URL = coalesce(\n      options.url,\n      process.env.DD_TRACE_AGENT_URL,\n      process.env.DD_TRACE_URL,\n      null\n    )\n    const DD_SERVICE = options.service ||\n      process.env.DD_SERVICE ||\n      process.env.DD_SERVICE_NAME ||\n      this.tags.service ||\n      process.env.AWS_LAMBDA_FUNCTION_NAME ||\n      pkg.name ||\n      'node'\n    const DD_SERVICE_MAPPING = process.env.DD_SERVICE_MAPPING || ''\n    const DD_ENV = coalesce(\n      options.env,\n      process.env.DD_ENV,\n      this.tags.env\n    )\n    const DD_VERSION = coalesce(\n      options.version,\n      process.env.DD_VERSION,\n      this.tags.version,\n      pkg.version\n    )\n    const DD_TRACE_STARTUP_LOGS = coalesce(\n      options.startupLogs,\n      process.env.DD_TRACE_STARTUP_LOGS,\n      true\n    )\n    const DD_TRACE_ENABLED = coalesce(\n      options.enabled,\n      process.env.DD_TRACE_ENABLED,\n      true\n    )\n    const DD_TRACE_DEBUG = coalesce(\n      options.debug,\n      process.env.DD_TRACE_DEBUG,\n      false\n    )\n    const DD_TRACE_AGENT_PROTOCOL_VERSION = coalesce(\n      options.protocolVersion,\n      process.env.DD_TRACE_AGENT_PROTOCOL_VERSION,\n      '0.4'\n    )\n    const DD_TRACE_B3_ENABLED = coalesce(\n      options.experimental && options.experimental.b3,\n      process.env.DD_TRACE_EXPERIMENTAL_B3_ENABLED,\n      false\n    )\n    const DD_TRACE_RUNTIME_ID_ENABLED = coalesce(\n      options.experimental && options.experimental.runtimeId,\n      process.env.DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED,\n      false\n    )\n    const DD_TRACE_EXPORTER = coalesce(\n      options.experimental && options.experimental.exporter,\n      process.env.DD_TRACE_EXPERIMENTAL_EXPORTER\n    )\n    const DD_TRACE_GET_RUM_DATA_ENABLED = coalesce(\n      options.experimental && options.experimental.enableGetRumData,\n      process.env.DD_TRACE_EXPERIMENTAL_GET_RUM_DATA_ENABLED,\n      false\n    )\n    const DD_TRACE_INTERNAL_ERRORS_ENABLED = coalesce(\n      options.experimental && options.experimental.internalErrors,\n      process.env.DD_TRACE_EXPERIMENTAL_INTERNAL_ERRORS_ENABLED,\n      false\n    )\n    // TODO(simon-id): add documentation for appsec config when we release it in public beta\n    const DD_APPSEC_ENABLED = coalesce(\n      options.experimental && options.experimental.appsec,\n      process.env.DD_EXPERIMENTAL_APPSEC_ENABLED,\n      process.env.DD_APPSEC_ENABLED,\n      false\n    )\n\n    const sampler = (options.experimental && options.experimental.sampler) || {}\n    const ingestion = options.ingestion || {}\n    const dogstatsd = coalesce(options.dogstatsd, {})\n\n    Object.assign(sampler, {\n      sampleRate: coalesce(ingestion.sampleRate, sampler.sampleRate, process.env.DD_TRACE_SAMPLE_RATE),\n      rateLimit: coalesce(ingestion.rateLimit, sampler.rateLimit, process.env.DD_TRACE_RATE_LIMIT)\n    })\n\n    const inAWSLambda = process.env.AWS_LAMBDA_FUNCTION_NAME !== undefined\n    const defaultFlushInterval = inAWSLambda ? 0 : 2000\n\n    this.enabled = isTrue(DD_TRACE_ENABLED)\n    this.debug = isTrue(DD_TRACE_DEBUG)\n    this.logInjection = isTrue(DD_LOGS_INJECTION)\n    this.env = DD_ENV\n    this.url = getAgentUrl(DD_TRACE_AGENT_URL, options)\n    this.site = coalesce(options.site, process.env.DD_SITE, 'datadoghq.com')\n    this.hostname = DD_AGENT_HOST || (this.url && this.url.hostname)\n    this.port = String(DD_TRACE_AGENT_PORT || (this.url && this.url.port))\n    this.flushInterval = coalesce(parseInt(options.flushInterval, 10), defaultFlushInterval)\n    this.sampleRate = coalesce(Math.min(Math.max(options.sampleRate, 0), 1), 1)\n    this.logger = options.logger\n    this.plugins = !!coalesce(options.plugins, true)\n    this.service = DD_SERVICE\n    this.serviceMapping = DD_SERVICE_MAPPING.length ? fromEntries(\n      DD_SERVICE_MAPPING.split(',').map(x => x.trim().split(':'))\n    ) : {}\n    this.version = DD_VERSION\n    this.dogstatsd = {\n      hostname: coalesce(dogstatsd.hostname, process.env.DD_DOGSTATSD_HOSTNAME, this.hostname),\n      port: String(coalesce(dogstatsd.port, process.env.DD_DOGSTATSD_PORT, 8125))\n    }\n    this.runtimeMetrics = isTrue(DD_RUNTIME_METRICS_ENABLED)\n    this.trackAsyncScope = options.trackAsyncScope !== false\n    this.experimental = {\n      b3: isTrue(DD_TRACE_B3_ENABLED),\n      runtimeId: isTrue(DD_TRACE_RUNTIME_ID_ENABLED),\n      exporter: DD_TRACE_EXPORTER,\n      enableGetRumData: isTrue(DD_TRACE_GET_RUM_DATA_ENABLED),\n      sampler,\n      internalErrors: isTrue(DD_TRACE_INTERNAL_ERRORS_ENABLED)\n    }\n    this.reportHostname = isTrue(coalesce(options.reportHostname, process.env.DD_TRACE_REPORT_HOSTNAME, false))\n    this.scope = isFalse(process.env.DD_CONTEXT_PROPAGATION)\n      ? scopes.NOOP\n      : coalesce(options.scope, process.env.DD_TRACE_SCOPE)\n    this.logLevel = coalesce(\n      options.logLevel,\n      process.env.DD_TRACE_LOG_LEVEL,\n      'debug'\n    )\n    this.profiling = {\n      enabled: isTrue(DD_PROFILING_ENABLED),\n      sourceMap: !isFalse(DD_PROFILING_SOURCE_MAP),\n      exporters: DD_PROFILING_EXPORTERS\n    }\n    this.lookup = options.lookup\n    this.startupLogs = isTrue(DD_TRACE_STARTUP_LOGS)\n    this.protocolVersion = DD_TRACE_AGENT_PROTOCOL_VERSION\n    this.appsec = {\n      enabled: isTrue(DD_APPSEC_ENABLED)\n    }\n\n    tagger.add(this.tags, {\n      service: this.service,\n      env: this.env,\n      version: this.version,\n      'runtime-id': uuid()\n    })\n  }\n}\n\nfunction getAgentUrl (url, options) {\n  if (url) return new URL(url)\n\n  if (os.type() === 'Windows_NT') return\n\n  if (\n    !options.hostname &&\n    !options.port &&\n    !process.env.DD_AGENT_HOST &&\n    !process.env.DD_TRACE_AGENT_HOSTNAME &&\n    !process.env.DD_TRACE_AGENT_PORT &&\n    fs.existsSync('/var/run/datadog/apm.socket')\n  ) {\n    return new URL('file:///var/run/datadog/apm.socket')\n  }\n}\n\nmodule.exports = Config\n"]},"metadata":{},"sourceType":"script"}