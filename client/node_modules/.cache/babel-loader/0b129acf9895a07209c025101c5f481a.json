{"ast":null,"code":"\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ldexp = exports.frexp = void 0;\n/**\n * Splits a double-precision floating-point number into a normalized fraction\n * and an integer power of two.\n */\n\nfunction frexp(value) {\n  if (value === 0 || !Number.isFinite(value)) return [value, 0];\n  var absValue = Math.abs(value);\n  var exponent = Math.max(-1023, Math.floor(Math.log2(absValue)) + 1);\n  var mantissa = absValue * Math.pow(2, -exponent);\n\n  while (mantissa < 0.5) {\n    mantissa *= 2;\n    exponent--;\n  }\n\n  while (mantissa >= 1) {\n    mantissa *= 0.5;\n    exponent++;\n  }\n\n  if (value < 0) {\n    mantissa = -mantissa;\n  }\n\n  return [mantissa, exponent];\n}\n\nexports.frexp = frexp;\n/**\n * Multiplies a double-precision floating-point number by an integer power of\n * two; i.e., x = frac * 2^exp.\n */\n\nfunction ldexp(mantissa, exponent) {\n  var iterations = Math.min(3, Math.ceil(Math.abs(exponent) / 1023));\n  var result = mantissa;\n\n  for (var i = 0; i < iterations; i++) {\n    result *= Math.pow(2, Math.floor((exponent + i) / iterations));\n  }\n\n  return result;\n}\n\nexports.ldexp = ldexp;","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/@datadog/sketches-js/dist/ddsketch/math.js"],"names":["Object","defineProperty","exports","value","ldexp","frexp","Number","isFinite","absValue","Math","abs","exponent","max","floor","log2","mantissa","pow","iterations","min","ceil","result","i"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAArC;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeF,KAAf,EAAsB;AAClB,MAAIA,KAAK,KAAK,CAAV,IAAe,CAACG,MAAM,CAACC,QAAP,CAAgBJ,KAAhB,CAApB,EACI,OAAO,CAACA,KAAD,EAAQ,CAAR,CAAP;AACJ,MAAIK,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASP,KAAT,CAAf;AACA,MAAIQ,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAAS,CAAC,IAAV,EAAgBH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,QAAV,CAAX,IAAkC,CAAlD,CAAf;AACA,MAAIO,QAAQ,GAAGP,QAAQ,GAAGC,IAAI,CAACO,GAAL,CAAS,CAAT,EAAY,CAACL,QAAb,CAA1B;;AACA,SAAOI,QAAQ,GAAG,GAAlB,EAAuB;AACnBA,IAAAA,QAAQ,IAAI,CAAZ;AACAJ,IAAAA,QAAQ;AACX;;AACD,SAAOI,QAAQ,IAAI,CAAnB,EAAsB;AAClBA,IAAAA,QAAQ,IAAI,GAAZ;AACAJ,IAAAA,QAAQ;AACX;;AACD,MAAIR,KAAK,GAAG,CAAZ,EAAe;AACXY,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACH;;AACD,SAAO,CAACA,QAAD,EAAWJ,QAAX,CAAP;AACH;;AACDT,OAAO,CAACG,KAAR,GAAgBA,KAAhB;AACA;AACA;AACA;AACA;;AACA,SAASD,KAAT,CAAeW,QAAf,EAAyBJ,QAAzB,EAAmC;AAC/B,MAAIM,UAAU,GAAGR,IAAI,CAACS,GAAL,CAAS,CAAT,EAAYT,IAAI,CAACU,IAAL,CAAUV,IAAI,CAACC,GAAL,CAASC,QAAT,IAAqB,IAA/B,CAAZ,CAAjB;AACA,MAAIS,MAAM,GAAGL,QAAb;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAApB,EAAgCI,CAAC,EAAjC,EAAqC;AACjCD,IAAAA,MAAM,IAAIX,IAAI,CAACO,GAAL,CAAS,CAAT,EAAYP,IAAI,CAACI,KAAL,CAAW,CAACF,QAAQ,GAAGU,CAAZ,IAAiBJ,UAA5B,CAAZ,CAAV;AACH;;AACD,SAAOG,MAAP;AACH;;AACDlB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ldexp = exports.frexp = void 0;\n/**\n * Splits a double-precision floating-point number into a normalized fraction\n * and an integer power of two.\n */\nfunction frexp(value) {\n    if (value === 0 || !Number.isFinite(value))\n        return [value, 0];\n    var absValue = Math.abs(value);\n    var exponent = Math.max(-1023, Math.floor(Math.log2(absValue)) + 1);\n    var mantissa = absValue * Math.pow(2, -exponent);\n    while (mantissa < 0.5) {\n        mantissa *= 2;\n        exponent--;\n    }\n    while (mantissa >= 1) {\n        mantissa *= 0.5;\n        exponent++;\n    }\n    if (value < 0) {\n        mantissa = -mantissa;\n    }\n    return [mantissa, exponent];\n}\nexports.frexp = frexp;\n/**\n * Multiplies a double-precision floating-point number by an integer power of\n * two; i.e., x = frac * 2^exp.\n */\nfunction ldexp(mantissa, exponent) {\n    var iterations = Math.min(3, Math.ceil(Math.abs(exponent) / 1023));\n    var result = mantissa;\n    for (var i = 0; i < iterations; i++) {\n        result *= Math.pow(2, Math.floor((exponent + i) / iterations));\n    }\n    return result;\n}\nexports.ldexp = ldexp;\n"]},"metadata":{},"sourceType":"script"}