{"ast":null,"code":"'use strict'; // TODO: use sourceRoot when set, possibly from source-map-resolve\n\nconst fs = require('fs');\n\nconst {\n  SourceMapConsumer\n} = require('source-map');\n\nconst sourceMapResolve = require('source-map-resolve');\n\nconst {\n  fileURLToPath,\n  pathToFileURL\n} = require('url');\n\nclass SourceMapper {\n  constructor() {\n    this._consumers = Object.create(null);\n    this._sources = Object.create(null);\n  }\n\n  async getSource(callFrame) {\n    const {\n      url,\n      lineNumber,\n      columnNumber,\n      functionName\n    } = callFrame;\n    const key = `${url}:${functionName}:${lineNumber}:${columnNumber}`;\n\n    if (!this._sources[key]) {\n      this._sources[key] = await this._getMapping(callFrame);\n    }\n\n    return this._sources[key];\n  }\n\n  async _getConsumer(url) {\n    if (this._consumers[url] === undefined) {\n      this._consumers[url] = this._createConsumer(url);\n    }\n\n    return this._consumers[url];\n  }\n\n  async _createConsumer(url) {\n    try {\n      const map = await this._resolve(url);\n      return map ? new SourceMapConsumer(map) : null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async _getMapping(callFrame) {\n    const {\n      url,\n      functionName,\n      lineNumber,\n      columnNumber\n    } = callFrame; // Runtime.CallFrame is 0-based for both line and column numbers.\n    // When the line or column number is not known the value is -1.\n    // https://chromedevtools.github.io/devtools-protocol/v8/Runtime/#type-CallFrame\n\n    if (lineNumber < 0 || columnNumber < 0) return callFrame;\n    const consumer = await this._getConsumer(url);\n    if (!consumer) return callFrame; // SourceMapConsumer is 1-based for lines and 0-based for columns\n    // https://github.com/mozilla/source-map/blob/0.7.3/lib/source-map-consumer.js#L464-L487\n\n    const map = consumer.originalPositionFor({\n      line: lineNumber + 1,\n      column: columnNumber\n    });\n    if (!map || !map.source || !map.line) return callFrame;\n    return {\n      url: pathToFileURL(map.source).href,\n      lineNumber: map.line - 1,\n      // reset to 0-based from 1-based\n      columnNumber: map.column !== null ? map.column : -1,\n      functionName: map.name || functionName\n    };\n  }\n\n  async _resolve(url) {\n    const filename = fileURLToPath(url);\n    const code = (await fs.promises.readFile(filename)).toString();\n    return new Promise((resolve, reject) => {\n      sourceMapResolve.resolve(code, filename, fs.readFile, (error, result) => {\n        if (!result || error) return resolve(null);\n        result.map.sourcesContent = result.sourcesContent;\n        result.map.sources = result.sourcesResolved;\n        resolve(result.map);\n      });\n    });\n  }\n\n}\n\nmodule.exports = {\n  SourceMapper\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/profiling/mapper.js"],"names":["fs","require","SourceMapConsumer","sourceMapResolve","fileURLToPath","pathToFileURL","SourceMapper","constructor","_consumers","Object","create","_sources","getSource","callFrame","url","lineNumber","columnNumber","functionName","key","_getMapping","_getConsumer","undefined","_createConsumer","map","_resolve","e","consumer","originalPositionFor","line","column","source","href","name","filename","code","promises","readFile","toString","Promise","resolve","reject","error","result","sourcesContent","sources","sourcesResolved","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// TODO: use sourceRoot when set, possibly from source-map-resolve\n\nconst fs = require('fs')\nconst { SourceMapConsumer } = require('source-map')\nconst sourceMapResolve = require('source-map-resolve')\nconst { fileURLToPath, pathToFileURL } = require('url')\n\nclass SourceMapper {\n  constructor () {\n    this._consumers = Object.create(null)\n    this._sources = Object.create(null)\n  }\n\n  async getSource (callFrame) {\n    const { url, lineNumber, columnNumber, functionName } = callFrame\n    const key = `${url}:${functionName}:${lineNumber}:${columnNumber}`\n\n    if (!this._sources[key]) {\n      this._sources[key] = await this._getMapping(callFrame)\n    }\n\n    return this._sources[key]\n  }\n\n  async _getConsumer (url) {\n    if (this._consumers[url] === undefined) {\n      this._consumers[url] = this._createConsumer(url)\n    }\n\n    return this._consumers[url]\n  }\n\n  async _createConsumer (url) {\n    try {\n      const map = await this._resolve(url)\n\n      return map ? new SourceMapConsumer(map) : null\n    } catch (e) {\n      return null\n    }\n  }\n\n  async _getMapping (callFrame) {\n    const { url, functionName, lineNumber, columnNumber } = callFrame\n\n    // Runtime.CallFrame is 0-based for both line and column numbers.\n    // When the line or column number is not known the value is -1.\n    // https://chromedevtools.github.io/devtools-protocol/v8/Runtime/#type-CallFrame\n    if (lineNumber < 0 || columnNumber < 0) return callFrame\n\n    const consumer = await this._getConsumer(url)\n\n    if (!consumer) return callFrame\n\n    // SourceMapConsumer is 1-based for lines and 0-based for columns\n    // https://github.com/mozilla/source-map/blob/0.7.3/lib/source-map-consumer.js#L464-L487\n    const map = consumer.originalPositionFor({\n      line: lineNumber + 1,\n      column: columnNumber\n    })\n\n    if (!map || !map.source || !map.line) return callFrame\n\n    return {\n      url: pathToFileURL(map.source).href,\n      lineNumber: map.line - 1, // reset to 0-based from 1-based\n      columnNumber: map.column !== null ? map.column : -1,\n      functionName: map.name || functionName\n    }\n  }\n\n  async _resolve (url) {\n    const filename = fileURLToPath(url)\n    const code = (await fs.promises.readFile(filename)).toString()\n\n    return new Promise((resolve, reject) => {\n      sourceMapResolve.resolve(code, filename, fs.readFile, (error, result) => {\n        if (!result || error) return resolve(null)\n\n        result.map.sourcesContent = result.sourcesContent\n        result.map.sources = result.sourcesResolved\n\n        resolve(result.map)\n      })\n    })\n  }\n}\n\nmodule.exports = { SourceMapper }\n"]},"metadata":{},"sourceType":"script"}