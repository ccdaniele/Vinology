{"ast":null,"code":"'use strict';\n/**\n * @description The enum values in this map are not exposed from ShareDB, so the keys are hard-coded here.\n * The values were derived from: https://github.com/share/sharedb/blob/master/lib/client/connection.js#L196\n */\n\nconst READABLE_ACTION_NAMES = {\n  hs: 'handshake',\n  qf: 'query-fetch',\n  qs: 'query-subscribe',\n  qu: 'query-unsubscribe',\n  bf: 'bulk-fetch',\n  bs: 'bulk-subscribe',\n  bu: 'bulk-unsubscribe',\n  f: 'fetch',\n  s: 'subscribe',\n  u: 'unsubscribe',\n  op: 'op',\n  nf: 'snapshot-fetch',\n  nt: 'snapshot-fetch-by-ts',\n  p: 'presence-broadcast',\n  pr: 'presence-request',\n  ps: 'presence-subscribe',\n  pu: 'presence-unsubscribe'\n};\n\nfunction getReadableActionName(action) {\n  const actionName = READABLE_ACTION_NAMES[action];\n\n  if (actionName === undefined) {\n    return action;\n  }\n\n  return actionName;\n}\n\nfunction getReadableResourceName(readableActionName, collection, query) {\n  if (collection) {\n    readableActionName += ' ' + collection;\n  }\n\n  if (query) {\n    readableActionName += ' ' + JSON.stringify(sanitize(query));\n  }\n\n  return readableActionName;\n}\n\nfunction sanitize(input) {\n  const output = {};\n  if (!isObject(input) || Buffer.isBuffer(input)) return '?';\n\n  for (const key in input) {\n    if (typeof input[key] === 'function') continue;\n    output[key] = sanitize(input[key]);\n  }\n\n  return output;\n}\n\nfunction isObject(val) {\n  return typeof val === 'object' && val !== null && !(val instanceof Array);\n}\n\nfunction wrapCallback(config, tracer, request, span, done) {\n  return tracer.scope().bind((err, res) => {\n    if (err) {\n      span.setTag('error', err);\n    }\n\n    if (config.hooks && config.hooks.reply) {\n      config.hooks.reply(span, request, res);\n    }\n\n    span.finish();\n\n    if (done) {\n      done(err, res);\n    }\n  });\n}\n\nfunction createAgentWrapHandle(tracer, config) {\n  return function wrapHandleMessage(origHandleMessageFn) {\n    // called once\n    return function handleMessageWithTrace(request, callback) {\n      // called for each trigger\n      const action = request.a;\n      const actionName = getReadableActionName(action);\n      const scope = tracer.scope();\n      const childOf = scope.active();\n      const span = tracer.startSpan('sharedb.request', {\n        childOf,\n        tags: {\n          'service.name': config.service || tracer._service,\n          'span.kind': 'server',\n          'sharedb.action': actionName,\n          'resource.name': getReadableResourceName(actionName, request.c, request.q)\n        }\n      });\n\n      if (config.hooks && config.hooks.receive) {\n        config.hooks.receive(span, request);\n      }\n\n      arguments[1] = wrapCallback(config, tracer, request, span, callback);\n      return tracer.scope().bind(origHandleMessageFn, span).apply(this, arguments);\n    };\n  };\n}\n\nmodule.exports = {\n  name: 'sharedb',\n  versions: ['>=1'],\n  file: 'lib/agent.js',\n\n  patch(Agent, tracer, config) {\n    this.wrap(Agent.prototype, '_handleMessage', createAgentWrapHandle(tracer, config));\n  },\n\n  unpatch(Agent) {\n    this.unwrap(Agent.prototype, '_handleMessage');\n  }\n\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-sharedb/src/index.js"],"names":["READABLE_ACTION_NAMES","hs","qf","qs","qu","bf","bs","bu","f","s","u","op","nf","nt","p","pr","ps","pu","getReadableActionName","action","actionName","undefined","getReadableResourceName","readableActionName","collection","query","JSON","stringify","sanitize","input","output","isObject","Buffer","isBuffer","key","val","Array","wrapCallback","config","tracer","request","span","done","scope","bind","err","res","setTag","hooks","reply","finish","createAgentWrapHandle","wrapHandleMessage","origHandleMessageFn","handleMessageWithTrace","callback","a","childOf","active","startSpan","tags","service","_service","c","q","receive","arguments","apply","module","exports","name","versions","file","patch","Agent","wrap","prototype","unpatch","unwrap"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * @description The enum values in this map are not exposed from ShareDB, so the keys are hard-coded here.\n * The values were derived from: https://github.com/share/sharedb/blob/master/lib/client/connection.js#L196\n */\nconst READABLE_ACTION_NAMES = {\n  hs: 'handshake',\n  qf: 'query-fetch',\n  qs: 'query-subscribe',\n  qu: 'query-unsubscribe',\n  bf: 'bulk-fetch',\n  bs: 'bulk-subscribe',\n  bu: 'bulk-unsubscribe',\n  f: 'fetch',\n  s: 'subscribe',\n  u: 'unsubscribe',\n  op: 'op',\n  nf: 'snapshot-fetch',\n  nt: 'snapshot-fetch-by-ts',\n  p: 'presence-broadcast',\n  pr: 'presence-request',\n  ps: 'presence-subscribe',\n  pu: 'presence-unsubscribe'\n}\n\nfunction getReadableActionName (action) {\n  const actionName = READABLE_ACTION_NAMES[action]\n  if (actionName === undefined) {\n    return action\n  }\n  return actionName\n}\n\nfunction getReadableResourceName (readableActionName, collection, query) {\n  if (collection) {\n    readableActionName += ' ' + collection\n  }\n  if (query) {\n    readableActionName += ' ' + JSON.stringify(sanitize(query))\n  }\n  return readableActionName\n}\n\nfunction sanitize (input) {\n  const output = {}\n\n  if (!isObject(input) || Buffer.isBuffer(input)) return '?'\n\n  for (const key in input) {\n    if (typeof input[key] === 'function') continue\n\n    output[key] = sanitize(input[key])\n  }\n\n  return output\n}\n\nfunction isObject (val) {\n  return typeof val === 'object' && val !== null && !(val instanceof Array)\n}\n\nfunction wrapCallback (config, tracer, request, span, done) {\n  return tracer.scope().bind((err, res) => {\n    if (err) {\n      span.setTag('error', err)\n    }\n\n    if (config.hooks && config.hooks.reply) {\n      config.hooks.reply(span, request, res)\n    }\n\n    span.finish()\n\n    if (done) {\n      done(err, res)\n    }\n  })\n}\n\nfunction createAgentWrapHandle (tracer, config) {\n  return function wrapHandleMessage (origHandleMessageFn) { // called once\n    return function handleMessageWithTrace (request, callback) { // called for each trigger\n      const action = request.a\n\n      const actionName = getReadableActionName(action)\n\n      const scope = tracer.scope()\n      const childOf = scope.active()\n      const span = tracer.startSpan('sharedb.request', {\n        childOf,\n        tags: {\n          'service.name': config.service || tracer._service,\n          'span.kind': 'server',\n          'sharedb.action': actionName,\n          'resource.name': getReadableResourceName(actionName, request.c, request.q)\n        }\n      })\n\n      if (config.hooks && config.hooks.receive) {\n        config.hooks.receive(span, request)\n      }\n\n      arguments[1] = wrapCallback(config, tracer, request, span, callback)\n\n      return tracer.scope().bind(origHandleMessageFn, span).apply(this, arguments)\n    }\n  }\n}\n\nmodule.exports = {\n  name: 'sharedb',\n  versions: ['>=1'],\n  file: 'lib/agent.js',\n  patch (Agent, tracer, config) {\n    this.wrap(Agent.prototype, '_handleMessage', createAgentWrapHandle(tracer, config))\n  },\n  unpatch (Agent) {\n    this.unwrap(Agent.prototype, '_handleMessage')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}