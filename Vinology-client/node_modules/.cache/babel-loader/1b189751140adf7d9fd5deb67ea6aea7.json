{"ast":null,"code":"'use strict';\n\nconst Tags = require('opentracing').Tags;\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nconst OPERATION_NAME = 'pg.query';\n\nfunction createWrapQuery(tracer, config) {\n  return function wrapQuery(query) {\n    return function queryWithTrace() {\n      const scope = tracer.scope();\n      const childOf = scope.active();\n      const params = this.connectionParameters;\n      const service = getServiceName(tracer, config, params);\n      const span = tracer.startSpan(OPERATION_NAME, {\n        childOf,\n        tags: {\n          [Tags.SPAN_KIND]: Tags.SPAN_KIND_RPC_CLIENT,\n          'service.name': service,\n          'span.type': 'sql',\n          'span.kind': 'client',\n          'db.type': 'postgres'\n        }\n      });\n      analyticsSampler.sample(span, config.measured);\n      const retval = scope.bind(query, span).apply(this, arguments);\n      const queryQueue = this.queryQueue || this._queryQueue;\n      const activeQuery = this.activeQuery || this._activeQuery;\n      const pgQuery = queryQueue[queryQueue.length - 1] || activeQuery;\n\n      if (!pgQuery) {\n        return retval;\n      }\n\n      const originalCallback = pgQuery.callback;\n      const statement = pgQuery.text;\n      span.setTag('resource.name', statement);\n\n      if (params) {\n        span.addTags({\n          'db.name': params.database,\n          'db.user': params.user,\n          'out.host': params.host,\n          'out.port': params.port\n        });\n      }\n\n      const finish = error => {\n        span.setTag('error', error);\n        span.finish();\n      };\n\n      if (originalCallback) {\n        pgQuery.callback = scope.bind((err, res) => {\n          finish(err);\n          originalCallback(err, res);\n        }, childOf);\n      } else if (pgQuery.once) {\n        pgQuery.once('error', finish).once('end', () => finish());\n      } else {\n        pgQuery.then(() => finish(), finish);\n      }\n\n      return retval;\n    };\n  };\n}\n\nfunction getServiceName(tracer, config, params) {\n  if (typeof config.service === 'function') {\n    return config.service(params);\n  } else if (config.service) {\n    return config.service;\n  } else {\n    return `${tracer._service}-postgres`;\n  }\n}\n\nmodule.exports = [{\n  name: 'pg',\n  versions: ['>=4'],\n\n  patch(pg, tracer, config) {\n    this.wrap(pg.Client.prototype, 'query', createWrapQuery(tracer, config));\n  },\n\n  unpatch(pg) {\n    this.unwrap(pg.Client.prototype, 'query');\n  }\n\n}, {\n  name: 'pg',\n  versions: ['>=4'],\n  file: 'lib/native/index.js',\n\n  patch(Client, tracer, config) {\n    this.wrap(Client.prototype, 'query', createWrapQuery(tracer, config));\n  },\n\n  unpatch(Client) {\n    this.unwrap(Client.prototype, 'query');\n  }\n\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-pg/src/index.js"],"names":["Tags","require","analyticsSampler","OPERATION_NAME","createWrapQuery","tracer","config","wrapQuery","query","queryWithTrace","scope","childOf","active","params","connectionParameters","service","getServiceName","span","startSpan","tags","SPAN_KIND","SPAN_KIND_RPC_CLIENT","sample","measured","retval","bind","apply","arguments","queryQueue","_queryQueue","activeQuery","_activeQuery","pgQuery","length","originalCallback","callback","statement","text","setTag","addTags","database","user","host","port","finish","error","err","res","once","then","_service","module","exports","name","versions","patch","pg","wrap","Client","prototype","unpatch","unwrap","file"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Tags = require('opentracing').Tags\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\n\nconst OPERATION_NAME = 'pg.query'\n\nfunction createWrapQuery (tracer, config) {\n  return function wrapQuery (query) {\n    return function queryWithTrace () {\n      const scope = tracer.scope()\n      const childOf = scope.active()\n      const params = this.connectionParameters\n      const service = getServiceName(tracer, config, params)\n      const span = tracer.startSpan(OPERATION_NAME, {\n        childOf,\n        tags: {\n          [Tags.SPAN_KIND]: Tags.SPAN_KIND_RPC_CLIENT,\n          'service.name': service,\n          'span.type': 'sql',\n          'span.kind': 'client',\n          'db.type': 'postgres'\n        }\n      })\n\n      analyticsSampler.sample(span, config.measured)\n\n      const retval = scope.bind(query, span).apply(this, arguments)\n      const queryQueue = this.queryQueue || this._queryQueue\n      const activeQuery = this.activeQuery || this._activeQuery\n      const pgQuery = queryQueue[queryQueue.length - 1] || activeQuery\n\n      if (!pgQuery) {\n        return retval\n      }\n\n      const originalCallback = pgQuery.callback\n      const statement = pgQuery.text\n\n      span.setTag('resource.name', statement)\n\n      if (params) {\n        span.addTags({\n          'db.name': params.database,\n          'db.user': params.user,\n          'out.host': params.host,\n          'out.port': params.port\n        })\n      }\n\n      const finish = (error) => {\n        span.setTag('error', error)\n        span.finish()\n      }\n\n      if (originalCallback) {\n        pgQuery.callback = scope.bind((err, res) => {\n          finish(err)\n          originalCallback(err, res)\n        }, childOf)\n      } else if (pgQuery.once) {\n        pgQuery\n          .once('error', finish)\n          .once('end', () => finish())\n      } else {\n        pgQuery.then(() => finish(), finish)\n      }\n\n      return retval\n    }\n  }\n}\n\nfunction getServiceName (tracer, config, params) {\n  if (typeof config.service === 'function') {\n    return config.service(params)\n  } else if (config.service) {\n    return config.service\n  } else {\n    return `${tracer._service}-postgres`\n  }\n}\n\nmodule.exports = [\n  {\n    name: 'pg',\n    versions: ['>=4'],\n    patch (pg, tracer, config) {\n      this.wrap(pg.Client.prototype, 'query', createWrapQuery(tracer, config))\n    },\n    unpatch (pg) {\n      this.unwrap(pg.Client.prototype, 'query')\n    }\n  },\n  {\n    name: 'pg',\n    versions: ['>=4'],\n    file: 'lib/native/index.js',\n    patch (Client, tracer, config) {\n      this.wrap(Client.prototype, 'query', createWrapQuery(tracer, config))\n    },\n    unpatch (Client) {\n      this.unwrap(Client.prototype, 'query')\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}