{"ast":null,"code":"'use strict';\n\nconst {\n  AgentEncoder: BaseEncoder\n} = require('./0.4');\n\nconst ARRAY_OF_TWO = 0x92;\nconst ARRAY_OF_TWELVE = 0x9c;\n\nclass AgentEncoder extends BaseEncoder {\n  makePayload() {\n    const prefixSize = 1;\n    const stringSize = this._stringBytes.length + 5;\n    const traceSize = this._traceBytes.length + 5;\n    const buffer = Buffer.allocUnsafe(prefixSize + stringSize + traceSize);\n    let offset = 0;\n    buffer[offset++] = ARRAY_OF_TWO;\n    offset = this._writeStrings(buffer, offset);\n    offset = this._writeTraces(buffer, offset);\n\n    this._reset();\n\n    return buffer;\n  }\n\n  _encode(bytes, trace) {\n    this._encodeArrayPrefix(bytes, trace);\n\n    for (const span of trace) {\n      this._encodeByte(bytes, ARRAY_OF_TWELVE);\n\n      this._encodeString(bytes, span.service);\n\n      this._encodeString(bytes, span.name);\n\n      this._encodeString(bytes, span.resource);\n\n      this._encodeId(bytes, span.trace_id);\n\n      this._encodeId(bytes, span.span_id);\n\n      this._encodeId(bytes, span.parent_id);\n\n      this._encodeLong(bytes, span.start || 0);\n\n      this._encodeLong(bytes, span.duration || 0);\n\n      this._encodeInteger(bytes, span.error);\n\n      this._encodeMap(bytes, span.meta || {});\n\n      this._encodeMap(bytes, span.metrics || {});\n\n      this._encodeString(bytes, span.type);\n    }\n  }\n\n  _encodeString(bytes, value = '') {\n    this._cacheString(value);\n\n    this._encodeInteger(bytes, this._stringMap[value]);\n  }\n\n  _cacheString(value) {\n    if (!(value in this._stringMap)) {\n      this._stringMap[value] = this._stringCount++;\n\n      this._stringBytes.write(value);\n    }\n  }\n\n  _writeStrings(buffer, offset) {\n    offset = this._writeArrayPrefix(buffer, offset, this._stringCount);\n    offset += this._stringBytes.buffer.copy(buffer, offset, 0, this._stringBytes.length);\n    return offset;\n  }\n\n}\n\nmodule.exports = {\n  AgentEncoder\n};","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/dd-trace/src/encode/0.5.js"],"names":["AgentEncoder","BaseEncoder","require","ARRAY_OF_TWO","ARRAY_OF_TWELVE","makePayload","prefixSize","stringSize","_stringBytes","length","traceSize","_traceBytes","buffer","Buffer","allocUnsafe","offset","_writeStrings","_writeTraces","_reset","_encode","bytes","trace","_encodeArrayPrefix","span","_encodeByte","_encodeString","service","name","resource","_encodeId","trace_id","span_id","parent_id","_encodeLong","start","duration","_encodeInteger","error","_encodeMap","meta","metrics","type","value","_cacheString","_stringMap","_stringCount","write","_writeArrayPrefix","copy","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,YAAY,EAAEC;AAAhB,IAAgCC,OAAO,CAAC,OAAD,CAA7C;;AAEA,MAAMC,YAAY,GAAG,IAArB;AACA,MAAMC,eAAe,GAAG,IAAxB;;AAEA,MAAMJ,YAAN,SAA2BC,WAA3B,CAAuC;AACrCI,EAAAA,WAAW,GAAI;AACb,UAAMC,UAAU,GAAG,CAAnB;AACA,UAAMC,UAAU,GAAG,KAAKC,YAAL,CAAkBC,MAAlB,GAA2B,CAA9C;AACA,UAAMC,SAAS,GAAG,KAAKC,WAAL,CAAiBF,MAAjB,GAA0B,CAA5C;AACA,UAAMG,MAAM,GAAGC,MAAM,CAACC,WAAP,CAAmBR,UAAU,GAAGC,UAAb,GAA0BG,SAA7C,CAAf;AAEA,QAAIK,MAAM,GAAG,CAAb;AAEAH,IAAAA,MAAM,CAACG,MAAM,EAAP,CAAN,GAAmBZ,YAAnB;AAEAY,IAAAA,MAAM,GAAG,KAAKC,aAAL,CAAmBJ,MAAnB,EAA2BG,MAA3B,CAAT;AACAA,IAAAA,MAAM,GAAG,KAAKE,YAAL,CAAkBL,MAAlB,EAA0BG,MAA1B,CAAT;;AAEA,SAAKG,MAAL;;AAEA,WAAON,MAAP;AACD;;AAEDO,EAAAA,OAAO,CAAEC,KAAF,EAASC,KAAT,EAAgB;AACrB,SAAKC,kBAAL,CAAwBF,KAAxB,EAA+BC,KAA/B;;AAEA,SAAK,MAAME,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,WAAKG,WAAL,CAAiBJ,KAAjB,EAAwBhB,eAAxB;;AACA,WAAKqB,aAAL,CAAmBL,KAAnB,EAA0BG,IAAI,CAACG,OAA/B;;AACA,WAAKD,aAAL,CAAmBL,KAAnB,EAA0BG,IAAI,CAACI,IAA/B;;AACA,WAAKF,aAAL,CAAmBL,KAAnB,EAA0BG,IAAI,CAACK,QAA/B;;AACA,WAAKC,SAAL,CAAeT,KAAf,EAAsBG,IAAI,CAACO,QAA3B;;AACA,WAAKD,SAAL,CAAeT,KAAf,EAAsBG,IAAI,CAACQ,OAA3B;;AACA,WAAKF,SAAL,CAAeT,KAAf,EAAsBG,IAAI,CAACS,SAA3B;;AACA,WAAKC,WAAL,CAAiBb,KAAjB,EAAwBG,IAAI,CAACW,KAAL,IAAc,CAAtC;;AACA,WAAKD,WAAL,CAAiBb,KAAjB,EAAwBG,IAAI,CAACY,QAAL,IAAiB,CAAzC;;AACA,WAAKC,cAAL,CAAoBhB,KAApB,EAA2BG,IAAI,CAACc,KAAhC;;AACA,WAAKC,UAAL,CAAgBlB,KAAhB,EAAuBG,IAAI,CAACgB,IAAL,IAAa,EAApC;;AACA,WAAKD,UAAL,CAAgBlB,KAAhB,EAAuBG,IAAI,CAACiB,OAAL,IAAgB,EAAvC;;AACA,WAAKf,aAAL,CAAmBL,KAAnB,EAA0BG,IAAI,CAACkB,IAA/B;AACD;AACF;;AAEDhB,EAAAA,aAAa,CAAEL,KAAF,EAASsB,KAAK,GAAG,EAAjB,EAAqB;AAChC,SAAKC,YAAL,CAAkBD,KAAlB;;AACA,SAAKN,cAAL,CAAoBhB,KAApB,EAA2B,KAAKwB,UAAL,CAAgBF,KAAhB,CAA3B;AACD;;AAEDC,EAAAA,YAAY,CAAED,KAAF,EAAS;AACnB,QAAI,EAAEA,KAAK,IAAI,KAAKE,UAAhB,CAAJ,EAAiC;AAC/B,WAAKA,UAAL,CAAgBF,KAAhB,IAAyB,KAAKG,YAAL,EAAzB;;AACA,WAAKrC,YAAL,CAAkBsC,KAAlB,CAAwBJ,KAAxB;AACD;AACF;;AAED1B,EAAAA,aAAa,CAAEJ,MAAF,EAAUG,MAAV,EAAkB;AAC7BA,IAAAA,MAAM,GAAG,KAAKgC,iBAAL,CAAuBnC,MAAvB,EAA+BG,MAA/B,EAAuC,KAAK8B,YAA5C,CAAT;AACA9B,IAAAA,MAAM,IAAI,KAAKP,YAAL,CAAkBI,MAAlB,CAAyBoC,IAAzB,CAA8BpC,MAA9B,EAAsCG,MAAtC,EAA8C,CAA9C,EAAiD,KAAKP,YAAL,CAAkBC,MAAnE,CAAV;AAEA,WAAOM,MAAP;AACD;;AAxDoC;;AA2DvCkC,MAAM,CAACC,OAAP,GAAiB;AAAElD,EAAAA;AAAF,CAAjB","sourcesContent":["'use strict'\n\nconst { AgentEncoder: BaseEncoder } = require('./0.4')\n\nconst ARRAY_OF_TWO = 0x92\nconst ARRAY_OF_TWELVE = 0x9c\n\nclass AgentEncoder extends BaseEncoder {\n  makePayload () {\n    const prefixSize = 1\n    const stringSize = this._stringBytes.length + 5\n    const traceSize = this._traceBytes.length + 5\n    const buffer = Buffer.allocUnsafe(prefixSize + stringSize + traceSize)\n\n    let offset = 0\n\n    buffer[offset++] = ARRAY_OF_TWO\n\n    offset = this._writeStrings(buffer, offset)\n    offset = this._writeTraces(buffer, offset)\n\n    this._reset()\n\n    return buffer\n  }\n\n  _encode (bytes, trace) {\n    this._encodeArrayPrefix(bytes, trace)\n\n    for (const span of trace) {\n      this._encodeByte(bytes, ARRAY_OF_TWELVE)\n      this._encodeString(bytes, span.service)\n      this._encodeString(bytes, span.name)\n      this._encodeString(bytes, span.resource)\n      this._encodeId(bytes, span.trace_id)\n      this._encodeId(bytes, span.span_id)\n      this._encodeId(bytes, span.parent_id)\n      this._encodeLong(bytes, span.start || 0)\n      this._encodeLong(bytes, span.duration || 0)\n      this._encodeInteger(bytes, span.error)\n      this._encodeMap(bytes, span.meta || {})\n      this._encodeMap(bytes, span.metrics || {})\n      this._encodeString(bytes, span.type)\n    }\n  }\n\n  _encodeString (bytes, value = '') {\n    this._cacheString(value)\n    this._encodeInteger(bytes, this._stringMap[value])\n  }\n\n  _cacheString (value) {\n    if (!(value in this._stringMap)) {\n      this._stringMap[value] = this._stringCount++\n      this._stringBytes.write(value)\n    }\n  }\n\n  _writeStrings (buffer, offset) {\n    offset = this._writeArrayPrefix(buffer, offset, this._stringCount)\n    offset += this._stringBytes.buffer.copy(buffer, offset, 0, this._stringBytes.length)\n\n    return offset\n  }\n}\n\nmodule.exports = { AgentEncoder }\n"]},"metadata":{},"sourceType":"script"}