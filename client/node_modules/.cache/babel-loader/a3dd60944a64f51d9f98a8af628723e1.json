{"ast":null,"code":"'use strict';\n\nconst tx = require('../../dd-trace/src/plugins/util/promise');\n\nconst DD_LIB_COPIES = '_datadog_library_copies';\n\nfunction createGetNewLibraryCopyWrap(tracer, config, originalLib, shim) {\n  return function wrapGetNewLibraryCopy(getNewLibraryCopy) {\n    return function getNewLibraryCopyWithTrace() {\n      const libraryCopy = getNewLibraryCopy.apply(this, arguments);\n      shim.wrap(libraryCopy.prototype, '_then', tx.createWrapThen(tracer, config));\n      shim.wrap(libraryCopy, 'getNewLibraryCopy', createGetNewLibraryCopyWrap(tracer, config, originalLib, shim));\n      addToLibraryCopies(originalLib, libraryCopy);\n      return libraryCopy;\n    };\n  };\n}\n\nfunction addToLibraryCopies(originalLib, libraryCopy) {\n  let libraryCopies = originalLib[DD_LIB_COPIES];\n\n  if (!libraryCopies) {\n    libraryCopies = new Set();\n    Object.defineProperty(originalLib, DD_LIB_COPIES, {\n      writable: true,\n      configurable: true,\n      value: libraryCopies\n    });\n  }\n\n  libraryCopies.add(libraryCopy);\n}\n\nfunction unwrapLibraryCopies(originalLib, shim) {\n  const libraryCopies = originalLib[DD_LIB_COPIES];\n\n  if (libraryCopies) {\n    libraryCopies.forEach(libraryCopy => {\n      shim.unwrap(libraryCopy.prototype, '_then');\n      shim.unwrap(libraryCopy, 'getNewLibraryCopy');\n    });\n    libraryCopies.clear();\n    delete originalLib[DD_LIB_COPIES];\n  }\n}\n\nmodule.exports = [{\n  name: 'bluebird',\n  versions: ['^2.11.0', '^3.4.1'],\n\n  patch(Promise, tracer, config) {\n    this.wrap(Promise, 'getNewLibraryCopy', createGetNewLibraryCopyWrap(tracer, config, Promise, this));\n  },\n\n  unpatch(Promise) {\n    this.unwrap(Promise, 'getNewLibraryCopy');\n    unwrapLibraryCopies(Promise, this);\n  }\n\n}, {\n  name: 'bluebird',\n  versions: ['>=2.0.2'],\n\n  // 2.0.0 and 2.0.1 were removed from npm\n  patch(Promise, tracer, config) {\n    this.wrap(Promise.prototype, '_then', tx.createWrapThen(tracer, config));\n  },\n\n  unpatch(Promise) {\n    this.unwrap(Promise.prototype, '_then');\n  }\n\n}];","map":{"version":3,"sources":["/Users/danielcalderon/vinology/Vinology-client/node_modules/dd-trace/packages/datadog-plugin-bluebird/src/index.js"],"names":["tx","require","DD_LIB_COPIES","createGetNewLibraryCopyWrap","tracer","config","originalLib","shim","wrapGetNewLibraryCopy","getNewLibraryCopy","getNewLibraryCopyWithTrace","libraryCopy","apply","arguments","wrap","prototype","createWrapThen","addToLibraryCopies","libraryCopies","Set","Object","defineProperty","writable","configurable","value","add","unwrapLibraryCopies","forEach","unwrap","clear","module","exports","name","versions","patch","Promise","unpatch"],"mappings":"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","sourcesContent":["'use strict'\n\nconst tx = require('../../dd-trace/src/plugins/util/promise')\n\nconst DD_LIB_COPIES = '_datadog_library_copies'\n\nfunction createGetNewLibraryCopyWrap (tracer, config, originalLib, shim) {\n  return function wrapGetNewLibraryCopy (getNewLibraryCopy) {\n    return function getNewLibraryCopyWithTrace () {\n      const libraryCopy = getNewLibraryCopy.apply(this, arguments)\n      shim.wrap(libraryCopy.prototype, '_then', tx.createWrapThen(tracer, config))\n      shim.wrap(libraryCopy, 'getNewLibraryCopy', createGetNewLibraryCopyWrap(tracer, config, originalLib, shim))\n      addToLibraryCopies(originalLib, libraryCopy)\n      return libraryCopy\n    }\n  }\n}\n\nfunction addToLibraryCopies (originalLib, libraryCopy) {\n  let libraryCopies = originalLib[DD_LIB_COPIES]\n\n  if (!libraryCopies) {\n    libraryCopies = new Set()\n\n    Object.defineProperty(originalLib, DD_LIB_COPIES, {\n      writable: true,\n      configurable: true,\n      value: libraryCopies\n    })\n  }\n  libraryCopies.add(libraryCopy)\n}\n\nfunction unwrapLibraryCopies (originalLib, shim) {\n  const libraryCopies = originalLib[DD_LIB_COPIES]\n\n  if (libraryCopies) {\n    libraryCopies.forEach(libraryCopy => {\n      shim.unwrap(libraryCopy.prototype, '_then')\n      shim.unwrap(libraryCopy, 'getNewLibraryCopy')\n    })\n    libraryCopies.clear()\n    delete originalLib[DD_LIB_COPIES]\n  }\n}\n\nmodule.exports = [\n  {\n    name: 'bluebird',\n    versions: ['^2.11.0', '^3.4.1'],\n    patch (Promise, tracer, config) {\n      this.wrap(Promise, 'getNewLibraryCopy', createGetNewLibraryCopyWrap(tracer, config, Promise, this))\n    },\n    unpatch (Promise) {\n      this.unwrap(Promise, 'getNewLibraryCopy')\n      unwrapLibraryCopies(Promise, this)\n    }\n  },\n  {\n    name: 'bluebird',\n    versions: ['>=2.0.2'], // 2.0.0 and 2.0.1 were removed from npm\n    patch (Promise, tracer, config) {\n      this.wrap(Promise.prototype, '_then', tx.createWrapThen(tracer, config))\n    },\n    unpatch (Promise) {\n      this.unwrap(Promise.prototype, '_then')\n    }\n  }\n]\n"]},"metadata":{},"sourceType":"script"}