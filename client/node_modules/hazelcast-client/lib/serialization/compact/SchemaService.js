"use strict";
/*
 * Copyright (c) 2008-2022, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaService = void 0;
const InvocationService_1 = require("../../invocation/InvocationService");
const ClientSendAllSchemasCodec_1 = require("../../codec/ClientSendAllSchemasCodec");
const ClientFetchSchemaCodec_1 = require("../../codec/ClientFetchSchemaCodec");
const ClientSendSchemaCodec_1 = require("../../codec/ClientSendSchemaCodec");
const core_1 = require("../../core");
/**
 * Service to put and get metadata to cluster.
 * @internal
 */
class SchemaService {
    constructor(
    // a getter is used because there is a cyclic dependency between InvocationService and SchemaService
    getInvocationService, logger) {
        this.getInvocationService = getInvocationService;
        this.logger = logger;
        this.schemas = new Map();
    }
    /**
     * Fetches the schema with id {@link schemaId} from cluster to local registry of the schema service.
     */
    fetchSchema(schemaId) {
        const invocation = new InvocationService_1.Invocation(this.getInvocationService(), ClientFetchSchemaCodec_1.ClientFetchSchemaCodec.encodeRequest(schemaId));
        invocation.handler = ClientFetchSchemaCodec_1.ClientFetchSchemaCodec.decodeResponse;
        return this.getInvocationService().invoke(invocation).then(schema => {
            if (schema !== null) {
                this.putIfAbsent(schema);
                this.logger.trace('SchemaService', `Found schema id ${schemaId} on the cluster`);
            }
            else {
                this.logger.trace('SchemaService', `Did not find schema id ${schemaId} on the cluster`);
                throw new core_1.HazelcastSerializationError(`The schema can not be found with id ${schemaId}`);
            }
        });
    }
    /**
     * Returns the schema with id {@link schemaId} in schema service's local registry,
     * returning `undefined` if it is not found.
     */
    get(schemaId) {
        return this.schemas.get(schemaId.toString());
    }
    /**
     * Puts the schema with the given id to the cluster.
     */
    put(schema) {
        const schemaId = schema.schemaId;
        const existingSchema = this.schemas.get(schemaId.toString());
        if (existingSchema !== undefined) {
            this.logger.trace('SchemaService', `Schema id ${schemaId} already exists locally`);
            return Promise.resolve();
        }
        const message = ClientSendSchemaCodec_1.ClientSendSchemaCodec.encodeRequest(schema);
        const invocation = new InvocationService_1.Invocation(this.getInvocationService(), message);
        return this.getInvocationService().invoke(invocation).then(() => {
            this.putIfAbsent(schema);
        });
    }
    putIfAbsent(schema) {
        const schemaId = schema.schemaId;
        const existingSchema = this.schemas.get(schemaId.toString());
        if (existingSchema === undefined) {
            this.logger.trace('SchemaService', `Added schema with id ${schemaId} locally`);
            this.schemas.set(schemaId.toString(), schema);
            return;
        }
        if (!existingSchema.equals(schema)) {
            throw new core_1.IllegalStateError(`Schema with schemaId ${schemaId} already exists. existing schema: ${existingSchema} new schema: ${schema}`);
        }
    }
    sendAllSchemas() {
        if (this.schemas.size === 0) {
            this.logger.trace('SchemaService', 'There is no schemas to send to the cluster');
            return Promise.resolve();
        }
        this.logger.trace('SchemaService', `Sending ${this.schemas.size} schemas to the cluster ${this.schemas}`);
        const message = ClientSendAllSchemasCodec_1.ClientSendAllSchemasCodec.encodeRequest([...this.schemas.values()]);
        const invocation = new InvocationService_1.Invocation(this.getInvocationService(), message);
        return this.getInvocationService().invokeUrgent(invocation).then(() => { });
    }
}
exports.SchemaService = SchemaService;
//# sourceMappingURL=SchemaService.js.map