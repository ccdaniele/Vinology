{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tracer_1 = require(\"./tracer\");\n\nvar noopTracer = new tracer_1.default();\nvar _globalTracer = null; // Allows direct importing/requiring of the global tracer:\n//\n// let globalTracer = require('opentracing/global');\n//      OR\n// import globalTracer from 'opentracing/global';\n//\n// Acts a bridge to the global tracer that can be safely called before the\n// global tracer is initialized. The purpose of the delegation is to avoid the\n// sometimes nearly intractible initialization order problems that can arise in\n// applications with a complex set of dependencies, while also avoiding the\n// case where\n\nvar GlobalTracerDelegate =\n/** @class */\nfunction (_super) {\n  __extends(GlobalTracerDelegate, _super);\n\n  function GlobalTracerDelegate() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GlobalTracerDelegate.prototype.startSpan = function () {\n    var tracer = _globalTracer || noopTracer;\n    return tracer.startSpan.apply(tracer, arguments);\n  };\n\n  GlobalTracerDelegate.prototype.inject = function () {\n    var tracer = _globalTracer || noopTracer;\n    return tracer.inject.apply(tracer, arguments);\n  };\n\n  GlobalTracerDelegate.prototype.extract = function () {\n    var tracer = _globalTracer || noopTracer;\n    return tracer.extract.apply(tracer, arguments);\n  };\n\n  return GlobalTracerDelegate;\n}(tracer_1.default);\n\nvar globalTracerDelegate = new GlobalTracerDelegate();\n/**\n * Set the global Tracer.\n *\n * The behavior is undefined if this function is called more than once.\n *\n * @param {Tracer} tracer - the Tracer implementation\n */\n\nfunction initGlobalTracer(tracer) {\n  _globalTracer = tracer;\n}\n\nexports.initGlobalTracer = initGlobalTracer;\n/**\n * Returns the global tracer.\n */\n\nfunction globalTracer() {\n  // Return the delegate.  Since the global tracer is largely a convenience\n  // (the user can always create their own tracers), the delegate is used to\n  // give the added convenience of not needing to worry about initialization\n  // order.\n  return globalTracerDelegate;\n}\n\nexports.globalTracer = globalTracer;","map":{"version":3,"sources":["../src/global_tracer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,UAAU,GAAG,IAAI,QAAA,CAAA,OAAJ,EAAnB;AACA,IAAI,aAAa,GAAkB,IAAnC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAAnC,WAAA,oBAAA,GAAA;;AAgBC;;AAdG,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACI,QAAM,MAAM,GAAG,aAAa,IAAI,UAAhC;AACA,WAAO,MAAM,CAAC,SAAP,CAAiB,KAAjB,CAAuB,MAAvB,EAA+B,SAA/B,CAAP;AACH,GAHD;;AAKA,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,QAAM,MAAM,GAAG,aAAa,IAAI,UAAhC;AACA,WAAO,MAAM,CAAC,MAAP,CAAc,KAAd,CAAoB,MAApB,EAA4B,SAA5B,CAAP;AACH,GAHD;;AAKA,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACI,QAAM,MAAM,GAAG,aAAa,IAAI,UAAhC;AACA,WAAO,MAAM,CAAC,OAAP,CAAe,KAAf,CAAqB,MAArB,EAA6B,SAA7B,CAAP;AACH,GAHD;;AAIJ,SAAA,oBAAA;AAAC,CAhBD,CAAmC,QAAA,CAAA,OAAnC,CAAA;;AAkBA,IAAM,oBAAoB,GAAG,IAAI,oBAAJ,EAA7B;AAEA;;;;;;AAMG;;AACH,SAAgB,gBAAhB,CAAiC,MAAjC,EAA+C;AAC3C,EAAA,aAAa,GAAG,MAAhB;AACH;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAIA;;AAEG;;AACH,SAAgB,YAAhB,GAA4B;AACxB;AACA;AACA;AACA;AACA,SAAO,oBAAP;AACH;;AAND,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tracer_1 = require(\"./tracer\");\nvar noopTracer = new tracer_1.default();\nvar _globalTracer = null;\n// Allows direct importing/requiring of the global tracer:\n//\n// let globalTracer = require('opentracing/global');\n//      OR\n// import globalTracer from 'opentracing/global';\n//\n// Acts a bridge to the global tracer that can be safely called before the\n// global tracer is initialized. The purpose of the delegation is to avoid the\n// sometimes nearly intractible initialization order problems that can arise in\n// applications with a complex set of dependencies, while also avoiding the\n// case where\nvar GlobalTracerDelegate = /** @class */ (function (_super) {\n    __extends(GlobalTracerDelegate, _super);\n    function GlobalTracerDelegate() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalTracerDelegate.prototype.startSpan = function () {\n        var tracer = _globalTracer || noopTracer;\n        return tracer.startSpan.apply(tracer, arguments);\n    };\n    GlobalTracerDelegate.prototype.inject = function () {\n        var tracer = _globalTracer || noopTracer;\n        return tracer.inject.apply(tracer, arguments);\n    };\n    GlobalTracerDelegate.prototype.extract = function () {\n        var tracer = _globalTracer || noopTracer;\n        return tracer.extract.apply(tracer, arguments);\n    };\n    return GlobalTracerDelegate;\n}(tracer_1.default));\nvar globalTracerDelegate = new GlobalTracerDelegate();\n/**\n * Set the global Tracer.\n *\n * The behavior is undefined if this function is called more than once.\n *\n * @param {Tracer} tracer - the Tracer implementation\n */\nfunction initGlobalTracer(tracer) {\n    _globalTracer = tracer;\n}\nexports.initGlobalTracer = initGlobalTracer;\n/**\n * Returns the global tracer.\n */\nfunction globalTracer() {\n    // Return the delegate.  Since the global tracer is largely a convenience\n    // (the user can always create their own tracers), the delegate is used to\n    // give the added convenience of not needing to worry about initialization\n    // order.\n    return globalTracerDelegate;\n}\nexports.globalTracer = globalTracer;\n//# sourceMappingURL=global_tracer.js.map"]},"metadata":{},"sourceType":"script"}